#! /bin/sh

# Copyright (c) 2006-2008, Universities Space Research Association (USRA).
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Universities Space Research Association nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

usage="Usage: run-ue [-s] [-v [-h <hostname>] [-n <portnumber>] -b] [-d <debug file>] \
                     <plan> [<script>] [-l <library>]*"

# Convenient though stylized script for running exec-test-runner_g_rt.
# Requires environment variable PLEXIL_HOME to be set to desired working directory,
# i.e. the directory containing universal-exec, interfaces, and apps directories.
# An optional environment variable UE_EXECUTABLE names an alternate executable.
# Other options:
#
#  -s suppresses a leading printed summary.
#  -v requests that plan state be transmitted to the UE viewer.
#  -h hostname of viewer
#  -n portnumber of viewer
#  -d debug file (default is Debug.cfg)

# Unless simulation script file is specified, it defaults to (in order
# of existence):
#        PLAN-script.plx
#        PLAN_script.plx
#        script-PLAN.plx
#        script_PLAN.plx
# located either in the current directory, or in a 'scripts'
# subdirectory, where PLAN is the basename of the plan argument.  The
# plan and script files are schecked for existence (but not the libraries).  If
# none of these script files exist, the empty script is used:
#        apps/TestExec/scripts/empty-script.plx

# Check environment variables and UE executable
if [ ! $PLEXIL_HOME ]
  then
    echo Error: Please set environment variable PLEXIL_HOME
    echo to the full pathname of the directory containing universal-exec
    exit 1
fi

# Determine executable
if [ $UE_EXECUTABLE ]
  then
    prog=$UE_EXECUTABLE
  else
    prog=$PLEXIL_HOME/apps/TestExecSAS/sas-test-exec_g_rt
fi

# Make sure executable exists.
if [ ! -e $prog ]
  then
    echo Error: $prog does not exist.
    echo You probably need to build it.
    exit 1
fi

# Check for summary suppression
if [ '-s' = "$1" ]
  then
    summary=0
    shift
  else
    summary=1
fi

# Check for viewer request
if [ '-v' = "$1" ]
  then
    viewer=-v
    shift
  else
    viewer=
fi

# Check for viewer host name
if [ '-h' = "$1" ]
  then
    host="-h $2"
    shift
    shift
  else
    host=
fi

# Check for viewer port number
if [ '-n' = "$1" ]
  then
    port="-n $2"
    shift
    shift
  else
    port=
fi

# Check for viewer should block
if [ '-b' = "$1" ]
  then
    block="-b"
    shift
  else
    block=
fi

# Check for specified debug file
if [ '-d' = "$1" ]
  then
    shift
    debug_file="$1"
    shift
  else
    debug_file="Debug.cfg"
fi

# Any more arguments?
if [ $# -eq 0 ]
  then
    echo $usage
    exit 1
fi

# Process first argument, which is the plan.
plan=$1
shift

# Check the plan's existence
if [ ! -e $plan ]
  then
    echo Error: Plan $plan does not exist.
    exit 1
fi

# Default simulation script
script="$PLEXIL_HOME/apps/TestExec/scripts/empty-script.plx"

# The plan file's extension, used to compute guessed script name.
ext=".`echo $plan | awk -F. '{print $2}'`"

# Alternate script candidates
script1=`basename $plan $ext`-script.plx
script2=`basename $plan $ext`_script.plx
script3=script-`basename $plan $ext`.plx
script4=script_`basename $plan $ext`.plx

# If no more arguments, or next argument -l, check for candidate scripts.
# Otherwise, next argument must be script.
if [ $# -eq 0 ]
  then
    guess_script=1
  elif [ $1 = '-l' ]
    then
      guess_script=1
    else
      guess_script=0
      script=$1
      shift
      if [ ! -e $script ]
        then
          echo Error: Script $script does not exist.
          exit 1
      fi
fi

if [ $guess_script -eq 1 ]
  then
    for s in $script1 $script2 $script3 $script4
      do
        if [ -e $s ]
          then
            script=$s
            break
          elif [ -e scripts/$s ]
            then
              script=scripts/$s
              break
        fi
    done
fi

# The only valid next argument left is "-l", which precedes each library
if [ $# -gt 0 ]
  then
    if [ '-l' = $1 ] 
      then
        libraries=$*
      else
        echo Error: expected -l at this point
        echo $usage
        exit 1
    fi
fi

# Print summary if desired
if [ $summary -eq 1 ] 
  then
    echo Running UE from $PLEXIL_HOME
    echo "  Plan:      $plan"
    echo "  Script:    $script"
    echo "  Libraries: $*"
    echo
fi

# Go for it
export LD_LIBRARY_PATH=${PLEXIL_HOME}/universal-exec/lib:${PLEXIL_HOME}/interfaces/lib
# Mac OS X only
export DYLD_LIBRARY_PATH=${PLEXIL_HOME}/universal-exec/lib:${PLEXIL_HOME}/interfaces/lib:${PLEXIL_HOME}/interfaces/lcm/lib:${PLEXIL_HOME}/apps/TestExecSAS/lcm:${PLEXIL_HOME}/apps/TestExecSAS/lcm/structs/lib
export DYLD_BIND_AT_LAUNCH=YES
$prog -p $plan -d $debug_file $* $viewer $host $port $block
