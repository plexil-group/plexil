[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
StartConditionCheck{
 State: (id_203[au](INACTIVE): state(INACTIVE)) (inf)
}

[PlexilExec:handleConditionsChanged]Node StartConditionCheck had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'StartConditionCheck' for state transition.
[PlexilExec:handleConditionsChanged]Node 'StartConditionCheck' is an assignment node that is no longer possibly executing.  Removing it from resource contention.
[PlexilExec:handleConditionsChanged]Placing node 'StartConditionCheck' on the state change queue in position 1
[Test:testOutput]Creating initial state some_state() = 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: StartConditionCheck 
[PlexilExec:lock]Locking node StartConditionCheck
[PlexilExec:step][1:0:0] Transitioning node StartConditionCheck
[Test:testOutput]Registering change lookup some_state() with tolerances 1
[PlexilExec:handleConditionsChanged]Node StartConditionCheck had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'StartConditionCheck' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Removing node from resource contention.
[PlexilExec:unlock]Unlocking node StartConditionCheck
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
StartConditionCheck{
 State: (id_203[au](WAITING): state(WAITING)) (0)
 StartCondition: (id_247[au](0): ((id_249[au](0): LookupOnChange(some_state(), (id_250[au](1): real))) >= (id_251[au](3): real)))
 EndCondition: (id_253[iu](UNKNOWN): ((id_252[iu](UNKNOWN): boolean) && (id_222[au](1): boolean))
 InvariantCondition: (id_224[au](1): boolean)
 PreCondition: (id_226[au](1): boolean)
 PostCondition: (id_228[au](1): boolean)
 RepeatCondition: (id_230[au](0): boolean)
 AncestorInvariantCondition: (id_232[au](1): boolean)
 AncestorEndCondition: (id_234[au](0): boolean)
 ParentExecutingCondition: (id_236[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_238[au](UNKNOWN): boolean)
 AbortCompleteCondition: (id_240[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_242[au](0): boolean)
 ParentFinishedCondition: (id_244[au](0): boolean)
 foo: (id_246[iu](0): int)
}

[Test:testOutput]Processing event: some_state() = 1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
StartConditionCheck{
 State: (id_203[au](WAITING): state(WAITING)) (0)
 StartCondition: (id_247[au](0): ((id_249[au](1): LookupOnChange(some_state(), (id_250[au](1): real))) >= (id_251[au](3): real)))
 EndCondition: (id_253[iu](UNKNOWN): ((id_252[iu](UNKNOWN): boolean) && (id_222[au](1): boolean))
 InvariantCondition: (id_224[au](1): boolean)
 PreCondition: (id_226[au](1): boolean)
 PostCondition: (id_228[au](1): boolean)
 RepeatCondition: (id_230[au](0): boolean)
 AncestorInvariantCondition: (id_232[au](1): boolean)
 AncestorEndCondition: (id_234[au](0): boolean)
 ParentExecutingCondition: (id_236[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_238[au](UNKNOWN): boolean)
 AbortCompleteCondition: (id_240[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_242[au](0): boolean)
 ParentFinishedCondition: (id_244[au](0): boolean)
 foo: (id_246[iu](0): int)
}

[Test:testOutput]Processing event: some_state() = 2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
StartConditionCheck{
 State: (id_203[au](WAITING): state(WAITING)) (0)
 StartCondition: (id_247[au](0): ((id_249[au](2): LookupOnChange(some_state(), (id_250[au](1): real))) >= (id_251[au](3): real)))
 EndCondition: (id_253[iu](UNKNOWN): ((id_252[iu](UNKNOWN): boolean) && (id_222[au](1): boolean))
 InvariantCondition: (id_224[au](1): boolean)
 PreCondition: (id_226[au](1): boolean)
 PostCondition: (id_228[au](1): boolean)
 RepeatCondition: (id_230[au](0): boolean)
 AncestorInvariantCondition: (id_232[au](1): boolean)
 AncestorEndCondition: (id_234[au](0): boolean)
 ParentExecutingCondition: (id_236[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_238[au](UNKNOWN): boolean)
 AbortCompleteCondition: (id_240[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_242[au](0): boolean)
 ParentFinishedCondition: (id_244[au](0): boolean)
 foo: (id_246[iu](0): int)
}

[Test:testOutput]Processing event: some_state() = 3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:handleConditionsChanged]Node StartConditionCheck had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'StartConditionCheck' for state transition.
[PlexilExec:handleConditionsChanged]Node 'StartConditionCheck' is an assignment node that could be executing.  Adding it to the resource contention list 
[PlexilExec:addToResourceContention]Adding node 'StartConditionCheck' to resource contention.
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:resolveResourceConflicts]Node 'StartConditionCheck' has best priority.  Adding it to be executed in position 2
[PlexilExec:step][4:0] State change queue: StartConditionCheck 
[PlexilExec:lock]Locking node StartConditionCheck
[PlexilExec:step][4:0:0] Transitioning node StartConditionCheck
[PlexilExec:handleNeedsExecution]Storing action for node 'StartConditionCheck' to be executed.
[PlexilExec:handleConditionsChanged]Node StartConditionCheck had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'StartConditionCheck' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node StartConditionCheck
[Test:testOutput]Assigning 'foo' ((id_246[au](0): int)) to 3
[PlexilExec:handleConditionsChanged]Node StartConditionCheck had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'StartConditionCheck' for state transition.
[PlexilExec:handleConditionsChanged]Node 'StartConditionCheck' is an assignment node that is no longer possibly executing.  Removing it from resource contention.
[PlexilExec:handleConditionsChanged]Placing node 'StartConditionCheck' on the state change queue in position 3
[PlexilExec:step][4:1] State change queue: StartConditionCheck 
[PlexilExec:lock]Locking node StartConditionCheck
[PlexilExec:step][4:1:0] Transitioning node StartConditionCheck
[PlexilExec:handleConditionsChanged]Node StartConditionCheck had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'StartConditionCheck' for state transition.
[PlexilExec:handleConditionsChanged]Node 'StartConditionCheck' is an assignment node that is no longer possibly executing.  Removing it from resource contention.
[PlexilExec:handleConditionsChanged]Placing node 'StartConditionCheck' on the state change queue in position 4
[PlexilExec:unlock]Unlocking node StartConditionCheck
[PlexilExec:step][4:2] State change queue: StartConditionCheck 
[PlexilExec:lock]Locking node StartConditionCheck
[PlexilExec:step][4:2:0] Transitioning node StartConditionCheck
[PlexilExec:handleConditionsChanged]Node StartConditionCheck had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'StartConditionCheck' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Removing node from resource contention.
[PlexilExec:unlock]Unlocking node StartConditionCheck
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
StartConditionCheck{
 State: (id_203[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_204[au](SUCCESS):  outcome)
 foo: (id_246[iu](3): int)
}

