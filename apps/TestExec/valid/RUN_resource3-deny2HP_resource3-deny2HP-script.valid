[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: (id_276[au](INACTIVE): state(INACTIVE)) (inf)
  C1{
   State: (id_326[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C2{
   State: (id_378[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C3{
   State: (id_429[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:step][1:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 6
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 7
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 8
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:step][1:3] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:step][1:3:1] Transitioning node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:step][1:3:2] Transitioning node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[Test:testOutput]Permission to execute c1 has been denied by the resource arbiter.
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 9
[Test:testOutput]Permission to execute c2 has been denied by the resource arbiter.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 10
[Test:testOutput]Executing c3() into noId with ack (id_602[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: (id_276[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_294[au](0): boolean)
 StartCondition: (id_296[au](1): boolean)
 EndCondition: (id_480[au](0): childrenFinished(0:3))
 InvariantCondition: (id_300[au](1): boolean)
 PreCondition: (id_302[au](1): boolean)
 PostCondition: (id_304[au](1): boolean)
 RepeatCondition: (id_306[au](0): boolean)
 AncestorInvariantCondition: (id_308[au](1): boolean)
 AncestorEndCondition: (id_310[au](0): boolean)
 ParentExecutingCondition: (id_312[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_477[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_316[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_318[au](0): boolean)
 ParentFinishedCondition: (id_320[au](0): boolean)
 CommandHandleReceivedCondition: (id_322[au](1): boolean)
 command_handle: (id_279[au](UNKNOWN):  command_handle)
  C1{
   State: (id_326[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_344[au](0): boolean)
   StartCondition: (id_346[au](1): boolean)
   EndCondition: (id_520[au](1): ((id_516[au](1): interruptibleCommandHandleValues((id_513[au](COMMAND_DENIED): string))) || (id_518[au](0): ((id_514[au](1): isknown((id_513[au](COMMAND_DENIED): string))) && (id_504[au](0): ((id_506[au](10): int) == (id_374[au](-1): int)))))
   InvariantCondition: (id_350[au](1): boolean)
   PreCondition: (id_352[au](1): boolean)
   PostCondition: (id_507[au](0): (id_510[au](0): ((id_329[au](COMMAND_DENIED):  command_handle) == (id_509[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_356[au](0): boolean)
   AncestorInvariantCondition: (id_487[au](1): (TransparentWrapper(id_483[auT]{1}((id_308[au](1): boolean)) && TransparentWrapper(id_485[auT]{1}((id_300[au](1): boolean)))
   AncestorEndCondition: (id_493[iu](UNKNOWN): (TransparentWrapper(id_489[iuT]{0}((id_310[au](0): boolean)) || TransparentWrapper(id_491[iuT]{0}((id_480[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_496[iu](UNKNOWN): ((id_276[au](EXECUTING): state(EXECUTING)) == (id_495[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_364[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_512[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_499[iu](UNKNOWN): ((id_276[au](EXECUTING): state(EXECUTING)) == (id_498[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_502[iu](UNKNOWN): ((id_276[au](EXECUTING): state(EXECUTING)) == (id_501[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_524[au](1): ((id_522[au](1): allCommandHandleValues((id_513[au](COMMAND_DENIED): string))) && (id_372[au](1): boolean))
   command_handle: (id_329[au](COMMAND_DENIED):  command_handle)
   returnValue: (id_374[au](-1): int)
   mem_priority: (id_375[au](5): int)
  }
  C2{
   State: (id_378[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_396[au](0): boolean)
   StartCondition: (id_398[au](1): boolean)
   EndCondition: (id_563[au](1): ((id_559[au](1): interruptibleCommandHandleValues((id_556[au](COMMAND_DENIED): string))) || (id_561[au](1): ((id_557[au](1): isknown((id_556[au](COMMAND_DENIED): string))) && (id_400[au](1): boolean)))
   InvariantCondition: (id_402[au](1): boolean)
   PreCondition: (id_404[au](1): boolean)
   PostCondition: (id_550[au](0): (id_553[au](0): ((id_381[au](COMMAND_DENIED):  command_handle) == (id_552[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_408[au](0): boolean)
   AncestorInvariantCondition: (id_536[au](1): (TransparentWrapper(id_532[auT]{1}((id_308[au](1): boolean)) && TransparentWrapper(id_534[auT]{1}((id_300[au](1): boolean)))
   AncestorEndCondition: (id_542[iu](UNKNOWN): (TransparentWrapper(id_538[iuT]{0}((id_310[au](0): boolean)) || TransparentWrapper(id_540[iuT]{0}((id_480[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_544[iu](UNKNOWN): ((id_276[au](EXECUTING): state(EXECUTING)) == (id_495[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_416[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_555[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_546[iu](UNKNOWN): ((id_276[au](EXECUTING): state(EXECUTING)) == (id_498[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_548[iu](UNKNOWN): ((id_276[au](EXECUTING): state(EXECUTING)) == (id_501[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_567[au](1): ((id_565[au](1): allCommandHandleValues((id_556[au](COMMAND_DENIED): string))) && (id_424[au](1): boolean))
   command_handle: (id_381[au](COMMAND_DENIED):  command_handle)
   mem_priority2: (id_426[au](10): int)
  }
  C3{
   State: (id_429[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_447[au](0): boolean)
   StartCondition: (id_449[au](1): boolean)
   EndCondition: (id_609[au](0): ((id_605[au](0): interruptibleCommandHandleValues((id_602[au](UNKNOWN): string))) || (id_607[au](0): ((id_603[au](0): isknown((id_602[au](UNKNOWN): string))) && (id_451[au](1): boolean)))
   InvariantCondition: (id_453[au](1): boolean)
   PreCondition: (id_455[au](1): boolean)
   PostCondition: (id_596[au](UNKNOWN): (id_599[au](UNKNOWN): ((id_432[au](UNKNOWN):  command_handle) == (id_598[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_459[au](0): boolean)
   AncestorInvariantCondition: (id_582[au](1): (TransparentWrapper(id_578[auT]{1}((id_308[au](1): boolean)) && TransparentWrapper(id_580[auT]{1}((id_300[au](1): boolean)))
   AncestorEndCondition: (id_588[iu](UNKNOWN): (TransparentWrapper(id_584[iuT]{0}((id_310[au](0): boolean)) || TransparentWrapper(id_586[iuT]{0}((id_480[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_590[iu](UNKNOWN): ((id_276[au](EXECUTING): state(EXECUTING)) == (id_495[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_467[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_601[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_592[iu](UNKNOWN): ((id_276[au](EXECUTING): state(EXECUTING)) == (id_498[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_594[iu](UNKNOWN): ((id_276[au](EXECUTING): state(EXECUTING)) == (id_501[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_613[au](0): ((id_611[au](0): allCommandHandleValues((id_602[au](UNKNOWN): string))) && (id_475[au](1): boolean))
   command_handle: (id_432[au](UNKNOWN):  command_handle)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 11
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][2:0:0] Transitioning node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 12
[PlexilExec:step][2:0:1] Transitioning node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 13
[PlexilExec:step][2:0:2] Transitioning node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 14
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:step][2:1] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][2:1:0] Transitioning node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:step][2:1:1] Transitioning node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:step][2:1:2] Transitioning node C3
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 15
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:step][2:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:2:0] Transitioning node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 16
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:step][2:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:3:0] Transitioning node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 17
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:step][2:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:4:0] Transitioning node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: (id_276[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_277[au](SUCCESS):  outcome)
  C1{
   State: (id_326[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_327[au](FAILURE):  outcome)
   Failure type: (id_328[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_329[au](COMMAND_DENIED):  command_handle)
   returnValue: (id_374[iu](-1): int)
   mem_priority: (id_375[au](5): int)
  }
  C2{
   State: (id_378[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_379[au](FAILURE):  outcome)
   Failure type: (id_380[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_381[au](COMMAND_DENIED):  command_handle)
   mem_priority2: (id_426[au](10): int)
  }
  C3{
   State: (id_429[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_430[au](SUCCESS):  outcome)
   Command handle: (id_432[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
  }
}

