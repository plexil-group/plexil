// xdrgen is a parser for the external data representation (XDR)
// language, a language for specifying network message data formats.
// XDR is most notably used to format Sun RPC calls.  See
// http://www.landfield.com/rfcs/rfc1014.html and man xdr(3) for more
// information.

// xdrgen outputs C or C++ header files which include
//   * structs corresponding to the message data formats in the
//     input XDR file, and
//   * IPC message formats appropriate for those structs
// The idea is to relieve you, the developer, from maintaining the
// struct definition and the IPC format separately.  Mismatches
// between the separate definitions lead to very strange and hard-to-track
// bugs.

// XDR is specified in RFC 1014.  xdrgen supports a subset of RFC 1014,
// and also some extensions, corresponding to IPC features not in XDR.

// RFC 1014 specifies both a language and a definition for the binary
// data format of messages.  xdrgen ignores the binary data format in
// the spec, and instead outputs C/C++ data structures which correspond
// naturally to the very C-like definitions in the XDR file.  It forms
// IPC message formats for those data structures according to the rules
// in the IPC documentation.  There should be no expectation of binary
// compatibility with implementations of RFC 1014.

// This file is an example XDR specification which explains various
// xdrgen features. In order to see how xdrgen works, you can try the
// following commands:
//    xdrgen example.xdr
//    xdrgen --lang=c example.xdr
// The --lang=c option suppresses C++ language features not supported in
// C.
//
// Copyright (c) 2008, Carnegie Mellon University
//     This software is distributed under the terms of the 
//     Simplified BSD License (see ipc/LICENSE.TXT)
//

/**********************************************************************
 * DECLARATION BASICS
 **********************************************************************/

// There are two ways to declare types so that xdrgen will create
// corresponding IPC formats.

// The first way is a typedef.  The declaration
typedef int foo;
// generates a macro in the header file:
//   #define foo_IPC_FORMAT "int"

// The second way is a struct.  The declaration
struct Zoo {
  int foo;
  int goo;
};
// generates different things depending on which language you've
// selected.  In C, you get a macro:
//   #define Zoo_IPC_FORMAT "{int,int}"
// and in C++, you get both the macro and a member function in the struct:
//   #define Zoo_IPC_FORMAT "{int,int}"
//   static const char *getIPCFormat(void) { return Zoo_IPC_FORMAT; }

// You can nest structs to arbitrary depths, and use previously defined
// types in declarations of new types:
struct MyIncludableStruct {
  int foo;
  struct { int a; } goo;
};

struct MyNestedStruct {
  MyIncludableStruct b;
  struct {
    char a;
    MyIncludableStruct b2;
  } roo;
};

%{
/* xdrgen extension to RFC 1014:

   You can put arbitrary code in curlies (as you see here) between
   XDR definitions, or inside a struct after all of the fields. */
%}

/**********************************************************************
 * PRIMITIVE TYPES
 **********************************************************************/

// The following struct contains fields with all the primitive types
// supported by xdrgen.
struct PrimitiveTypes {
  // Strings are special: they must be followed by a <> (the indicator
  // for a variable-length array).  More on this later.
  string a<>;
  // XDR as defined by RFC 1014 doesn't support 'char' or 'unsigned
  // char' types.  Instead, it uses the 'opaque' type, which must be
  // declared as an array (either fixed or variable-length).  in order
  // to be more in line with IPC, xdrgen supports:
  //   * char types 'char' and 'unsigned char'
  //   * char types need not be declared as arrays
  //   * 'opaque' is a synonym for 'unsigned char'
  unsigned char b;
  char c;
  unsigned int d;
  int e;
  // C++ bool variables take up 4 bytes.  The corresponding IPC format
  // will use an 'int'.  In both C and C++, xdrgen uses the 'bool' datatype
  // to represent bool.  It defines 'bool' in C automatically in the
  // following way:
  //   typedef enum { false = 0, true = 1 } bool;
  bool f;
  float g;
  double h;
  // NOTE: You can't declare multiple variables separated by commas,
  // so that the following would be illegal:
  //   int foo, goo;

%{
  /* xdrgen extension to RFC 1014:

     You can put arbitrary code in curlies at the end of a struct block.
     this is useful when you're generating C++ headers and you want to
     put constructors or other member functions in your structs. */
%}
};

/**********************************************************************
 * FIXED-LENGTH ARRAYS
 **********************************************************************/

// Fixed-length arrays are mapped directly to fixed-length arrays in C.

typedef unsigned char ImagePixel[3];

struct Transform {
  // xdrgen extension to RFC 1014:
  // Both fixed-length and variable-length arrays can be multi-dimensional.
  double mat[4][4];
};

/**********************************************************************
 * VARIABLE-LENGTH ARRAYS
 **********************************************************************/

// Variable-length arrays in IPC must be inside a struct, and the length
// in each dimension of the array must correspond to an int or unsigned
// int field of the struct.  In IPC, which fields of the struct are used
// for each dimension is controlled by the user.  xdrgen has stricter
// requirements.  If the variable-length array has n dimensions, the
// n fields of the struct preceding the array must have type 'int'
// or 'unsigned int'.  The dimensions of the array are stored in row-major
// order, and int fields of the struct correspond to dimensions in order.
//
// xdrgen is designed this way to make it clear where each dimension is
// coming from, and remove the need for extra language features to
// specify how int fields correspond to array dimensions.  Of course,
// this clarity comes at the cost of some flexibility.
struct Image {
  unsigned int rows;
  int cols;
  // This will show up in the C/C++ struct as
  //   unsigned char *data;
  // When IPC marshalls the Image data type, it will assume
  // the 'data' array has width*height elements.
  unsigned char data<><>;
};

// Here is an example where there are fields in the struct
// other than the dimensions and the variable-length array.
struct RANGE_SENSOR_DATA_TYPE { // comment
  string foo<>;
  int width;  //comment
  int height; // comment
  float ranges<><>; //comment
  float hfov; // comment
};

// The following variable-length array declaration is illegal because it's
// outside a struct:
//   typedef char CharVector<>;

// Fixed- and variable-length arrays cannot be mixed.  The following
// definition is illegal:
//   struct Alpha {
//     int size;
//     char beta[5]<>;
//   }
// In order to get the effect of mixing fixed- and variable-length
// arrays, you can nest structures, as in the following definition:
struct Alpha {
  int size;
  struct { char data[5]; } beta<>;
};

// XDR allows a maximum possible length to be declared for a
// variable-length array, as in the following definition:
struct Gamma {
  int delta;
  float epsilon<20>;
};
// However, there is no notion of a maximum length for a variable-length
// array in IPC, so xdrgen ignores the length.

/**********************************************************************
 * ENUMERATED TYPES
 **********************************************************************/

// You can declare enumerated types as in C.  xdrgen extends RFC 1014
// by making the value after an identifier optional rather than required.
// In the header output, the enum is output essentially verbatim.
// The IPC format is handled in one of two ways:
//   * If none of the enum identifiers have values specified, then
//     the IPC format will be of the form "{enum FOO,GOO,ZOO}".
//   * If any identifier has a value specified, the IPC format is "int".
//     This is because IPC has no way of handling negative enum
//     identifiers, or skipping or repeating values.
enum Color {
  RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, VIOLET
};

// This enum shows the ability to specify optional values.
enum Mixed {
  TWO = 2, FOUR = 4, FIVE, SIX, EIGHT = 8
};

// And here we show that you can include named and anonymous enums
// inside structs.
struct IncludesEnums {
  Color color;
  enum { FOO, GOO, ZOO } myEnum;
  Mixed mixed;
};

/**********************************************************************
 * MORE ABOUT STRINGS
 **********************************************************************/

// Strings are a special case.  A string is a null-terminated array of
// 'char'.  IPC doesn't need to have an integer dimension for the size
// of the array because it can detect the size from the null
// termination.  Therefore the last variable-length dimension of a
// string
//   * is required to be present (as specified in RFC 1014)
//   * is totally ignored in the IPC format generated by xdrgen
//   * does not need to appear in a struct with a corresponding int field
// Also, fixed- and variable-length arrays of strings are allowed, as in
// the following definition:
struct ExecCall {
  // Here, argc is used as the size of the argv array of strings.
  struct {
    int argc;
    string argv<><>;
  } args;
  // The last variable-length array dimension for a string is ignored,
  // so this is not a violation of the rule about mixing fixed- and
  // variable-length arrays.
  string envVars[20]<>;
};

/**********************************************************************
 * USING EXTERNAL FORMAT DEFINITIONS
 **********************************************************************/

// You can use external format definitions if the structs you define
// using XDR contain other datatypes which are not defined using XDR.
// This could happen if you want to manually define the IPC format for a
// datatype using an IPC feature not supported by xdrgen (for instance,
// an enumerated type).

%{

/* Here in a C code section we can define a struct and an "external" IPC
   format without giving an XDR specification.  We'll use the format
   later with an ipc_type directive.  Since arbitrary code sections like
   this can contain #include directives, the external format could be
   declared in a separate header file and. */
typedef struct {
  int foo, goo;
} ExternalStruct1;
#define ExternalStruct1_IPC_FORMAT "{int,int}"

typedef struct {
  char a;
  double b;
} ExternalStruct2;

%}

// This tells xdrgen that the struct ExternalStruct1 has an IPC format
// defined in the macro ExternalStruct1_IPC_FORMAT.  When subsequent
// structs which include ExternalStruct1 are declared, xdrgen will define
// their formats using the macro.
ipc_type ExternalStruct1;

// When we supply a value like this, xdrgen will plug the string in
// instead of trying to use a macro ExternalStruct2_IPC_FORMAT.
ipc_type ExternalStruct2 = "{char,double}";

// And here we use the datatypes with external formats.  Without the
// ipc_type declarations above, this declaration would cause xdrgen to
// issue warnings about undefined types.
struct IncludesExternalStruct {
  ExternalStruct1 s1;
  ExternalStruct2 s2;
};

/**********************************************************************
 * MISSING FEATURES
 **********************************************************************/

// Some XDR features not currently supported in xdrgen:
//   * union types
//   * const declarations.  For instance, XDR would allow
//     'const LINE_LENGTH = 50; typedef char lineBuf[LINE_LENGTH];'
//   * "Optional" data.  This is represented in XDR using enumerated
//     types.  The syntax involves putting a '*' before the name of
//     a field.  Recursive optional data structures can represent linked
//     lists, etc.  IPC has a similar feature, but we don't often use it.
