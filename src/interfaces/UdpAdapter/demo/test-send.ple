// -*- Mode: Java -*-
// File: plexil/src/interfaces/UdpAdapter/demo/test-send.ple

test-send:
{
    String arg1 = "CA";           // intentionally shorter than declared in udp.xml (for testing)
    //Boolean arg2 = false;       // set to "true" to request an "ack" from the other agent
    Integer arg3 = 3;             // -2147483649, 2147483648
    Real arg4 = 3.14159;          // 1.17e-38, 3.5e+38
    Integer arg5[3] = #(9 8 7);   // easy to read in the buffer when debugging
    Real arg6[3] = #(36.0 -104.7 25000.0); // test arrays
    Boolean arg7[3] = #(true true false);
    String arg8[3] = #("foo" "baz" "bar");
    Real run_start_time;

    Sequence:

    RecordStartTime:
    {
        Assignment: run_start_time = Lookup(time);
    }

    SendUdpCommand1:
    {
        Sequence:
        ReportParameters:
        {
            Command print ("\ntest-send: sending arg1==", arg1, ", arg2==false, arg3==", arg3, ", arg4==", arg4,
                           ", arg5==", arg5, ", arg6==", arg6, ", arg7==", arg7, ", arg8==", arg8, "\n\n");
        }
        SendCommand:
        {
            Command test_udp_msg (arg1, false, arg3, arg4, arg5, arg6, arg7, arg8); // Send the UDP message, no ack
        }
    }

    SendUdpCommand2:
    {
        StartCondition: LookupOnChange(time, 1) > run_start_time + 2;
        //StartCondition: LookupOnChange(time, 1) > SendUdpCommand1.FINISHED.END + 2; // why doesn't this work?
        Concurrence:
        ReportParameters:
        {
            Command print ("\ntest-send: sending arg1==", arg1, ", arg2==true, arg3==", arg3, ", arg4==", arg4,
                           ", arg5==", arg5, ", arg6==", arg6, ", arg7==", arg7, ", arg8==", arg8, "\n\n");
        }
        WaitForAck:
        {
            StartCondition: ReportParameters.state == FINISHED;
            OnCommand ack_msg (String ack)
            {
                Command print ("\ntest-send: received ack\n\n");
            }
        }
        SendCommand:
        {
            StartCondition: WaitForAck.state == EXECUTING;
            Command test_udp_msg (arg1, true, arg3, arg4, arg5, arg6, arg7, arg8); // Send the UDP message, ack requested
        }
    }

    SendQuitCommand:
    {
        StartCondition: SendUdpCommand2.state == FINISHED;
        Sequence:
        ReportSendQuit:
        {
            Command print ("\ntest-send: sending quit command\n\n");
        }
        SendQuit:
        {
            Command quit_msg ("quit");   // Send a Quit command
        }
    }
}

// EOF
