[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: (id_269[au](INACTIVE): state(INACTIVE)) (inf)
  C1{
   State: (id_309[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C2{
   State: (id_348[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C3{
   State: (id_386[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:step][1:3:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c1(20) into returnValue (id_344[au](-1): int) with ack anonymous (id_458[au](UNKNOWN): string)
[Test:testOutput]Permission to execute c2 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Executing c3() into noId with ack anonymous (id_542[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: (id_269[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_304[au](0): boolean)
 StartCondition: Boolean constant true (id_305[au](1): boolean)
 EndCondition: (id_425[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_305[au](1): boolean)
 PreCondition: Boolean constant true (id_305[au](1): boolean)
 PostCondition: Boolean constant true (id_305[au](1): boolean)
 RepeatCondition: Boolean constant false (id_304[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_305[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_304[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_305[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_422[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
 ParentWaitingCondition: Boolean constant false (id_304[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_304[au](0): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_305[au](1): boolean)
  C1{
   State: (id_309[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_304[au](0): boolean)
   StartCondition: Boolean constant true (id_305[au](1): boolean)
   EndCondition: (id_465[au](0): ((id_459[au](0): interruptibleCommandHandleValues(anonymous (id_458[au](UNKNOWN): string))) || (id_463[au](0): ((id_461[au](0): isknown(anonymous (id_458[au](UNKNOWN): string))) && (id_449[au](0): (IntegerValue (id_451[au](10): int) == returnValue (id_344[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_305[au](1): boolean)
   PreCondition: Boolean constant true (id_305[au](1): boolean)
   PostCondition: (id_452[au](UNKNOWN): (id_455[au](UNKNOWN): ((id_312[au](UNKNOWN):  command_handle) == (id_454[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_304[au](0): boolean)
   AncestorInvariantCondition: (id_432[au](1): (TransparentWrapper(id_428[auT]{1}(Boolean constant true (id_305[au](1): boolean)) && TransparentWrapper(id_430[auT]{1}(Boolean constant true (id_305[au](1): boolean)))
   AncestorEndCondition: (id_438[iu](UNKNOWN): (TransparentWrapper(id_434[iuT]{0}(Boolean constant false (id_304[au](0): boolean)) || TransparentWrapper(id_436[iuT]{0}((id_425[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_441[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_440[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_457[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_444[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_443[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_447[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_446[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_467[au](0): allCommandHandleValues(anonymous (id_458[au](UNKNOWN): string)))
   Command handle: (id_312[au](UNKNOWN):  command_handle)
   mem_priority: mem_priority (id_345[au](20): int)
   returnValue: returnValue (id_344[au](-1): int)
  }
  C2{
   State: (id_348[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_304[au](0): boolean)
   StartCondition: Boolean constant true (id_305[au](1): boolean)
   EndCondition: (id_511[au](1): ((id_505[au](1): interruptibleCommandHandleValues(anonymous (id_504[au](COMMAND_DENIED): string))) || (id_509[au](1): ((id_507[au](1): isknown(anonymous (id_504[au](COMMAND_DENIED): string))) && Boolean constant true (id_305[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_305[au](1): boolean)
   PreCondition: Boolean constant true (id_305[au](1): boolean)
   PostCondition: (id_493[au](UNKNOWN): (id_496[au](UNKNOWN): ((id_351[au](UNKNOWN):  command_handle) == (id_495[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_498[iu](UNKNOWN): (id_501[iu](UNKNOWN): ((id_351[au](UNKNOWN):  command_handle) == (id_500[iu](COMMAND_DENIED):  command_handle))))
   AncestorInvariantCondition: (id_479[au](1): (TransparentWrapper(id_475[auT]{1}(Boolean constant true (id_305[au](1): boolean)) && TransparentWrapper(id_477[auT]{1}(Boolean constant true (id_305[au](1): boolean)))
   AncestorEndCondition: (id_485[iu](UNKNOWN): (TransparentWrapper(id_481[iuT]{0}(Boolean constant false (id_304[au](0): boolean)) || TransparentWrapper(id_483[iuT]{0}((id_425[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_487[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_440[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_503[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_489[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_443[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_491[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_446[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_513[au](1): allCommandHandleValues(anonymous (id_504[au](COMMAND_DENIED): string)))
   Command handle: (id_351[au](UNKNOWN):  command_handle)
   v_priority2: v_priority2 (id_383[au](15): int)
  }
  C3{
   State: (id_386[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_304[au](0): boolean)
   StartCondition: Boolean constant true (id_305[au](1): boolean)
   EndCondition: (id_549[au](0): ((id_543[au](0): interruptibleCommandHandleValues(anonymous (id_542[au](UNKNOWN): string))) || (id_547[au](0): ((id_545[au](0): isknown(anonymous (id_542[au](UNKNOWN): string))) && Boolean constant true (id_305[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_305[au](1): boolean)
   PreCondition: Boolean constant true (id_305[au](1): boolean)
   PostCondition: (id_536[au](UNKNOWN): (id_539[au](UNKNOWN): ((id_389[au](UNKNOWN):  command_handle) == (id_538[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_304[au](0): boolean)
   AncestorInvariantCondition: (id_522[au](1): (TransparentWrapper(id_518[auT]{1}(Boolean constant true (id_305[au](1): boolean)) && TransparentWrapper(id_520[auT]{1}(Boolean constant true (id_305[au](1): boolean)))
   AncestorEndCondition: (id_528[iu](UNKNOWN): (TransparentWrapper(id_524[iuT]{0}(Boolean constant false (id_304[au](0): boolean)) || TransparentWrapper(id_526[iuT]{0}((id_425[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_530[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_440[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_541[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_532[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_443[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_534[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_446[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_551[au](0): allCommandHandleValues(anonymous (id_542[au](UNKNOWN): string)))
   Command handle: (id_389[au](UNKNOWN):  command_handle)
   v_priority: v_priority (id_421[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c1(20) = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 9
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:0] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 10
[PlexilExec:step][2:1] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 11
[PlexilExec:step][2:2] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:2:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[Test:testOutput]Permission to execute c2 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: (id_269[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_304[au](0): boolean)
 StartCondition: Boolean constant true (id_305[au](1): boolean)
 EndCondition: (id_425[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_305[au](1): boolean)
 PreCondition: Boolean constant true (id_305[au](1): boolean)
 PostCondition: Boolean constant true (id_305[au](1): boolean)
 RepeatCondition: Boolean constant false (id_304[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_305[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_304[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_305[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_422[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
 ParentWaitingCondition: Boolean constant false (id_304[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_304[au](0): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_305[au](1): boolean)
  C1{
   State: (id_309[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_304[au](0): boolean)
   StartCondition: Boolean constant true (id_305[au](1): boolean)
   EndCondition: (id_465[au](0): ((id_459[au](0): interruptibleCommandHandleValues(anonymous (id_458[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_463[au](0): ((id_461[au](1): isknown(anonymous (id_458[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_449[au](0): (IntegerValue (id_451[au](10): int) == returnValue (id_344[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_305[au](1): boolean)
   PreCondition: Boolean constant true (id_305[au](1): boolean)
   PostCondition: (id_452[au](1): (id_455[au](1): ((id_312[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_454[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_304[au](0): boolean)
   AncestorInvariantCondition: (id_432[au](1): (TransparentWrapper(id_428[auT]{1}(Boolean constant true (id_305[au](1): boolean)) && TransparentWrapper(id_430[auT]{1}(Boolean constant true (id_305[au](1): boolean)))
   AncestorEndCondition: (id_438[iu](UNKNOWN): (TransparentWrapper(id_434[iuT]{0}(Boolean constant false (id_304[au](0): boolean)) || TransparentWrapper(id_436[iuT]{0}((id_425[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_441[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_440[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_457[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_444[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_443[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_447[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_446[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_467[au](1): allCommandHandleValues(anonymous (id_458[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: (id_312[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority: mem_priority (id_345[au](20): int)
   returnValue: returnValue (id_344[au](-1): int)
  }
  C2{
   State: (id_348[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_304[au](0): boolean)
   StartCondition: Boolean constant true (id_305[au](1): boolean)
   EndCondition: (id_511[au](1): ((id_505[au](1): interruptibleCommandHandleValues(anonymous (id_504[au](COMMAND_DENIED): string))) || (id_509[au](1): ((id_507[au](1): isknown(anonymous (id_504[au](COMMAND_DENIED): string))) && Boolean constant true (id_305[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_305[au](1): boolean)
   PreCondition: Boolean constant true (id_305[au](1): boolean)
   PostCondition: (id_493[au](UNKNOWN): (id_496[au](UNKNOWN): ((id_351[au](UNKNOWN):  command_handle) == (id_495[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_498[iu](UNKNOWN): (id_501[iu](UNKNOWN): ((id_351[au](UNKNOWN):  command_handle) == (id_500[iu](COMMAND_DENIED):  command_handle))))
   AncestorInvariantCondition: (id_479[au](1): (TransparentWrapper(id_475[auT]{1}(Boolean constant true (id_305[au](1): boolean)) && TransparentWrapper(id_477[auT]{1}(Boolean constant true (id_305[au](1): boolean)))
   AncestorEndCondition: (id_485[iu](UNKNOWN): (TransparentWrapper(id_481[iuT]{0}(Boolean constant false (id_304[au](0): boolean)) || TransparentWrapper(id_483[iuT]{0}((id_425[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_487[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_440[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_503[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_489[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_443[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_491[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_446[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_513[au](1): allCommandHandleValues(anonymous (id_504[au](COMMAND_DENIED): string)))
   Command handle: (id_351[au](UNKNOWN):  command_handle)
   v_priority2: v_priority2 (id_383[au](15): int)
  }
  C3{
   State: (id_386[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_304[au](0): boolean)
   StartCondition: Boolean constant true (id_305[au](1): boolean)
   EndCondition: (id_549[au](0): ((id_543[au](0): interruptibleCommandHandleValues(anonymous (id_542[au](UNKNOWN): string))) || (id_547[au](0): ((id_545[au](0): isknown(anonymous (id_542[au](UNKNOWN): string))) && Boolean constant true (id_305[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_305[au](1): boolean)
   PreCondition: Boolean constant true (id_305[au](1): boolean)
   PostCondition: (id_536[au](UNKNOWN): (id_539[au](UNKNOWN): ((id_389[au](UNKNOWN):  command_handle) == (id_538[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_304[au](0): boolean)
   AncestorInvariantCondition: (id_522[au](1): (TransparentWrapper(id_518[auT]{1}(Boolean constant true (id_305[au](1): boolean)) && TransparentWrapper(id_520[auT]{1}(Boolean constant true (id_305[au](1): boolean)))
   AncestorEndCondition: (id_528[iu](UNKNOWN): (TransparentWrapper(id_524[iuT]{0}(Boolean constant false (id_304[au](0): boolean)) || TransparentWrapper(id_526[iuT]{0}((id_425[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_530[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_440[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_541[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_532[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_443[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_534[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_446[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_551[au](0): allCommandHandleValues(anonymous (id_542[au](UNKNOWN): string)))
   Command handle: (id_389[au](UNKNOWN):  command_handle)
   v_priority: v_priority (id_421[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 12
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 13
[PlexilExec:step][3:0] State change queue: C2 C3 
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][3:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][3:0:1] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 14
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 15
[PlexilExec:step][3:1] State change queue: C2 C3 
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][3:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][3:1:1] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 16
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:step][3:2] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][3:2:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c2() into noId with ack anonymous (id_504[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: (id_269[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_304[au](0): boolean)
 StartCondition: Boolean constant true (id_305[au](1): boolean)
 EndCondition: (id_425[au](0): childrenFinished(1:3))
 InvariantCondition: Boolean constant true (id_305[au](1): boolean)
 PreCondition: Boolean constant true (id_305[au](1): boolean)
 PostCondition: Boolean constant true (id_305[au](1): boolean)
 RepeatCondition: Boolean constant false (id_304[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_305[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_304[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_305[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_422[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
 ParentWaitingCondition: Boolean constant false (id_304[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_304[au](0): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_305[au](1): boolean)
  C1{
   State: (id_309[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_304[au](0): boolean)
   StartCondition: Boolean constant true (id_305[au](1): boolean)
   EndCondition: (id_465[au](0): ((id_459[au](0): interruptibleCommandHandleValues(anonymous (id_458[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_463[au](0): ((id_461[au](1): isknown(anonymous (id_458[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_449[au](0): (IntegerValue (id_451[au](10): int) == returnValue (id_344[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_305[au](1): boolean)
   PreCondition: Boolean constant true (id_305[au](1): boolean)
   PostCondition: (id_452[au](1): (id_455[au](1): ((id_312[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_454[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_304[au](0): boolean)
   AncestorInvariantCondition: (id_432[au](1): (TransparentWrapper(id_428[auT]{1}(Boolean constant true (id_305[au](1): boolean)) && TransparentWrapper(id_430[auT]{1}(Boolean constant true (id_305[au](1): boolean)))
   AncestorEndCondition: (id_438[iu](UNKNOWN): (TransparentWrapper(id_434[iuT]{0}(Boolean constant false (id_304[au](0): boolean)) || TransparentWrapper(id_436[iuT]{0}((id_425[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_441[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_440[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_457[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_444[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_443[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_447[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_446[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_467[au](1): allCommandHandleValues(anonymous (id_458[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: (id_312[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority: mem_priority (id_345[au](20): int)
   returnValue: returnValue (id_344[au](-1): int)
  }
  C2{
   State: (id_348[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_304[au](0): boolean)
   StartCondition: Boolean constant true (id_305[au](1): boolean)
   EndCondition: (id_511[au](0): ((id_505[au](0): interruptibleCommandHandleValues(anonymous (id_504[au](UNKNOWN): string))) || (id_509[au](0): ((id_507[au](0): isknown(anonymous (id_504[au](UNKNOWN): string))) && Boolean constant true (id_305[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_305[au](1): boolean)
   PreCondition: Boolean constant true (id_305[au](1): boolean)
   PostCondition: (id_493[au](UNKNOWN): (id_496[au](UNKNOWN): ((id_351[au](UNKNOWN):  command_handle) == (id_495[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_498[iu](UNKNOWN): (id_501[iu](UNKNOWN): ((id_351[au](UNKNOWN):  command_handle) == (id_500[iu](COMMAND_DENIED):  command_handle))))
   AncestorInvariantCondition: (id_479[au](1): (TransparentWrapper(id_475[auT]{1}(Boolean constant true (id_305[au](1): boolean)) && TransparentWrapper(id_477[auT]{1}(Boolean constant true (id_305[au](1): boolean)))
   AncestorEndCondition: (id_485[iu](UNKNOWN): (TransparentWrapper(id_481[iuT]{0}(Boolean constant false (id_304[au](0): boolean)) || TransparentWrapper(id_483[iuT]{0}((id_425[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_487[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_440[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_503[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_489[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_443[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_491[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_446[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_513[au](0): allCommandHandleValues(anonymous (id_504[au](UNKNOWN): string)))
   Command handle: (id_351[au](UNKNOWN):  command_handle)
   v_priority2: v_priority2 (id_383[au](15): int)
  }
  C3{
   State: (id_386[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_387[au](SUCCESS):  outcome)
   Command handle: (id_389[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   v_priority: v_priority (id_421[au](10): int)
  }
}

[Test:testOutput]Sending command result c1(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 17
[PlexilExec:step][4:0] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][4:0:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 18
[PlexilExec:step][4:1] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][4:1:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: (id_269[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_304[au](0): boolean)
 StartCondition: Boolean constant true (id_305[au](1): boolean)
 EndCondition: (id_425[au](0): childrenFinished(2:3))
 InvariantCondition: Boolean constant true (id_305[au](1): boolean)
 PreCondition: Boolean constant true (id_305[au](1): boolean)
 PostCondition: Boolean constant true (id_305[au](1): boolean)
 RepeatCondition: Boolean constant false (id_304[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_305[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_304[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_305[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_422[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
 ParentWaitingCondition: Boolean constant false (id_304[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_304[au](0): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_305[au](1): boolean)
  C1{
   State: (id_309[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_310[au](SUCCESS):  outcome)
   Command handle: (id_312[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority: mem_priority (id_345[au](20): int)
   returnValue: returnValue (id_344[iu](10): int)
  }
  C2{
   State: (id_348[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_304[au](0): boolean)
   StartCondition: Boolean constant true (id_305[au](1): boolean)
   EndCondition: (id_511[au](0): ((id_505[au](0): interruptibleCommandHandleValues(anonymous (id_504[au](UNKNOWN): string))) || (id_509[au](0): ((id_507[au](0): isknown(anonymous (id_504[au](UNKNOWN): string))) && Boolean constant true (id_305[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_305[au](1): boolean)
   PreCondition: Boolean constant true (id_305[au](1): boolean)
   PostCondition: (id_493[au](UNKNOWN): (id_496[au](UNKNOWN): ((id_351[au](UNKNOWN):  command_handle) == (id_495[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_498[iu](UNKNOWN): (id_501[iu](UNKNOWN): ((id_351[au](UNKNOWN):  command_handle) == (id_500[iu](COMMAND_DENIED):  command_handle))))
   AncestorInvariantCondition: (id_479[au](1): (TransparentWrapper(id_475[auT]{1}(Boolean constant true (id_305[au](1): boolean)) && TransparentWrapper(id_477[auT]{1}(Boolean constant true (id_305[au](1): boolean)))
   AncestorEndCondition: (id_485[iu](UNKNOWN): (TransparentWrapper(id_481[iuT]{0}(Boolean constant false (id_304[au](0): boolean)) || TransparentWrapper(id_483[iuT]{0}((id_425[au](0): childrenFinished(2:3))))
   ParentExecutingCondition: (id_487[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_440[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_306[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_503[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_489[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_443[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_491[iu](UNKNOWN): ((id_269[au](EXECUTING): state(EXECUTING)) == (id_446[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_513[au](0): allCommandHandleValues(anonymous (id_504[au](UNKNOWN): string)))
   Command handle: (id_351[au](UNKNOWN):  command_handle)
   v_priority2: v_priority2 (id_383[au](15): int)
  }
  C3{
   State: (id_386[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_387[au](SUCCESS):  outcome)
   Command handle: (id_389[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   v_priority: v_priority (id_421[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c2() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 19
[PlexilExec:step][5:0] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][5:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 20
[PlexilExec:step][5:1] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][5:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 21
[PlexilExec:step][5:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][5:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 22
[PlexilExec:step][5:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][5:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 23
[PlexilExec:step][5:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][5:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
SimpleTask{
 State: (id_269[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_270[au](SUCCESS):  outcome)
  C1{
   State: (id_309[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_310[au](SUCCESS):  outcome)
   Command handle: (id_312[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority: mem_priority (id_345[au](20): int)
   returnValue: returnValue (id_344[iu](10): int)
  }
  C2{
   State: (id_348[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_349[au](SUCCESS):  outcome)
   Command handle: (id_351[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   v_priority2: v_priority2 (id_383[au](15): int)
  }
  C3{
   State: (id_386[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_387[au](SUCCESS):  outcome)
   Command handle: (id_389[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   v_priority: v_priority (id_421[au](10): int)
  }
}

