[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: (id_263[au](INACTIVE): state(INACTIVE)) (inf)
  C1{
   State: (id_315[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C2{
   State: (id_369[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C3{
   State: (id_422[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:step][1:3:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[Test:testOutput]Permission to execute c1 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Executing c2() into noId with ack (id_551[au](UNKNOWN): string)
[Test:testOutput]Permission to execute c3 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: (id_263[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_283[au](0): boolean)
 StartCondition: (id_285[au](1): boolean)
 EndCondition: (id_475[au](0): childrenFinished(0:3))
 InvariantCondition: (id_289[au](1): boolean)
 PreCondition: (id_291[au](1): boolean)
 PostCondition: (id_293[au](1): boolean)
 RepeatCondition: (id_295[au](0): boolean)
 AncestorInvariantCondition: (id_297[au](1): boolean)
 AncestorEndCondition: (id_299[au](0): boolean)
 ParentExecutingCondition: (id_301[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_472[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_305[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_307[au](0): boolean)
 ParentFinishedCondition: (id_309[au](0): boolean)
 CommandHandleReceivedCondition: (id_311[au](1): boolean)
 command_handle: (id_266[au](UNKNOWN):  command_handle)
  C1{
   State: (id_315[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_335[au](0): boolean)
   StartCondition: (id_337[au](1): boolean)
   EndCondition: (id_515[au](1): ((id_511[au](1): interruptibleCommandHandleValues((id_508[au](COMMAND_DENIED): string))) || (id_513[au](0): ((id_509[au](1): isknown((id_508[au](COMMAND_DENIED): string))) && (id_499[au](0): ((id_501[au](10): int) == (id_365[au](-1): int)))))
   InvariantCondition: (id_341[au](1): boolean)
   PreCondition: (id_343[au](1): boolean)
   PostCondition: (id_502[au](UNKNOWN): (id_505[au](UNKNOWN): ((id_318[au](UNKNOWN):  command_handle) == (id_504[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_347[au](0): boolean)
   AncestorInvariantCondition: (id_482[au](1): (TransparentWrapper(id_478[auT]{1}((id_297[au](1): boolean)) && TransparentWrapper(id_480[auT]{1}((id_289[au](1): boolean)))
   AncestorEndCondition: (id_488[iu](UNKNOWN): (TransparentWrapper(id_484[iuT]{0}((id_299[au](0): boolean)) || TransparentWrapper(id_486[iuT]{0}((id_475[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_491[iu](UNKNOWN): ((id_263[au](EXECUTING): state(EXECUTING)) == (id_490[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_355[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_507[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_494[iu](UNKNOWN): ((id_263[au](EXECUTING): state(EXECUTING)) == (id_493[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_497[iu](UNKNOWN): ((id_263[au](EXECUTING): state(EXECUTING)) == (id_496[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_519[au](1): ((id_517[au](1): allCommandHandleValues((id_508[au](COMMAND_DENIED): string))) && (id_363[au](1): boolean))
   command_handle: (id_318[au](UNKNOWN):  command_handle)
   returnValue: (id_365[au](-1): int)
   mem_priority: (id_366[au](10): int)
  }
  C2{
   State: (id_369[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_389[au](0): boolean)
   StartCondition: (id_391[au](1): boolean)
   EndCondition: (id_558[au](0): ((id_554[au](0): interruptibleCommandHandleValues((id_551[au](UNKNOWN): string))) || (id_556[au](0): ((id_552[au](0): isknown((id_551[au](UNKNOWN): string))) && (id_393[au](1): boolean)))
   InvariantCondition: (id_395[au](1): boolean)
   PreCondition: (id_397[au](1): boolean)
   PostCondition: (id_545[au](UNKNOWN): (id_548[au](UNKNOWN): ((id_372[au](UNKNOWN):  command_handle) == (id_547[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_401[au](0): boolean)
   AncestorInvariantCondition: (id_531[au](1): (TransparentWrapper(id_527[auT]{1}((id_297[au](1): boolean)) && TransparentWrapper(id_529[auT]{1}((id_289[au](1): boolean)))
   AncestorEndCondition: (id_537[iu](UNKNOWN): (TransparentWrapper(id_533[iuT]{0}((id_299[au](0): boolean)) || TransparentWrapper(id_535[iuT]{0}((id_475[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_539[iu](UNKNOWN): ((id_263[au](EXECUTING): state(EXECUTING)) == (id_490[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_409[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_550[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_541[iu](UNKNOWN): ((id_263[au](EXECUTING): state(EXECUTING)) == (id_493[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_543[iu](UNKNOWN): ((id_263[au](EXECUTING): state(EXECUTING)) == (id_496[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_562[au](0): ((id_560[au](0): allCommandHandleValues((id_551[au](UNKNOWN): string))) && (id_417[au](1): boolean))
   command_handle: (id_372[au](UNKNOWN):  command_handle)
   mem_priority2: (id_419[au](20): int)
  }
  C3{
   State: (id_422[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_442[au](0): boolean)
   StartCondition: (id_444[au](1): boolean)
   EndCondition: (id_600[au](1): ((id_596[au](1): interruptibleCommandHandleValues((id_593[au](COMMAND_DENIED): string))) || (id_598[au](1): ((id_594[au](1): isknown((id_593[au](COMMAND_DENIED): string))) && (id_446[au](1): boolean)))
   InvariantCondition: (id_448[au](1): boolean)
   PreCondition: (id_450[au](1): boolean)
   PostCondition: (id_587[au](UNKNOWN): (id_590[au](UNKNOWN): ((id_425[au](UNKNOWN):  command_handle) == (id_589[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_454[au](0): boolean)
   AncestorInvariantCondition: (id_573[au](1): (TransparentWrapper(id_569[auT]{1}((id_297[au](1): boolean)) && TransparentWrapper(id_571[auT]{1}((id_289[au](1): boolean)))
   AncestorEndCondition: (id_579[iu](UNKNOWN): (TransparentWrapper(id_575[iuT]{0}((id_299[au](0): boolean)) || TransparentWrapper(id_577[iuT]{0}((id_475[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_581[iu](UNKNOWN): ((id_263[au](EXECUTING): state(EXECUTING)) == (id_490[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_462[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_592[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_583[iu](UNKNOWN): ((id_263[au](EXECUTING): state(EXECUTING)) == (id_493[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_585[iu](UNKNOWN): ((id_263[au](EXECUTING): state(EXECUTING)) == (id_496[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_604[au](1): ((id_602[au](1): allCommandHandleValues((id_593[au](COMMAND_DENIED): string))) && (id_470[au](1): boolean))
   command_handle: (id_425[au](UNKNOWN):  command_handle)
  }
}

[Test:testOutput]Sending command ACK c2() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 9
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 10
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 11
[PlexilExec:step][2:0] State change queue: C1 C3 C2 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C3
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:0:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:0:1] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:step][2:0:2] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 12
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 13
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 14
[PlexilExec:step][2:1] State change queue: C1 C3 C2 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C3
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:1:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:1:1] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:step][2:1:2] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 15
[PlexilExec:step][2:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 16
[PlexilExec:step][2:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 17
[PlexilExec:step][2:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: (id_263[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_264[au](SUCCESS):  outcome)
  C1{
   State: (id_315[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_316[au](FAILURE):  outcome)
   Failure type: (id_317[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_318[au](COMMAND_DENIED):  command_handle)
   returnValue: (id_365[iu](-1): int)
   mem_priority: (id_366[au](10): int)
  }
  C2{
   State: (id_369[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_370[au](SUCCESS):  outcome)
   Command handle: (id_372[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority2: (id_419[au](20): int)
  }
  C3{
   State: (id_422[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_423[au](FAILURE):  outcome)
   Failure type: (id_424[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_425[au](COMMAND_DENIED):  command_handle)
  }
}

