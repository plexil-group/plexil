[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: SimpleTask (id_63[au](INACTIVE): state) (inf)
  C1{
   State: C1 (id_124[au](INACTIVE): state) (inf)
  }
  C2{
   State: C2 (id_199[au](INACTIVE): state) (inf)
  }
  C3{
   State: C3 (id_266[au](INACTIVE): state) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:step][1:3:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[Test:testOutput]Permission to execute c1 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Executing c2() into noId with ack C2 ack (id_260[au](UNKNOWN): string)
[Test:testOutput]Permission to execute c3 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_63[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_116[au](0): boolean)
 StartCondition: Boolean constant true (id_118[au](1): boolean)
 EndCondition: (id_332[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_118[au](1): boolean)
 PreCondition: Boolean constant true (id_118[au](1): boolean)
 PostCondition: Boolean constant true (id_118[au](1): boolean)
 RepeatCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_116[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_118[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_116[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_116[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_329[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: Boolean constant unknown (id_120[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_118[au](1): boolean)
  C1{
   State: C1 (id_124[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_367[au](1): ((id_361[au](1): interruptibleCommandHandleValues(C1 ack (id_193[au](COMMAND_DENIED): string))) || (id_365[au](0): ((id_363[au](1): isknown(C1 ack (id_193[au](COMMAND_DENIED): string))) && (id_351[au](0): (IntegerValue (id_353[au](10): int) == returnValue (id_189[au](-1): int)))))))
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_355[au](UNKNOWN): (id_359[au](UNKNOWN): (C1 (id_195[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_357[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: (id_339[au](1): (TransparentWrapper(id_335[auT]{1}(Boolean constant true (id_118[au](1): boolean))) && TransparentWrapper(id_337[auT]{1}(Boolean constant true (id_118[au](1): boolean)))))
   AncestorEndCondition: (id_345[iu](UNKNOWN): (TransparentWrapper(id_341[iuT]{0}(Boolean constant false (id_116[au](0): boolean))) || TransparentWrapper(id_343[iuT]{0}((id_332[au](0): childrenFinished(0:3))))))
   ParentExecutingCondition: (id_179[iu](UNKNOWN): (SimpleTask (id_63[au](EXECUTING): state) == anonymous (id_177[au](EXECUTING): state)))
   ParentWaitingCondition: (id_183[iu](UNKNOWN): (SimpleTask (id_63[au](EXECUTING): state) == anonymous (id_181[au](WAITING): state)))
   ParentFinishedCondition: (id_187[iu](UNKNOWN): (SimpleTask (id_63[au](EXECUTING): state) == anonymous (id_185[au](FINISHED): state)))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_120[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_347[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_349[au](1): allCommandHandleValues(C1 ack (id_193[au](COMMAND_DENIED): string)))
   Command handle: C1 (id_195[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_191[au](10): int)
   returnValue: returnValue (id_189[au](-1): int)
  }
  C2{
   State: C2 (id_199[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_408[au](0): ((id_402[au](0): interruptibleCommandHandleValues(C2 ack (id_260[au](UNKNOWN): string))) || (id_406[au](0): ((id_404[au](0): isknown(C2 ack (id_260[au](UNKNOWN): string))) && Boolean constant true (id_118[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_396[au](UNKNOWN): (id_400[au](UNKNOWN): (C2 (id_262[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_398[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: (id_384[au](1): (TransparentWrapper(id_380[auT]{1}(Boolean constant true (id_118[au](1): boolean))) && TransparentWrapper(id_382[auT]{1}(Boolean constant true (id_118[au](1): boolean)))))
   AncestorEndCondition: (id_390[iu](UNKNOWN): (TransparentWrapper(id_386[iuT]{0}(Boolean constant false (id_116[au](0): boolean))) || TransparentWrapper(id_388[iuT]{0}((id_332[au](0): childrenFinished(0:3))))))
   ParentExecutingCondition: (id_252[iu](UNKNOWN): (SimpleTask (id_63[au](EXECUTING): state) == anonymous (id_177[au](EXECUTING): state)))
   ParentWaitingCondition: (id_254[iu](UNKNOWN): (SimpleTask (id_63[au](EXECUTING): state) == anonymous (id_181[au](WAITING): state)))
   ParentFinishedCondition: (id_256[iu](UNKNOWN): (SimpleTask (id_63[au](EXECUTING): state) == anonymous (id_185[au](FINISHED): state)))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_120[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_392[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_394[au](0): allCommandHandleValues(C2 ack (id_260[au](UNKNOWN): string)))
   Command handle: C2 (id_262[au](UNKNOWN): command_handle)
   mem_priority2: mem_priority2 (id_258[au](20): int)
  }
  C3{
   State: C3 (id_266[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_447[au](1): ((id_441[au](1): interruptibleCommandHandleValues(C3 ack (id_325[au](COMMAND_DENIED): string))) || (id_445[au](1): ((id_443[au](1): isknown(C3 ack (id_325[au](COMMAND_DENIED): string))) && Boolean constant true (id_118[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_435[au](UNKNOWN): (id_439[au](UNKNOWN): (C3 (id_327[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_437[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: (id_423[au](1): (TransparentWrapper(id_419[auT]{1}(Boolean constant true (id_118[au](1): boolean))) && TransparentWrapper(id_421[auT]{1}(Boolean constant true (id_118[au](1): boolean)))))
   AncestorEndCondition: (id_429[iu](UNKNOWN): (TransparentWrapper(id_425[iuT]{0}(Boolean constant false (id_116[au](0): boolean))) || TransparentWrapper(id_427[iuT]{0}((id_332[au](0): childrenFinished(0:3))))))
   ParentExecutingCondition: (id_319[iu](UNKNOWN): (SimpleTask (id_63[au](EXECUTING): state) == anonymous (id_177[au](EXECUTING): state)))
   ParentWaitingCondition: (id_321[iu](UNKNOWN): (SimpleTask (id_63[au](EXECUTING): state) == anonymous (id_181[au](WAITING): state)))
   ParentFinishedCondition: (id_323[iu](UNKNOWN): (SimpleTask (id_63[au](EXECUTING): state) == anonymous (id_185[au](FINISHED): state)))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_120[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_431[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_433[au](1): allCommandHandleValues(C3 ack (id_325[au](COMMAND_DENIED): string)))
   Command handle: C3 (id_327[au](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Sending command ACK c2() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 9
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 10
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 11
[PlexilExec:step][2:0] State change queue: C1 C3 C2 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C3
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:0:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:0:1] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:step][2:0:2] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 12
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 13
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 14
[PlexilExec:step][2:1] State change queue: C1 C3 C2 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C3
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:1:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:1:1] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:step][2:1:2] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 15
[PlexilExec:step][2:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 16
[PlexilExec:step][2:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 17
[PlexilExec:step][2:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_63[au](FINISHED): state) (0)
 Outcome: SimpleTask (id_65[au](SUCCESS): outcome)
  C1{
   State: C1 (id_124[au](FINISHED): state) (0)
   Outcome: C1 (id_126[au](FAILURE): outcome)
   Failure type: C1 (id_128[au](POST_CONDITION_FAILED): failure)
   Command handle: C1 (id_195[au](COMMAND_DENIED): command_handle)
   mem_priority: mem_priority (id_191[au](10): int)
   returnValue: returnValue (id_189[iu](-1): int)
  }
  C2{
   State: C2 (id_199[au](FINISHED): state) (0)
   Outcome: C2 (id_201[au](SUCCESS): outcome)
   Command handle: C2 (id_262[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   mem_priority2: mem_priority2 (id_258[au](20): int)
  }
  C3{
   State: C3 (id_266[au](FINISHED): state) (0)
   Outcome: C3 (id_268[au](FAILURE): outcome)
   Failure type: C3 (id_270[au](POST_CONDITION_FAILED): failure)
   Command handle: C3 (id_327[au](COMMAND_DENIED): command_handle)
  }
}

