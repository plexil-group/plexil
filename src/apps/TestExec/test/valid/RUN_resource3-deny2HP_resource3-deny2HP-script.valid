[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: SimpleTask (id_65[au](INACTIVE): state) (inf)
  C1{
   State: C1 (id_104[au](INACTIVE): state) (inf)
  }
  C2{
   State: C2 (id_143[au](INACTIVE): state) (inf)
  }
  C3{
   State: C3 (id_180[au](INACTIVE): state) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask from WAITING to EXECUTING
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:2:0] Transitioning node C1 from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2 from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3 from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:3:0] Transitioning node C1 from WAITING to EXECUTING
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C2 from WAITING to EXECUTING
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:3:2] Transitioning node C3 from WAITING to EXECUTING
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[Test:testOutput]Permission to execute c1 has been denied by the resource arbiter.
[Test:testOutput]Permission to execute c2 has been denied by the resource arbiter.
[Test:testOutput]Executing c3() into noId with ack C3 command_handle (id_308[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_65[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_99[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_99[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_101[au](1): boolean)
 SkipCondition: Boolean constant false (id_99[au](0): boolean)
 StartCondition: Boolean constant true (id_101[au](1): boolean)
 EndCondition: (id_221[au](0): childrenFinished(0:3))
 ExitCondition: Boolean constant false (id_99[au](0): boolean)
 InvariantCondition: Boolean constant true (id_101[au](1): boolean)
 PreCondition: Boolean constant true (id_101[au](1): boolean)
 PostCondition: Boolean constant true (id_101[au](1): boolean)
 RepeatCondition: Boolean constant false (id_99[au](0): boolean)
 ActionCompleteCondition: (id_214[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_104[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_221[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_99[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_101[au](1): boolean)
   SkipCondition: Boolean constant false (id_99[au](0): boolean)
   StartCondition: Boolean constant true (id_101[au](1): boolean)
   EndCondition: (id_264[au](1): ((id_262[au](1): interruptibleCommandHandleValues(C1 command_handle (id_239[au](COMMAND_DENIED): command_handle))) || (id_251[au](0): (IntegerValue (id_253[au](10): int) == returnValue (id_138[au](-1): int)))))
   ExitCondition: Boolean constant false (id_99[au](0): boolean)
   InvariantCondition: Boolean constant true (id_101[au](1): boolean)
   PreCondition: Boolean constant true (id_101[au](1): boolean)
   PostCondition: (id_256[iu](UNKNOWN): (id_260[iu](UNKNOWN): (C1 command_handle (id_239[au](COMMAND_DENIED): command_handle) == NodeCommandHandleValue (id_258[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_99[au](0): boolean)
   ActionCompleteCondition: (id_243[iu](UNKNOWN): isknown(C1 command_handle (id_239[au](COMMAND_DENIED): command_handle)))
   AbortCompleteCondition: C1 abortComplete (id_241[au](UNKNOWN): boolean)
   Command handle: C1 command_handle (id_239[au](COMMAND_DENIED): command_handle)
   mem_priority: mem_priority (id_140[au](5): int)
   returnValue: returnValue (id_138[au](-1): int)
  }
  C2{
   State: C2 (id_143[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_221[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_99[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_101[au](1): boolean)
   SkipCondition: Boolean constant false (id_99[au](0): boolean)
   StartCondition: Boolean constant true (id_101[au](1): boolean)
   EndCondition: Boolean constant true (id_101[au](1): boolean)
   ExitCondition: Boolean constant false (id_99[au](0): boolean)
   InvariantCondition: Boolean constant true (id_101[au](1): boolean)
   PreCondition: Boolean constant true (id_101[au](1): boolean)
   PostCondition: (id_295[iu](UNKNOWN): (id_299[iu](UNKNOWN): (C2 command_handle (id_283[au](COMMAND_DENIED): command_handle) == NodeCommandHandleValue (id_297[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_99[au](0): boolean)
   ActionCompleteCondition: (id_287[iu](UNKNOWN): isknown(C2 command_handle (id_283[au](COMMAND_DENIED): command_handle)))
   AbortCompleteCondition: C2 abortComplete (id_285[au](UNKNOWN): boolean)
   Command handle: C2 command_handle (id_283[au](COMMAND_DENIED): command_handle)
   mem_priority2: mem_priority2 (id_177[au](10): int)
  }
  C3{
   State: C3 (id_180[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_221[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_99[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_101[au](1): boolean)
   SkipCondition: Boolean constant false (id_99[au](0): boolean)
   StartCondition: Boolean constant true (id_101[au](1): boolean)
   EndCondition: Boolean constant true (id_101[au](1): boolean)
   ExitCondition: Boolean constant false (id_99[au](0): boolean)
   InvariantCondition: Boolean constant true (id_101[au](1): boolean)
   PreCondition: Boolean constant true (id_101[au](1): boolean)
   PostCondition: (id_320[iu](UNKNOWN): (id_324[iu](UNKNOWN): (C3 command_handle (id_308[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_322[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_99[au](0): boolean)
   ActionCompleteCondition: (id_312[iu](UNKNOWN): isknown(C3 command_handle (id_308[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C3 abortComplete (id_310[au](UNKNOWN): boolean)
   Command handle: C3 command_handle (id_308[au](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SENT_TO_SYSTEM
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 9
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 10
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 11
[PlexilExec:step][2:0] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][2:0:0] Transitioning node C1 from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:0:1] Transitioning node C2 from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][2:0:2] Transitioning node C3 from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 12
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 13
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 14
[PlexilExec:step][2:1] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][2:1:0] Transitioning node C1 from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:1:1] Transitioning node C2 from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][2:1:2] Transitioning node C3 from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 15
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 16
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 17
[PlexilExec:step][2:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][2:2:0] Transitioning node C1 from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:2:1] Transitioning node C2 from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][2:2:2] Transitioning node C3 from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 18
[PlexilExec:step][2:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:3:0] Transitioning node SimpleTask from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 19
[PlexilExec:step][2:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:4:0] Transitioning node SimpleTask from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 20
[PlexilExec:step][2:5] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][2:5:0] Transitioning node SimpleTask from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_65[au](FINISHED): state) (0)
 Outcome: SimpleTask (id_67[au](SUCCESS): outcome)
  C1{
   State: C1 (id_104[au](FINISHED): state) (0)
   Outcome: C1 (id_106[au](FAILURE): outcome)
   Failure type: C1 (id_108[au](POST_CONDITION_FAILED): failure)
   Command handle: C1 command_handle (id_239[iu](COMMAND_DENIED): command_handle)
   mem_priority: mem_priority (id_140[au](5): int)
   returnValue: returnValue (id_138[iu](-1): int)
  }
  C2{
   State: C2 (id_143[au](FINISHED): state) (0)
   Outcome: C2 (id_145[au](FAILURE): outcome)
   Failure type: C2 (id_147[au](POST_CONDITION_FAILED): failure)
   Command handle: C2 command_handle (id_283[iu](COMMAND_DENIED): command_handle)
   mem_priority2: mem_priority2 (id_177[au](10): int)
  }
  C3{
   State: C3 (id_180[au](FINISHED): state) (0)
   Outcome: C3 (id_182[au](SUCCESS): outcome)
   Command handle: C3 command_handle (id_308[iu](COMMAND_SENT_TO_SYSTEM): command_handle)
  }
}

