[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleDrive{
 State: (id_218[au](INACTIVE): state(INACTIVE)) (inf)
  Drive{
   State: (id_258[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleDrive 
[PlexilExec:lock]Locking node SimpleDrive
[PlexilExec:step][1:0:0] Transitioning node SimpleDrive
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleDrive 
[PlexilExec:lock]Locking node SimpleDrive
[PlexilExec:step][1:1:0] Transitioning node SimpleDrive
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleDrive' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node SimpleDrive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleDrive' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: Drive 
[PlexilExec:lock]Locking node Drive
[PlexilExec:step][1:2:0] Transitioning node Drive
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:unlock]Unlocking node Drive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 4
[PlexilExec:step][1:3] State change queue: Drive 
[PlexilExec:lock]Locking node Drive
[PlexilExec:step][1:3:0] Transitioning node Drive
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:handleNeedsExecution]Storing action for node 'Drive' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node Drive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Drive' was previously eligible to transition but isn't now.
[Test:testOutput]Executing drive() into noId with ack anonymous (id_321[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleDrive{
 State: (id_218[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_253[au](0): boolean)
 StartCondition: Boolean constant true (id_254[au](1): boolean)
 EndCondition: (id_296[au](0): childrenFinished(0:1))
 InvariantCondition: Boolean constant true (id_254[au](1): boolean)
 PreCondition: Boolean constant true (id_254[au](1): boolean)
 PostCondition: Boolean constant true (id_254[au](1): boolean)
 RepeatCondition: Boolean constant false (id_253[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_254[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_253[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_254[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_293[iu](UNKNOWN): childrenWaitingOrFinished(0:1))
 AbortCompleteCondition: Boolean constant unknown (id_255[au](UNKNOWN): boolean)
 ParentWaitingCondition: Boolean constant false (id_253[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_253[au](0): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_254[au](1): boolean)
  Drive{
   State: (id_258[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_253[au](0): boolean)
   StartCondition: Boolean constant true (id_254[au](1): boolean)
   EndCondition: (id_328[au](0): ((id_322[au](0): interruptibleCommandHandleValues(anonymous (id_321[au](UNKNOWN): string))) || (id_326[au](0): ((id_324[au](0): isknown(anonymous (id_321[au](UNKNOWN): string))) && Boolean constant true (id_254[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_254[au](1): boolean)
   PreCondition: Boolean constant true (id_254[au](1): boolean)
   PostCondition: Boolean constant true (id_254[au](1): boolean)
   RepeatCondition: Boolean constant false (id_253[au](0): boolean)
   AncestorInvariantCondition: (id_303[au](1): (TransparentWrapper(id_299[auT]{1}(Boolean constant true (id_254[au](1): boolean)) && TransparentWrapper(id_301[auT]{1}(Boolean constant true (id_254[au](1): boolean)))
   AncestorEndCondition: (id_309[iu](UNKNOWN): (TransparentWrapper(id_305[iuT]{0}(Boolean constant false (id_253[au](0): boolean)) || TransparentWrapper(id_307[iuT]{0}((id_296[au](0): childrenFinished(0:1))))
   ParentExecutingCondition: (id_312[iu](UNKNOWN): ((id_218[au](EXECUTING): state(EXECUTING)) == (id_311[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_255[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_320[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_315[iu](UNKNOWN): ((id_218[au](EXECUTING): state(EXECUTING)) == (id_314[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_318[iu](UNKNOWN): ((id_218[au](EXECUTING): state(EXECUTING)) == (id_317[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_330[au](0): allCommandHandleValues(anonymous (id_321[au](UNKNOWN): string)))
   Command handle: (id_261[au](UNKNOWN):  command_handle)
  }
}

[Test:testOutput]Sending command ACK drive() = (string)COMMAND_DENIED
[PlexilExec:notifyNodeConditionChanged] for node Drive
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 5
[PlexilExec:step][2:0] State change queue: Drive 
[PlexilExec:lock]Locking node Drive
[PlexilExec:step][2:0:0] Transitioning node Drive
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:unlock]Unlocking node Drive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 6
[PlexilExec:step][2:1] State change queue: Drive 
[PlexilExec:lock]Locking node Drive
[PlexilExec:step][2:1:0] Transitioning node Drive
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node Drive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Drive' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 7
[PlexilExec:step][2:2] State change queue: SimpleDrive 
[PlexilExec:lock]Locking node SimpleDrive
[PlexilExec:step][2:2:0] Transitioning node SimpleDrive
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 8
[PlexilExec:step][2:3] State change queue: SimpleDrive 
[PlexilExec:lock]Locking node SimpleDrive
[PlexilExec:step][2:3:0] Transitioning node SimpleDrive
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 9
[PlexilExec:step][2:4] State change queue: SimpleDrive 
[PlexilExec:lock]Locking node SimpleDrive
[PlexilExec:step][2:4:0] Transitioning node SimpleDrive
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleDrive' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleDrive{
 State: (id_218[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_219[au](SUCCESS):  outcome)
  Drive{
   State: (id_258[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_259[au](SUCCESS):  outcome)
   Command handle: (id_261[au](COMMAND_DENIED):  command_handle)
  }
}

