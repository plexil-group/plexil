[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: SimpleTask (id_77[au](INACTIVE): state) (inf)
  C1{
   State: C1 (id_132[au](INACTIVE): state) (inf)
  }
  C2{
   State: C2 (id_201[au](INACTIVE): state) (inf)
  }
  C3{
   State: C3 (id_266[au](INACTIVE): state) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:step][1:3:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c1() into returnValue (id_194[au](-1): int) with ack C1 ack (id_196[au](UNKNOWN): string)
[Test:testOutput]Executing c2() into returnValue (id_259[au](-1): int) with ack C2 ack (id_261[au](UNKNOWN): string)
[Test:testOutput]Executing c3() into returnValue (id_324[au](-1): int) with ack C3 ack (id_326[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_77[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_127[au](0): boolean)
 StartCondition: Boolean constant true (id_129[au](1): boolean)
 EndCondition: (id_337[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_129[au](1): boolean)
 PreCondition: Boolean constant true (id_129[au](1): boolean)
 PostCondition: Boolean constant true (id_129[au](1): boolean)
 RepeatCondition: Boolean constant false (id_127[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_129[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_127[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_129[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_127[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_127[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_330[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_132[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_369[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C1 ack (id_196[au](UNKNOWN): string))) || (id_367[au](0): ((id_365[au](0): isknown(C1 ack (id_196[au](UNKNOWN): string))) && (id_353[au](0): (returnValue (id_194[au](-1): int) == IntegerValue (id_355[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_357[au](UNKNOWN): (id_361[au](UNKNOWN): (C1 (id_198[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_127[au](0): boolean)
   AncestorInvariantCondition: (id_343[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_345[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_184[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_188[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_192[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_347[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_350[au](0): allCommandHandleValues(C1 ack (id_196[au](UNKNOWN): string)))
   Command handle: C1 (id_198[au](UNKNOWN): command_handle)
   returnValue: returnValue (id_194[au](-1): int)
  }
  C2{
   State: C2 (id_201[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_418[au](0): ((id_412[au](0): interruptibleCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string))) || (id_416[au](0): ((id_414[au](0): isknown(C2 ack (id_261[au](UNKNOWN): string))) && (id_396[au](0): (returnValue (id_259[au](-1): int) == IntegerValue (id_398[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_400[au](UNKNOWN): (id_404[au](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_402[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_406[iu](UNKNOWN): (id_410[iu](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_408[iu](COMMAND_DENIED): command_handle))))
   AncestorInvariantCondition: (id_386[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_388[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_251[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_253[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_255[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_390[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_393[au](0): allCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string)))
   Command handle: C2 (id_263[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_257[au](30): int)
   returnValue: returnValue (id_259[au](-1): int)
  }
  C3{
   State: C3 (id_266[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_455[au](0): ((id_449[au](0): interruptibleCommandHandleValues(C3 ack (id_326[au](UNKNOWN): string))) || (id_453[au](0): ((id_451[au](0): isknown(C3 ack (id_326[au](UNKNOWN): string))) && (id_439[au](0): (returnValue (id_324[au](-1): int) == IntegerValue (id_441[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_443[au](UNKNOWN): (id_447[au](UNKNOWN): (C3 (id_328[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_445[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_127[au](0): boolean)
   AncestorInvariantCondition: (id_429[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_431[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_316[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_318[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_320[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_433[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_436[au](0): allCommandHandleValues(C3 ack (id_326[au](UNKNOWN): string)))
   Command handle: C3 (id_328[au](UNKNOWN): command_handle)
   returnValue: returnValue (id_324[au](-1): int)
   vision_priority: vision_priority (id_322[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c1() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_77[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_127[au](0): boolean)
 StartCondition: Boolean constant true (id_129[au](1): boolean)
 EndCondition: (id_337[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_129[au](1): boolean)
 PreCondition: Boolean constant true (id_129[au](1): boolean)
 PostCondition: Boolean constant true (id_129[au](1): boolean)
 RepeatCondition: Boolean constant false (id_127[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_129[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_127[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_129[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_127[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_127[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_330[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_132[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_369[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C1 ack (id_196[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_367[au](0): ((id_365[au](1): isknown(C1 ack (id_196[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_353[au](0): (returnValue (id_194[au](-1): int) == IntegerValue (id_355[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_357[au](0): (id_361[au](0): (C1 (id_198[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_359[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_127[au](0): boolean)
   AncestorInvariantCondition: (id_343[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_345[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_184[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_188[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_192[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_347[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_350[au](1): allCommandHandleValues(C1 ack (id_196[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: C1 (id_198[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   returnValue: returnValue (id_194[au](-1): int)
  }
  C2{
   State: C2 (id_201[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_418[au](0): ((id_412[au](0): interruptibleCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string))) || (id_416[au](0): ((id_414[au](0): isknown(C2 ack (id_261[au](UNKNOWN): string))) && (id_396[au](0): (returnValue (id_259[au](-1): int) == IntegerValue (id_398[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_400[au](UNKNOWN): (id_404[au](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_402[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_406[iu](UNKNOWN): (id_410[iu](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_408[iu](COMMAND_DENIED): command_handle))))
   AncestorInvariantCondition: (id_386[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_388[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_251[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_253[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_255[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_390[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_393[au](0): allCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string)))
   Command handle: C2 (id_263[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_257[au](30): int)
   returnValue: returnValue (id_259[au](-1): int)
  }
  C3{
   State: C3 (id_266[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_455[au](0): ((id_449[au](0): interruptibleCommandHandleValues(C3 ack (id_326[au](UNKNOWN): string))) || (id_453[au](0): ((id_451[au](0): isknown(C3 ack (id_326[au](UNKNOWN): string))) && (id_439[au](0): (returnValue (id_324[au](-1): int) == IntegerValue (id_441[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_443[au](UNKNOWN): (id_447[au](UNKNOWN): (C3 (id_328[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_445[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_127[au](0): boolean)
   AncestorInvariantCondition: (id_429[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_431[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_316[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_318[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_320[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_433[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_436[au](0): allCommandHandleValues(C3 ack (id_326[au](UNKNOWN): string)))
   Command handle: C3 (id_328[au](UNKNOWN): command_handle)
   returnValue: returnValue (id_324[au](-1): int)
   vision_priority: vision_priority (id_322[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c1() = (string)COMMAND_SUCCESS
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_77[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_127[au](0): boolean)
 StartCondition: Boolean constant true (id_129[au](1): boolean)
 EndCondition: (id_337[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_129[au](1): boolean)
 PreCondition: Boolean constant true (id_129[au](1): boolean)
 PostCondition: Boolean constant true (id_129[au](1): boolean)
 RepeatCondition: Boolean constant false (id_127[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_129[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_127[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_129[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_127[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_127[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_330[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_132[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_369[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C1 ack (id_196[au](COMMAND_SUCCESS): string))) || (id_367[au](0): ((id_365[au](1): isknown(C1 ack (id_196[au](COMMAND_SUCCESS): string))) && (id_353[au](0): (returnValue (id_194[au](-1): int) == IntegerValue (id_355[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_357[au](1): (id_361[au](1): (C1 (id_198[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_359[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_127[au](0): boolean)
   AncestorInvariantCondition: (id_343[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_345[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_184[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_188[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_192[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_347[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_350[au](1): allCommandHandleValues(C1 ack (id_196[au](COMMAND_SUCCESS): string)))
   Command handle: C1 (id_198[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_194[au](-1): int)
  }
  C2{
   State: C2 (id_201[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_418[au](0): ((id_412[au](0): interruptibleCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string))) || (id_416[au](0): ((id_414[au](0): isknown(C2 ack (id_261[au](UNKNOWN): string))) && (id_396[au](0): (returnValue (id_259[au](-1): int) == IntegerValue (id_398[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_400[au](UNKNOWN): (id_404[au](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_402[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_406[iu](UNKNOWN): (id_410[iu](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_408[iu](COMMAND_DENIED): command_handle))))
   AncestorInvariantCondition: (id_386[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_388[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_251[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_253[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_255[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_390[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_393[au](0): allCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string)))
   Command handle: C2 (id_263[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_257[au](30): int)
   returnValue: returnValue (id_259[au](-1): int)
  }
  C3{
   State: C3 (id_266[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_455[au](0): ((id_449[au](0): interruptibleCommandHandleValues(C3 ack (id_326[au](UNKNOWN): string))) || (id_453[au](0): ((id_451[au](0): isknown(C3 ack (id_326[au](UNKNOWN): string))) && (id_439[au](0): (returnValue (id_324[au](-1): int) == IntegerValue (id_441[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_443[au](UNKNOWN): (id_447[au](UNKNOWN): (C3 (id_328[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_445[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_127[au](0): boolean)
   AncestorInvariantCondition: (id_429[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_431[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_316[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_318[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_320[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_433[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_436[au](0): allCommandHandleValues(C3 ack (id_326[au](UNKNOWN): string)))
   Command handle: C3 (id_328[au](UNKNOWN): command_handle)
   returnValue: returnValue (id_324[au](-1): int)
   vision_priority: vision_priority (id_322[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_77[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_127[au](0): boolean)
 StartCondition: Boolean constant true (id_129[au](1): boolean)
 EndCondition: (id_337[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_129[au](1): boolean)
 PreCondition: Boolean constant true (id_129[au](1): boolean)
 PostCondition: Boolean constant true (id_129[au](1): boolean)
 RepeatCondition: Boolean constant false (id_127[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_129[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_127[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_129[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_127[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_127[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_330[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_132[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_369[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C1 ack (id_196[au](COMMAND_SUCCESS): string))) || (id_367[au](0): ((id_365[au](1): isknown(C1 ack (id_196[au](COMMAND_SUCCESS): string))) && (id_353[au](0): (returnValue (id_194[au](-1): int) == IntegerValue (id_355[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_357[au](1): (id_361[au](1): (C1 (id_198[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_359[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_127[au](0): boolean)
   AncestorInvariantCondition: (id_343[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_345[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_184[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_188[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_192[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_347[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_350[au](1): allCommandHandleValues(C1 ack (id_196[au](COMMAND_SUCCESS): string)))
   Command handle: C1 (id_198[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_194[au](-1): int)
  }
  C2{
   State: C2 (id_201[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_418[au](0): ((id_412[au](0): interruptibleCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string))) || (id_416[au](0): ((id_414[au](0): isknown(C2 ack (id_261[au](UNKNOWN): string))) && (id_396[au](0): (returnValue (id_259[au](-1): int) == IntegerValue (id_398[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_400[au](UNKNOWN): (id_404[au](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_402[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_406[iu](UNKNOWN): (id_410[iu](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_408[iu](COMMAND_DENIED): command_handle))))
   AncestorInvariantCondition: (id_386[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_388[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_251[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_253[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_255[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_390[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_393[au](0): allCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string)))
   Command handle: C2 (id_263[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_257[au](30): int)
   returnValue: returnValue (id_259[au](-1): int)
  }
  C3{
   State: C3 (id_266[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_455[au](0): ((id_449[au](0): interruptibleCommandHandleValues(C3 ack (id_326[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_453[au](0): ((id_451[au](1): isknown(C3 ack (id_326[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_439[au](0): (returnValue (id_324[au](-1): int) == IntegerValue (id_441[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_443[au](0): (id_447[au](0): (C3 (id_328[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_445[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_127[au](0): boolean)
   AncestorInvariantCondition: (id_429[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_431[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_316[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_318[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_320[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_433[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_436[au](1): allCommandHandleValues(C3 ack (id_326[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: C3 (id_328[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   returnValue: returnValue (id_324[au](-1): int)
   vision_priority: vision_priority (id_322[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SUCCESS
[PlexilExec:notifyNodeConditionChanged] for node C3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_77[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_127[au](0): boolean)
 StartCondition: Boolean constant true (id_129[au](1): boolean)
 EndCondition: (id_337[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_129[au](1): boolean)
 PreCondition: Boolean constant true (id_129[au](1): boolean)
 PostCondition: Boolean constant true (id_129[au](1): boolean)
 RepeatCondition: Boolean constant false (id_127[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_129[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_127[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_129[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_127[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_127[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_330[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_132[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_369[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C1 ack (id_196[au](COMMAND_SUCCESS): string))) || (id_367[au](0): ((id_365[au](1): isknown(C1 ack (id_196[au](COMMAND_SUCCESS): string))) && (id_353[au](0): (returnValue (id_194[au](-1): int) == IntegerValue (id_355[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_357[au](1): (id_361[au](1): (C1 (id_198[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_359[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_127[au](0): boolean)
   AncestorInvariantCondition: (id_343[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_345[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_184[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_188[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_192[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_347[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_350[au](1): allCommandHandleValues(C1 ack (id_196[au](COMMAND_SUCCESS): string)))
   Command handle: C1 (id_198[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_194[au](-1): int)
  }
  C2{
   State: C2 (id_201[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_418[au](0): ((id_412[au](0): interruptibleCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string))) || (id_416[au](0): ((id_414[au](0): isknown(C2 ack (id_261[au](UNKNOWN): string))) && (id_396[au](0): (returnValue (id_259[au](-1): int) == IntegerValue (id_398[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_400[au](UNKNOWN): (id_404[au](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_402[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_406[iu](UNKNOWN): (id_410[iu](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_408[iu](COMMAND_DENIED): command_handle))))
   AncestorInvariantCondition: (id_386[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_388[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_251[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_253[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_255[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_390[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_393[au](0): allCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string)))
   Command handle: C2 (id_263[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_257[au](30): int)
   returnValue: returnValue (id_259[au](-1): int)
  }
  C3{
   State: C3 (id_266[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_455[au](0): ((id_449[au](0): interruptibleCommandHandleValues(C3 ack (id_326[au](COMMAND_SUCCESS): string))) || (id_453[au](0): ((id_451[au](1): isknown(C3 ack (id_326[au](COMMAND_SUCCESS): string))) && (id_439[au](0): (returnValue (id_324[au](-1): int) == IntegerValue (id_441[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_443[au](1): (id_447[au](1): (C3 (id_328[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_445[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_127[au](0): boolean)
   AncestorInvariantCondition: (id_429[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_431[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_316[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_318[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_320[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_433[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_436[au](1): allCommandHandleValues(C3 ack (id_326[au](COMMAND_SUCCESS): string)))
   Command handle: C3 (id_328[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_324[au](-1): int)
   vision_priority: vision_priority (id_322[au](10): int)
  }
}

[Test:testOutput]Sending command result c3() = 10
[PlexilExec:notifyNodeConditionChanged] for node C3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 6
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 9
[PlexilExec:step][6:0] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][6:0:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 10
[PlexilExec:step][6:1] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][6:1:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 6
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_77[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_127[au](0): boolean)
 StartCondition: Boolean constant true (id_129[au](1): boolean)
 EndCondition: (id_337[au](0): childrenFinished(1:3))
 InvariantCondition: Boolean constant true (id_129[au](1): boolean)
 PreCondition: Boolean constant true (id_129[au](1): boolean)
 PostCondition: Boolean constant true (id_129[au](1): boolean)
 RepeatCondition: Boolean constant false (id_127[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_129[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_127[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_129[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_127[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_127[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_330[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_132[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_369[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C1 ack (id_196[au](COMMAND_SUCCESS): string))) || (id_367[au](0): ((id_365[au](1): isknown(C1 ack (id_196[au](COMMAND_SUCCESS): string))) && (id_353[au](0): (returnValue (id_194[au](-1): int) == IntegerValue (id_355[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_357[au](1): (id_361[au](1): (C1 (id_198[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_359[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_127[au](0): boolean)
   AncestorInvariantCondition: (id_343[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_345[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_184[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_188[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_192[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_347[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_350[au](1): allCommandHandleValues(C1 ack (id_196[au](COMMAND_SUCCESS): string)))
   Command handle: C1 (id_198[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_194[au](-1): int)
  }
  C2{
   State: C2 (id_201[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_418[au](0): ((id_412[au](0): interruptibleCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string))) || (id_416[au](0): ((id_414[au](0): isknown(C2 ack (id_261[au](UNKNOWN): string))) && (id_396[au](0): (returnValue (id_259[au](-1): int) == IntegerValue (id_398[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_400[au](UNKNOWN): (id_404[au](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_402[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_406[iu](UNKNOWN): (id_410[iu](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_408[iu](COMMAND_DENIED): command_handle))))
   AncestorInvariantCondition: (id_386[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_388[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_251[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_253[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_255[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_390[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_393[au](0): allCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string)))
   Command handle: C2 (id_263[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_257[au](30): int)
   returnValue: returnValue (id_259[au](-1): int)
  }
  C3{
   State: C3 (id_266[au](FINISHED): state) (0)
   Outcome: C3 (id_268[au](SUCCESS): outcome)
   Command handle: C3 (id_328[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_324[iu](10): int)
   vision_priority: vision_priority (id_322[au](10): int)
  }
}

[Test:testOutput]Sending command result c1() = 10
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 7
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 11
[PlexilExec:step][7:0] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][7:0:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 12
[PlexilExec:step][7:1] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][7:1:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 7
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_77[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_127[au](0): boolean)
 StartCondition: Boolean constant true (id_129[au](1): boolean)
 EndCondition: (id_337[au](0): childrenFinished(2:3))
 InvariantCondition: Boolean constant true (id_129[au](1): boolean)
 PreCondition: Boolean constant true (id_129[au](1): boolean)
 PostCondition: Boolean constant true (id_129[au](1): boolean)
 RepeatCondition: Boolean constant false (id_127[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_129[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_127[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_129[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_127[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_127[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_330[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_132[au](FINISHED): state) (0)
   Outcome: C1 (id_134[au](SUCCESS): outcome)
   Command handle: C1 (id_198[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_194[iu](10): int)
  }
  C2{
   State: C2 (id_201[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_418[au](0): ((id_412[au](0): interruptibleCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string))) || (id_416[au](0): ((id_414[au](0): isknown(C2 ack (id_261[au](UNKNOWN): string))) && (id_396[au](0): (returnValue (id_259[au](-1): int) == IntegerValue (id_398[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_400[au](UNKNOWN): (id_404[au](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_402[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_406[iu](UNKNOWN): (id_410[iu](UNKNOWN): (C2 (id_263[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_408[iu](COMMAND_DENIED): command_handle))))
   AncestorInvariantCondition: (id_386[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_388[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(2:3))))
   ParentExecutingCondition: (id_251[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_253[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_255[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_390[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_393[au](0): allCommandHandleValues(C2 ack (id_261[au](UNKNOWN): string)))
   Command handle: C2 (id_263[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_257[au](30): int)
   returnValue: returnValue (id_259[au](-1): int)
  }
  C3{
   State: C3 (id_266[au](FINISHED): state) (0)
   Outcome: C3 (id_268[au](SUCCESS): outcome)
   Command handle: C3 (id_328[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_324[iu](10): int)
   vision_priority: vision_priority (id_322[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c2() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 8
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:cycle]==>End cycle 8
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_77[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_127[au](0): boolean)
 StartCondition: Boolean constant true (id_129[au](1): boolean)
 EndCondition: (id_337[au](0): childrenFinished(2:3))
 InvariantCondition: Boolean constant true (id_129[au](1): boolean)
 PreCondition: Boolean constant true (id_129[au](1): boolean)
 PostCondition: Boolean constant true (id_129[au](1): boolean)
 RepeatCondition: Boolean constant false (id_127[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_129[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_127[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_129[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_127[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_127[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_330[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_132[au](FINISHED): state) (0)
   Outcome: C1 (id_134[au](SUCCESS): outcome)
   Command handle: C1 (id_198[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_194[iu](10): int)
  }
  C2{
   State: C2 (id_201[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_418[au](0): ((id_412[au](0): interruptibleCommandHandleValues(C2 ack (id_261[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_416[au](0): ((id_414[au](1): isknown(C2 ack (id_261[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_396[au](0): (returnValue (id_259[au](-1): int) == IntegerValue (id_398[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_400[au](0): (id_404[au](0): (C2 (id_263[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_402[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_406[iu](UNKNOWN): (id_410[iu](UNKNOWN): (C2 (id_263[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_408[iu](COMMAND_DENIED): command_handle))))
   AncestorInvariantCondition: (id_386[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_388[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(2:3))))
   ParentExecutingCondition: (id_251[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_253[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_255[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_390[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_393[au](1): allCommandHandleValues(C2 ack (id_261[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: C2 (id_263[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   mem_priority: mem_priority (id_257[au](30): int)
   returnValue: returnValue (id_259[au](-1): int)
  }
  C3{
   State: C3 (id_266[au](FINISHED): state) (0)
   Outcome: C3 (id_268[au](SUCCESS): outcome)
   Command handle: C3 (id_328[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_324[iu](10): int)
   vision_priority: vision_priority (id_322[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c2() = (string)COMMAND_SUCCESS
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 9
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:cycle]==>End cycle 9
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_77[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_127[au](0): boolean)
 StartCondition: Boolean constant true (id_129[au](1): boolean)
 EndCondition: (id_337[au](0): childrenFinished(2:3))
 InvariantCondition: Boolean constant true (id_129[au](1): boolean)
 PreCondition: Boolean constant true (id_129[au](1): boolean)
 PostCondition: Boolean constant true (id_129[au](1): boolean)
 RepeatCondition: Boolean constant false (id_127[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_129[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_127[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_129[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_127[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_127[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_330[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_132[au](FINISHED): state) (0)
   Outcome: C1 (id_134[au](SUCCESS): outcome)
   Command handle: C1 (id_198[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_194[iu](10): int)
  }
  C2{
   State: C2 (id_201[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_127[au](0): boolean)
   StartCondition: Boolean constant true (id_129[au](1): boolean)
   EndCondition: (id_418[au](0): ((id_412[au](0): interruptibleCommandHandleValues(C2 ack (id_261[au](COMMAND_SUCCESS): string))) || (id_416[au](0): ((id_414[au](1): isknown(C2 ack (id_261[au](COMMAND_SUCCESS): string))) && (id_396[au](0): (returnValue (id_259[au](-1): int) == IntegerValue (id_398[au](10): int)))))))
   InvariantCondition: Boolean constant true (id_129[au](1): boolean)
   PreCondition: Boolean constant true (id_129[au](1): boolean)
   PostCondition: (id_400[au](1): (id_404[au](1): (C2 (id_263[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_402[au](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_406[iu](UNKNOWN): (id_410[iu](UNKNOWN): (C2 (id_263[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_408[iu](COMMAND_DENIED): command_handle))))
   AncestorInvariantCondition: (id_386[au](1): (Boolean constant true (id_129[au](1): boolean)))Boolean constant true (id_129[au](1): boolean)))
   AncestorEndCondition: (id_388[iu](UNKNOWN): (Boolean constant false (id_127[au](0): boolean) || (id_337[au](0): childrenFinished(2:3))))
   ParentExecutingCondition: (id_251[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_182[au](EXECUTING): state)))
   ParentWaitingCondition: (id_253[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_186[au](WAITING): state)))
   ParentFinishedCondition: (id_255[iu](UNKNOWN): (SimpleTask (id_77[au](EXECUTING): state) == anonymous (id_190[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_390[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_393[au](1): allCommandHandleValues(C2 ack (id_261[au](COMMAND_SUCCESS): string)))
   Command handle: C2 (id_263[au](COMMAND_SUCCESS): command_handle)
   mem_priority: mem_priority (id_257[au](30): int)
   returnValue: returnValue (id_259[au](-1): int)
  }
  C3{
   State: C3 (id_266[au](FINISHED): state) (0)
   Outcome: C3 (id_268[au](SUCCESS): outcome)
   Command handle: C3 (id_328[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_324[iu](10): int)
   vision_priority: vision_priority (id_322[au](10): int)
  }
}

[Test:testOutput]Sending command result c2() = 10
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 10
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 13
[PlexilExec:step][10:0] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][10:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 14
[PlexilExec:step][10:1] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][10:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 15
[PlexilExec:step][10:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][10:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 16
[PlexilExec:step][10:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][10:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 17
[PlexilExec:step][10:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][10:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 10
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_77[au](FINISHED): state) (0)
 Outcome: SimpleTask (id_79[au](SUCCESS): outcome)
  C1{
   State: C1 (id_132[au](FINISHED): state) (0)
   Outcome: C1 (id_134[au](SUCCESS): outcome)
   Command handle: C1 (id_198[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_194[iu](10): int)
  }
  C2{
   State: C2 (id_201[au](FINISHED): state) (0)
   Outcome: C2 (id_203[au](SUCCESS): outcome)
   Command handle: C2 (id_263[au](COMMAND_SUCCESS): command_handle)
   mem_priority: mem_priority (id_257[au](30): int)
   returnValue: returnValue (id_259[iu](10): int)
  }
  C3{
   State: C3 (id_266[au](FINISHED): state) (0)
   Outcome: C3 (id_268[au](SUCCESS): outcome)
   Command handle: C3 (id_328[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_324[iu](10): int)
   vision_priority: vision_priority (id_322[au](10): int)
  }
}

