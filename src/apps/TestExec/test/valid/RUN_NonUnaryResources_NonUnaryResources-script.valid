[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: SimpleTask (id_78[au](INACTIVE): state) (inf)
  C1{
   State: C1 (id_133[au](INACTIVE): state) (inf)
  }
  C2{
   State: C2 (id_177[au](INACTIVE): state) (inf)
  }
  C3{
   State: C3 (id_223[au](INACTIVE): state) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:step][1:3:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[Test:testOutput]Executing c1() into returnValue (id_174[au](-1): int) with ack C1 command_handle (id_297[au](UNKNOWN): command_handle)
[Test:testOutput]Executing c2() into returnValue (id_220[au](-1): int) with ack C2 command_handle (id_333[au](UNKNOWN): command_handle)
[Test:testOutput]Executing c3() into returnValue (id_266[au](-1): int) with ack C3 command_handle (id_372[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_78[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_118[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_116[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_116[au](0): boolean)
 SkipCondition: Boolean constant false (id_116[au](0): boolean)
 StartCondition: Boolean constant true (id_118[au](1): boolean)
 EndCondition: (id_275[au](0): childrenFinished(0:3))
 ExitCondition: Boolean constant false (id_116[au](0): boolean)
 InvariantCondition: Boolean constant true (id_118[au](1): boolean)
 PreCondition: Boolean constant true (id_118[au](1): boolean)
 PostCondition: Boolean constant true (id_118[au](1): boolean)
 RepeatCondition: Boolean constant false (id_116[au](0): boolean)
 ActionCompleteCondition: (id_268[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_133[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_322[au](0): ((id_320[au](0): interruptibleCommandHandleValues(C1 command_handle (id_297[au](UNKNOWN): command_handle))) || (id_309[au](0): (returnValue (id_174[au](-1): int) == IntegerValue (id_311[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_314[iu](UNKNOWN): (id_318[iu](UNKNOWN): (C1 command_handle (id_297[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_316[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   ActionCompleteCondition: (id_301[iu](UNKNOWN): isknown(C1 command_handle (id_297[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C1 abortComplete (id_299[au](UNKNOWN): boolean)
   Command handle: C1 command_handle (id_297[au](UNKNOWN): command_handle)
   returnValue: returnValue (id_174[au](-1): int)
  }
  C2{
   State: C2 (id_177[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_365[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C2 command_handle (id_333[au](UNKNOWN): command_handle))) || (id_345[au](0): (returnValue (id_220[au](-1): int) == IntegerValue (id_347[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_350[iu](UNKNOWN): (id_354[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_352[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_357[iu](UNKNOWN): (id_361[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[iu](COMMAND_DENIED): command_handle))))
   ActionCompleteCondition: (id_337[iu](UNKNOWN): isknown(C2 command_handle (id_333[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C2 abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: C2 command_handle (id_333[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_218[au](30): int)
   returnValue: returnValue (id_220[au](-1): int)
  }
  C3{
   State: C3 (id_223[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_397[au](0): ((id_395[au](0): interruptibleCommandHandleValues(C3 command_handle (id_372[au](UNKNOWN): command_handle))) || (id_384[au](0): (returnValue (id_266[au](-1): int) == IntegerValue (id_386[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_389[iu](UNKNOWN): (id_393[iu](UNKNOWN): (C3 command_handle (id_372[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_391[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   ActionCompleteCondition: (id_376[iu](UNKNOWN): isknown(C3 command_handle (id_372[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C3 abortComplete (id_374[au](UNKNOWN): boolean)
   Command handle: C3 command_handle (id_372[au](UNKNOWN): command_handle)
   returnValue: returnValue (id_266[au](-1): int)
   vision_priority: vision_priority (id_264[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c1() = (string)COMMAND_SENT_TO_SYSTEM
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_78[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_118[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_116[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_116[au](0): boolean)
 SkipCondition: Boolean constant false (id_116[au](0): boolean)
 StartCondition: Boolean constant true (id_118[au](1): boolean)
 EndCondition: (id_275[au](0): childrenFinished(0:3))
 ExitCondition: Boolean constant false (id_116[au](0): boolean)
 InvariantCondition: Boolean constant true (id_118[au](1): boolean)
 PreCondition: Boolean constant true (id_118[au](1): boolean)
 PostCondition: Boolean constant true (id_118[au](1): boolean)
 RepeatCondition: Boolean constant false (id_116[au](0): boolean)
 ActionCompleteCondition: (id_268[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_133[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_322[au](0): ((id_320[au](0): interruptibleCommandHandleValues(C1 command_handle (id_297[au](COMMAND_SENT_TO_SYSTEM): command_handle))) || (id_309[au](0): (returnValue (id_174[au](-1): int) == IntegerValue (id_311[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_314[iu](UNKNOWN): (id_318[iu](UNKNOWN): (C1 command_handle (id_297[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_316[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   ActionCompleteCondition: (id_301[iu](UNKNOWN): isknown(C1 command_handle (id_297[au](COMMAND_SENT_TO_SYSTEM): command_handle)))
   AbortCompleteCondition: C1 abortComplete (id_299[au](UNKNOWN): boolean)
   Command handle: C1 command_handle (id_297[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   returnValue: returnValue (id_174[au](-1): int)
  }
  C2{
   State: C2 (id_177[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_365[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C2 command_handle (id_333[au](UNKNOWN): command_handle))) || (id_345[au](0): (returnValue (id_220[au](-1): int) == IntegerValue (id_347[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_350[iu](UNKNOWN): (id_354[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_352[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_357[iu](UNKNOWN): (id_361[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[iu](COMMAND_DENIED): command_handle))))
   ActionCompleteCondition: (id_337[iu](UNKNOWN): isknown(C2 command_handle (id_333[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C2 abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: C2 command_handle (id_333[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_218[au](30): int)
   returnValue: returnValue (id_220[au](-1): int)
  }
  C3{
   State: C3 (id_223[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_397[au](0): ((id_395[au](0): interruptibleCommandHandleValues(C3 command_handle (id_372[au](UNKNOWN): command_handle))) || (id_384[au](0): (returnValue (id_266[au](-1): int) == IntegerValue (id_386[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_389[iu](UNKNOWN): (id_393[iu](UNKNOWN): (C3 command_handle (id_372[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_391[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   ActionCompleteCondition: (id_376[iu](UNKNOWN): isknown(C3 command_handle (id_372[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C3 abortComplete (id_374[au](UNKNOWN): boolean)
   Command handle: C3 command_handle (id_372[au](UNKNOWN): command_handle)
   returnValue: returnValue (id_266[au](-1): int)
   vision_priority: vision_priority (id_264[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c1() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_78[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_118[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_116[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_116[au](0): boolean)
 SkipCondition: Boolean constant false (id_116[au](0): boolean)
 StartCondition: Boolean constant true (id_118[au](1): boolean)
 EndCondition: (id_275[au](0): childrenFinished(0:3))
 ExitCondition: Boolean constant false (id_116[au](0): boolean)
 InvariantCondition: Boolean constant true (id_118[au](1): boolean)
 PreCondition: Boolean constant true (id_118[au](1): boolean)
 PostCondition: Boolean constant true (id_118[au](1): boolean)
 RepeatCondition: Boolean constant false (id_116[au](0): boolean)
 ActionCompleteCondition: (id_268[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_133[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_322[au](0): ((id_320[au](0): interruptibleCommandHandleValues(C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle))) || (id_309[au](0): (returnValue (id_174[au](-1): int) == IntegerValue (id_311[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_314[iu](UNKNOWN): (id_318[iu](UNKNOWN): (C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_316[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   ActionCompleteCondition: (id_301[iu](UNKNOWN): isknown(C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle)))
   AbortCompleteCondition: C1 abortComplete (id_299[au](UNKNOWN): boolean)
   Command handle: C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_174[au](-1): int)
  }
  C2{
   State: C2 (id_177[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_365[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C2 command_handle (id_333[au](UNKNOWN): command_handle))) || (id_345[au](0): (returnValue (id_220[au](-1): int) == IntegerValue (id_347[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_350[iu](UNKNOWN): (id_354[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_352[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_357[iu](UNKNOWN): (id_361[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[iu](COMMAND_DENIED): command_handle))))
   ActionCompleteCondition: (id_337[iu](UNKNOWN): isknown(C2 command_handle (id_333[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C2 abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: C2 command_handle (id_333[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_218[au](30): int)
   returnValue: returnValue (id_220[au](-1): int)
  }
  C3{
   State: C3 (id_223[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_397[au](0): ((id_395[au](0): interruptibleCommandHandleValues(C3 command_handle (id_372[au](UNKNOWN): command_handle))) || (id_384[au](0): (returnValue (id_266[au](-1): int) == IntegerValue (id_386[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_389[iu](UNKNOWN): (id_393[iu](UNKNOWN): (C3 command_handle (id_372[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_391[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   ActionCompleteCondition: (id_376[iu](UNKNOWN): isknown(C3 command_handle (id_372[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C3 abortComplete (id_374[au](UNKNOWN): boolean)
   Command handle: C3 command_handle (id_372[au](UNKNOWN): command_handle)
   returnValue: returnValue (id_266[au](-1): int)
   vision_priority: vision_priority (id_264[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SENT_TO_SYSTEM
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_78[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_118[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_116[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_116[au](0): boolean)
 SkipCondition: Boolean constant false (id_116[au](0): boolean)
 StartCondition: Boolean constant true (id_118[au](1): boolean)
 EndCondition: (id_275[au](0): childrenFinished(0:3))
 ExitCondition: Boolean constant false (id_116[au](0): boolean)
 InvariantCondition: Boolean constant true (id_118[au](1): boolean)
 PreCondition: Boolean constant true (id_118[au](1): boolean)
 PostCondition: Boolean constant true (id_118[au](1): boolean)
 RepeatCondition: Boolean constant false (id_116[au](0): boolean)
 ActionCompleteCondition: (id_268[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_133[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_322[au](0): ((id_320[au](0): interruptibleCommandHandleValues(C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle))) || (id_309[au](0): (returnValue (id_174[au](-1): int) == IntegerValue (id_311[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_314[iu](UNKNOWN): (id_318[iu](UNKNOWN): (C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_316[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   ActionCompleteCondition: (id_301[iu](UNKNOWN): isknown(C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle)))
   AbortCompleteCondition: C1 abortComplete (id_299[au](UNKNOWN): boolean)
   Command handle: C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_174[au](-1): int)
  }
  C2{
   State: C2 (id_177[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_365[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C2 command_handle (id_333[au](UNKNOWN): command_handle))) || (id_345[au](0): (returnValue (id_220[au](-1): int) == IntegerValue (id_347[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_350[iu](UNKNOWN): (id_354[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_352[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_357[iu](UNKNOWN): (id_361[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[iu](COMMAND_DENIED): command_handle))))
   ActionCompleteCondition: (id_337[iu](UNKNOWN): isknown(C2 command_handle (id_333[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C2 abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: C2 command_handle (id_333[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_218[au](30): int)
   returnValue: returnValue (id_220[au](-1): int)
  }
  C3{
   State: C3 (id_223[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_397[au](0): ((id_395[au](0): interruptibleCommandHandleValues(C3 command_handle (id_372[au](COMMAND_SENT_TO_SYSTEM): command_handle))) || (id_384[au](0): (returnValue (id_266[au](-1): int) == IntegerValue (id_386[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_389[iu](UNKNOWN): (id_393[iu](UNKNOWN): (C3 command_handle (id_372[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_391[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   ActionCompleteCondition: (id_376[iu](UNKNOWN): isknown(C3 command_handle (id_372[au](COMMAND_SENT_TO_SYSTEM): command_handle)))
   AbortCompleteCondition: C3 abortComplete (id_374[au](UNKNOWN): boolean)
   Command handle: C3 command_handle (id_372[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   returnValue: returnValue (id_266[au](-1): int)
   vision_priority: vision_priority (id_264[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_78[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_118[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_116[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_116[au](0): boolean)
 SkipCondition: Boolean constant false (id_116[au](0): boolean)
 StartCondition: Boolean constant true (id_118[au](1): boolean)
 EndCondition: (id_275[au](0): childrenFinished(0:3))
 ExitCondition: Boolean constant false (id_116[au](0): boolean)
 InvariantCondition: Boolean constant true (id_118[au](1): boolean)
 PreCondition: Boolean constant true (id_118[au](1): boolean)
 PostCondition: Boolean constant true (id_118[au](1): boolean)
 RepeatCondition: Boolean constant false (id_116[au](0): boolean)
 ActionCompleteCondition: (id_268[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_133[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_322[au](0): ((id_320[au](0): interruptibleCommandHandleValues(C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle))) || (id_309[au](0): (returnValue (id_174[au](-1): int) == IntegerValue (id_311[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_314[iu](UNKNOWN): (id_318[iu](UNKNOWN): (C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_316[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   ActionCompleteCondition: (id_301[iu](UNKNOWN): isknown(C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle)))
   AbortCompleteCondition: C1 abortComplete (id_299[au](UNKNOWN): boolean)
   Command handle: C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_174[au](-1): int)
  }
  C2{
   State: C2 (id_177[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_365[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C2 command_handle (id_333[au](UNKNOWN): command_handle))) || (id_345[au](0): (returnValue (id_220[au](-1): int) == IntegerValue (id_347[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_350[iu](UNKNOWN): (id_354[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_352[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_357[iu](UNKNOWN): (id_361[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[iu](COMMAND_DENIED): command_handle))))
   ActionCompleteCondition: (id_337[iu](UNKNOWN): isknown(C2 command_handle (id_333[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C2 abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: C2 command_handle (id_333[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_218[au](30): int)
   returnValue: returnValue (id_220[au](-1): int)
  }
  C3{
   State: C3 (id_223[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_397[au](0): ((id_395[au](0): interruptibleCommandHandleValues(C3 command_handle (id_372[au](COMMAND_SUCCESS): command_handle))) || (id_384[au](0): (returnValue (id_266[au](-1): int) == IntegerValue (id_386[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_389[iu](UNKNOWN): (id_393[iu](UNKNOWN): (C3 command_handle (id_372[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_391[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   ActionCompleteCondition: (id_376[iu](UNKNOWN): isknown(C3 command_handle (id_372[au](COMMAND_SUCCESS): command_handle)))
   AbortCompleteCondition: C3 abortComplete (id_374[au](UNKNOWN): boolean)
   Command handle: C3 command_handle (id_372[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_266[au](-1): int)
   vision_priority: vision_priority (id_264[au](10): int)
  }
}

[Test:testOutput]Sending command result c3() = 10
[PlexilExec:notifyNodeConditionChanged] for node C3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 6
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 9
[PlexilExec:step][6:0] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][6:0:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 10
[PlexilExec:step][6:1] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][6:1:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 11
[PlexilExec:step][6:2] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][6:2:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 6
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_78[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_118[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_116[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_116[au](0): boolean)
 SkipCondition: Boolean constant false (id_116[au](0): boolean)
 StartCondition: Boolean constant true (id_118[au](1): boolean)
 EndCondition: (id_275[au](0): childrenFinished(1:3))
 ExitCondition: Boolean constant false (id_116[au](0): boolean)
 InvariantCondition: Boolean constant true (id_118[au](1): boolean)
 PreCondition: Boolean constant true (id_118[au](1): boolean)
 PostCondition: Boolean constant true (id_118[au](1): boolean)
 RepeatCondition: Boolean constant false (id_116[au](0): boolean)
 ActionCompleteCondition: (id_268[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_133[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(1:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_322[au](0): ((id_320[au](0): interruptibleCommandHandleValues(C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle))) || (id_309[au](0): (returnValue (id_174[au](-1): int) == IntegerValue (id_311[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_314[iu](UNKNOWN): (id_318[iu](UNKNOWN): (C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_316[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_116[au](0): boolean)
   ActionCompleteCondition: (id_301[iu](UNKNOWN): isknown(C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle)))
   AbortCompleteCondition: C1 abortComplete (id_299[au](UNKNOWN): boolean)
   Command handle: C1 command_handle (id_297[au](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_174[au](-1): int)
  }
  C2{
   State: C2 (id_177[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(1:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_365[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C2 command_handle (id_333[au](UNKNOWN): command_handle))) || (id_345[au](0): (returnValue (id_220[au](-1): int) == IntegerValue (id_347[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_350[iu](UNKNOWN): (id_354[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_352[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_357[iu](UNKNOWN): (id_361[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[iu](COMMAND_DENIED): command_handle))))
   ActionCompleteCondition: (id_337[iu](UNKNOWN): isknown(C2 command_handle (id_333[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C2 abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: C2 command_handle (id_333[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_218[au](30): int)
   returnValue: returnValue (id_220[au](-1): int)
  }
  C3{
   State: C3 (id_223[au](FINISHED): state) (0)
   Outcome: C3 (id_225[au](SUCCESS): outcome)
   Command handle: C3 command_handle (id_372[iu](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_266[iu](10): int)
   vision_priority: vision_priority (id_264[au](10): int)
  }
}

[Test:testOutput]Sending command result c1() = 10
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 7
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 12
[PlexilExec:step][7:0] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][7:0:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 13
[PlexilExec:step][7:1] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][7:1:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 14
[PlexilExec:step][7:2] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][7:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 7
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_78[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_118[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_116[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_116[au](0): boolean)
 SkipCondition: Boolean constant false (id_116[au](0): boolean)
 StartCondition: Boolean constant true (id_118[au](1): boolean)
 EndCondition: (id_275[au](0): childrenFinished(2:3))
 ExitCondition: Boolean constant false (id_116[au](0): boolean)
 InvariantCondition: Boolean constant true (id_118[au](1): boolean)
 PreCondition: Boolean constant true (id_118[au](1): boolean)
 PostCondition: Boolean constant true (id_118[au](1): boolean)
 RepeatCondition: Boolean constant false (id_116[au](0): boolean)
 ActionCompleteCondition: (id_268[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_133[au](FINISHED): state) (0)
   Outcome: C1 (id_135[au](SUCCESS): outcome)
   Command handle: C1 command_handle (id_297[iu](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_174[iu](10): int)
  }
  C2{
   State: C2 (id_177[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(2:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_365[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C2 command_handle (id_333[au](UNKNOWN): command_handle))) || (id_345[au](0): (returnValue (id_220[au](-1): int) == IntegerValue (id_347[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_350[iu](UNKNOWN): (id_354[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_352[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_357[iu](UNKNOWN): (id_361[iu](UNKNOWN): (C2 command_handle (id_333[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[iu](COMMAND_DENIED): command_handle))))
   ActionCompleteCondition: (id_337[iu](UNKNOWN): isknown(C2 command_handle (id_333[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: C2 abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: C2 command_handle (id_333[au](UNKNOWN): command_handle)
   mem_priority: mem_priority (id_218[au](30): int)
   returnValue: returnValue (id_220[au](-1): int)
  }
  C3{
   State: C3 (id_223[au](FINISHED): state) (0)
   Outcome: C3 (id_225[au](SUCCESS): outcome)
   Command handle: C3 command_handle (id_372[iu](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_266[iu](10): int)
   vision_priority: vision_priority (id_264[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c2() = (string)COMMAND_SENT_TO_SYSTEM
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 8
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 8
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_78[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_118[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_116[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_116[au](0): boolean)
 SkipCondition: Boolean constant false (id_116[au](0): boolean)
 StartCondition: Boolean constant true (id_118[au](1): boolean)
 EndCondition: (id_275[au](0): childrenFinished(2:3))
 ExitCondition: Boolean constant false (id_116[au](0): boolean)
 InvariantCondition: Boolean constant true (id_118[au](1): boolean)
 PreCondition: Boolean constant true (id_118[au](1): boolean)
 PostCondition: Boolean constant true (id_118[au](1): boolean)
 RepeatCondition: Boolean constant false (id_116[au](0): boolean)
 ActionCompleteCondition: (id_268[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_133[au](FINISHED): state) (0)
   Outcome: C1 (id_135[au](SUCCESS): outcome)
   Command handle: C1 command_handle (id_297[iu](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_174[iu](10): int)
  }
  C2{
   State: C2 (id_177[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(2:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_365[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C2 command_handle (id_333[au](COMMAND_SENT_TO_SYSTEM): command_handle))) || (id_345[au](0): (returnValue (id_220[au](-1): int) == IntegerValue (id_347[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_350[iu](UNKNOWN): (id_354[iu](UNKNOWN): (C2 command_handle (id_333[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_352[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_357[iu](UNKNOWN): (id_361[iu](UNKNOWN): (C2 command_handle (id_333[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_359[iu](COMMAND_DENIED): command_handle))))
   ActionCompleteCondition: (id_337[iu](UNKNOWN): isknown(C2 command_handle (id_333[au](COMMAND_SENT_TO_SYSTEM): command_handle)))
   AbortCompleteCondition: C2 abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: C2 command_handle (id_333[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   mem_priority: mem_priority (id_218[au](30): int)
   returnValue: returnValue (id_220[au](-1): int)
  }
  C3{
   State: C3 (id_223[au](FINISHED): state) (0)
   Outcome: C3 (id_225[au](SUCCESS): outcome)
   Command handle: C3 command_handle (id_372[iu](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_266[iu](10): int)
   vision_priority: vision_priority (id_264[au](10): int)
  }
}

[Test:testOutput]Sending command ACK c2() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 9
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 9
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_78[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_118[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_116[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_116[au](0): boolean)
 SkipCondition: Boolean constant false (id_116[au](0): boolean)
 StartCondition: Boolean constant true (id_118[au](1): boolean)
 EndCondition: (id_275[au](0): childrenFinished(2:3))
 ExitCondition: Boolean constant false (id_116[au](0): boolean)
 InvariantCondition: Boolean constant true (id_118[au](1): boolean)
 PreCondition: Boolean constant true (id_118[au](1): boolean)
 PostCondition: Boolean constant true (id_118[au](1): boolean)
 RepeatCondition: Boolean constant false (id_116[au](0): boolean)
 ActionCompleteCondition: (id_268[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_133[au](FINISHED): state) (0)
   Outcome: C1 (id_135[au](SUCCESS): outcome)
   Command handle: C1 command_handle (id_297[iu](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_174[iu](10): int)
  }
  C2{
   State: C2 (id_177[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_275[au](0): childrenFinished(2:3))
   AncestorExitCondition: Boolean constant false (id_116[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_118[au](1): boolean)
   ParentExecutingCondition: (id_122[au](1): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_120[au](EXECUTING): state)))
   ParentFinishedCondition: (id_126[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_124[au](FINISHED): state)))
   ParentWaitingCondition: (id_130[au](0): (SimpleTask (id_78[au](EXECUTING): state) == anonymous (id_128[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_116[au](0): boolean)
   StartCondition: Boolean constant true (id_118[au](1): boolean)
   EndCondition: (id_365[au](0): ((id_363[au](0): interruptibleCommandHandleValues(C2 command_handle (id_333[au](COMMAND_SUCCESS): command_handle))) || (id_345[au](0): (returnValue (id_220[au](-1): int) == IntegerValue (id_347[au](10): int)))))
   ExitCondition: Boolean constant false (id_116[au](0): boolean)
   InvariantCondition: Boolean constant true (id_118[au](1): boolean)
   PreCondition: Boolean constant true (id_118[au](1): boolean)
   PostCondition: (id_350[iu](UNKNOWN): (id_354[iu](UNKNOWN): (C2 command_handle (id_333[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_352[iu](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: (id_357[iu](UNKNOWN): (id_361[iu](UNKNOWN): (C2 command_handle (id_333[au](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_359[iu](COMMAND_DENIED): command_handle))))
   ActionCompleteCondition: (id_337[iu](UNKNOWN): isknown(C2 command_handle (id_333[au](COMMAND_SUCCESS): command_handle)))
   AbortCompleteCondition: C2 abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: C2 command_handle (id_333[au](COMMAND_SUCCESS): command_handle)
   mem_priority: mem_priority (id_218[au](30): int)
   returnValue: returnValue (id_220[au](-1): int)
  }
  C3{
   State: C3 (id_223[au](FINISHED): state) (0)
   Outcome: C3 (id_225[au](SUCCESS): outcome)
   Command handle: C3 command_handle (id_372[iu](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_266[iu](10): int)
   vision_priority: vision_priority (id_264[au](10): int)
  }
}

[Test:testOutput]Sending command result c2() = 10
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 10
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 15
[PlexilExec:step][10:0] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][10:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 16
[PlexilExec:step][10:1] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][10:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 17
[PlexilExec:step][10:2] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][10:2:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 18
[PlexilExec:step][10:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][10:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 19
[PlexilExec:step][10:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][10:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 20
[PlexilExec:step][10:5] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][10:5:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 10
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_78[au](FINISHED): state) (0)
 Outcome: SimpleTask (id_80[au](SUCCESS): outcome)
  C1{
   State: C1 (id_133[au](FINISHED): state) (0)
   Outcome: C1 (id_135[au](SUCCESS): outcome)
   Command handle: C1 command_handle (id_297[iu](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_174[iu](10): int)
  }
  C2{
   State: C2 (id_177[au](FINISHED): state) (0)
   Outcome: C2 (id_179[au](SUCCESS): outcome)
   Command handle: C2 command_handle (id_333[iu](COMMAND_SUCCESS): command_handle)
   mem_priority: mem_priority (id_218[au](30): int)
   returnValue: returnValue (id_220[iu](10): int)
  }
  C3{
   State: C3 (id_223[au](FINISHED): state) (0)
   Outcome: C3 (id_225[au](SUCCESS): outcome)
   Command handle: C3 command_handle (id_372[iu](COMMAND_SUCCESS): command_handle)
   returnValue: returnValue (id_266[iu](10): int)
   vision_priority: vision_priority (id_264[au](10): int)
  }
}

