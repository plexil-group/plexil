[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: SimpleTask (id_51[au](INACTIVE): state) (inf)
  PickupObject{
   State: PickupObject (id_106[au](INACTIVE): state) (inf)
  }
  ProcessImage{
   State: ProcessImage (id_177[au](INACTIVE): state) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: PickupObject ProcessImage 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][1:2:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:step][1:2:1] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 6
[PlexilExec:step][1:3] State change queue: PickupObject ProcessImage 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][1:3:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:handleNeedsExecution]Storing action for node 'PickupObject' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:handleNeedsExecution]Storing action for node 'ProcessImage' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'PickupObject' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'ProcessImage' was previously eligible to transition but isn't now.
[Test:testOutput]Executing pickup_object(20) into returnValue (id_168[au](-1): int) with ack PickupObject ack (id_172[au](UNKNOWN): string)
[Test:testOutput]Permission to execute process_image has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_51[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_101[au](0): boolean)
 StartCondition: Boolean constant true (id_103[au](1): boolean)
 EndCondition: (id_245[au](0): childrenFinished(0:2))
 InvariantCondition: Boolean constant true (id_103[au](1): boolean)
 PreCondition: Boolean constant true (id_103[au](1): boolean)
 PostCondition: Boolean constant true (id_103[au](1): boolean)
 RepeatCondition: Boolean constant false (id_101[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_103[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_101[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_103[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_101[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_101[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_239[iu](UNKNOWN): childrenWaitingOrFinished(0:2))
  PickupObject{
   State: PickupObject (id_106[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_101[au](0): boolean)
   StartCondition: Boolean constant true (id_103[au](1): boolean)
   EndCondition: (id_276[au](0): ((id_270[au](0): interruptibleCommandHandleValues(PickupObject ack (id_172[au](UNKNOWN): string))) || (id_274[au](0): ((id_272[au](0): isknown(PickupObject ack (id_172[au](UNKNOWN): string))) && (id_260[au](0): (IntegerValue (id_262[au](10): int) == returnValue (id_168[au](-1): int)))))))
   InvariantCondition: Boolean constant true (id_103[au](1): boolean)
   PreCondition: Boolean constant true (id_103[au](1): boolean)
   PostCondition: (id_264[au](UNKNOWN): (id_268[au](UNKNOWN): (PickupObject (id_174[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_266[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_101[au](0): boolean)
   AncestorInvariantCondition: (id_250[au](1): (Boolean constant true (id_103[au](1): boolean)))Boolean constant true (id_103[au](1): boolean)))
   AncestorEndCondition: (id_252[iu](UNKNOWN): (Boolean constant false (id_101[au](0): boolean) || (id_245[au](0): childrenFinished(0:2))))
   ParentExecutingCondition: (id_158[iu](UNKNOWN): (SimpleTask (id_51[au](EXECUTING): state) == anonymous (id_156[au](EXECUTING): state)))
   ParentWaitingCondition: (id_162[iu](UNKNOWN): (SimpleTask (id_51[au](EXECUTING): state) == anonymous (id_160[au](WAITING): state)))
   ParentFinishedCondition: (id_166[iu](UNKNOWN): (SimpleTask (id_51[au](EXECUTING): state) == anonymous (id_164[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_254[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_257[au](0): allCommandHandleValues(PickupObject ack (id_172[au](UNKNOWN): string)))
   Command handle: PickupObject (id_174[au](UNKNOWN): command_handle)
   priority20: priority20 (id_170[au](20): int)
   returnValue: returnValue (id_168[au](-1): int)
  }
  ProcessImage{
   State: ProcessImage (id_177[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_101[au](0): boolean)
   StartCondition: Boolean constant true (id_103[au](1): boolean)
   EndCondition: (id_313[au](1): ((id_307[au](1): interruptibleCommandHandleValues(ProcessImage ack (id_235[au](COMMAND_DENIED): string))) || (id_311[au](1): ((id_309[au](1): isknown(ProcessImage ack (id_235[au](COMMAND_DENIED): string))) && Boolean constant true (id_103[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_103[au](1): boolean)
   PreCondition: Boolean constant true (id_103[au](1): boolean)
   PostCondition: (id_301[au](UNKNOWN): (id_305[au](UNKNOWN): (ProcessImage (id_237[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_303[au](COMMAND_DENIED): command_handle))))
   RepeatCondition: Boolean constant false (id_101[au](0): boolean)
   AncestorInvariantCondition: (id_291[au](1): (Boolean constant true (id_103[au](1): boolean)))Boolean constant true (id_103[au](1): boolean)))
   AncestorEndCondition: (id_293[iu](UNKNOWN): (Boolean constant false (id_101[au](0): boolean) || (id_245[au](0): childrenFinished(0:2))))
   ParentExecutingCondition: (id_227[iu](UNKNOWN): (SimpleTask (id_51[au](EXECUTING): state) == anonymous (id_156[au](EXECUTING): state)))
   ParentWaitingCondition: (id_229[iu](UNKNOWN): (SimpleTask (id_51[au](EXECUTING): state) == anonymous (id_160[au](WAITING): state)))
   ParentFinishedCondition: (id_231[iu](UNKNOWN): (SimpleTask (id_51[au](EXECUTING): state) == anonymous (id_164[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_295[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_298[au](1): allCommandHandleValues(ProcessImage ack (id_235[au](COMMAND_DENIED): string)))
   Command handle: ProcessImage (id_237[au](UNKNOWN): command_handle)
   mem_priority2: mem_priority2 (id_233[au](20): int)
  }
}

[Test:testOutput]Sending command ACK pickup_object(20) = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 7
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:step][2:0] State change queue: ProcessImage 
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][2:0:0] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 8
[PlexilExec:step][2:1] State change queue: ProcessImage 
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][2:1:0] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'ProcessImage' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_51[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_101[au](0): boolean)
 StartCondition: Boolean constant true (id_103[au](1): boolean)
 EndCondition: (id_245[au](0): childrenFinished(1:2))
 InvariantCondition: Boolean constant true (id_103[au](1): boolean)
 PreCondition: Boolean constant true (id_103[au](1): boolean)
 PostCondition: Boolean constant true (id_103[au](1): boolean)
 RepeatCondition: Boolean constant false (id_101[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_103[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_101[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_103[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_101[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_101[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_239[iu](UNKNOWN): childrenWaitingOrFinished(0:2))
  PickupObject{
   State: PickupObject (id_106[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_101[au](0): boolean)
   StartCondition: Boolean constant true (id_103[au](1): boolean)
   EndCondition: (id_276[au](0): ((id_270[au](0): interruptibleCommandHandleValues(PickupObject ack (id_172[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_274[au](0): ((id_272[au](1): isknown(PickupObject ack (id_172[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_260[au](0): (IntegerValue (id_262[au](10): int) == returnValue (id_168[au](-1): int)))))))
   InvariantCondition: Boolean constant true (id_103[au](1): boolean)
   PreCondition: Boolean constant true (id_103[au](1): boolean)
   PostCondition: (id_264[au](1): (id_268[au](1): (PickupObject (id_174[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_266[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_101[au](0): boolean)
   AncestorInvariantCondition: (id_250[au](1): (Boolean constant true (id_103[au](1): boolean)))Boolean constant true (id_103[au](1): boolean)))
   AncestorEndCondition: (id_252[iu](UNKNOWN): (Boolean constant false (id_101[au](0): boolean) || (id_245[au](0): childrenFinished(1:2))))
   ParentExecutingCondition: (id_158[iu](UNKNOWN): (SimpleTask (id_51[au](EXECUTING): state) == anonymous (id_156[au](EXECUTING): state)))
   ParentWaitingCondition: (id_162[iu](UNKNOWN): (SimpleTask (id_51[au](EXECUTING): state) == anonymous (id_160[au](WAITING): state)))
   ParentFinishedCondition: (id_166[iu](UNKNOWN): (SimpleTask (id_51[au](EXECUTING): state) == anonymous (id_164[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_254[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_257[au](1): allCommandHandleValues(PickupObject ack (id_172[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: PickupObject (id_174[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   priority20: priority20 (id_170[au](20): int)
   returnValue: returnValue (id_168[au](-1): int)
  }
  ProcessImage{
   State: ProcessImage (id_177[au](FINISHED): state) (0)
   Outcome: ProcessImage (id_179[au](SUCCESS): outcome)
   Command handle: ProcessImage (id_237[au](COMMAND_DENIED): command_handle)
   mem_priority2: mem_priority2 (id_233[au](20): int)
  }
}

[Test:testOutput]Sending command result pickup_object(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 9
[PlexilExec:step][3:0] State change queue: PickupObject 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:step][3:0:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 10
[PlexilExec:step][3:1] State change queue: PickupObject 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:step][3:1:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'PickupObject' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 11
[PlexilExec:step][3:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][3:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 12
[PlexilExec:step][3:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][3:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 13
[PlexilExec:step][3:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][3:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_51[au](FINISHED): state) (0)
 Outcome: SimpleTask (id_53[au](SUCCESS): outcome)
  PickupObject{
   State: PickupObject (id_106[au](FINISHED): state) (0)
   Outcome: PickupObject (id_108[au](SUCCESS): outcome)
   Command handle: PickupObject (id_174[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   priority20: priority20 (id_170[au](20): int)
   returnValue: returnValue (id_168[iu](10): int)
  }
  ProcessImage{
   State: ProcessImage (id_177[au](FINISHED): state) (0)
   Outcome: ProcessImage (id_179[au](SUCCESS): outcome)
   Command handle: ProcessImage (id_237[au](COMMAND_DENIED): command_handle)
   mem_priority2: mem_priority2 (id_233[au](20): int)
  }
}

