[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: (id_254[au](INACTIVE): state(INACTIVE)) (inf)
  PickupObject{
   State: (id_294[au](INACTIVE): state(INACTIVE)) (inf)
  }
  ProcessImage{
   State: (id_333[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: PickupObject ProcessImage 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][1:2:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:step][1:2:1] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 6
[PlexilExec:step][1:3] State change queue: PickupObject ProcessImage 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][1:3:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:handleNeedsExecution]Storing action for node 'PickupObject' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:handleNeedsExecution]Storing action for node 'ProcessImage' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'PickupObject' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'ProcessImage' was previously eligible to transition but isn't now.
[Test:testOutput]Executing pickup_object(20) into returnValue (id_329[au](-1): int) with ack anonymous (id_405[au](UNKNOWN): string)
[Test:testOutput]Permission to execute process_image has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: (id_254[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_289[au](0): boolean)
 StartCondition: Boolean constant true (id_290[au](1): boolean)
 EndCondition: (id_372[au](0): childrenFinished(0:2))
 InvariantCondition: Boolean constant true (id_290[au](1): boolean)
 PreCondition: Boolean constant true (id_290[au](1): boolean)
 PostCondition: Boolean constant true (id_290[au](1): boolean)
 RepeatCondition: Boolean constant false (id_289[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_290[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_289[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_290[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_369[iu](UNKNOWN): childrenWaitingOrFinished(0:2))
 AbortCompleteCondition: Boolean constant unknown (id_291[au](UNKNOWN): boolean)
 ParentWaitingCondition: Boolean constant false (id_289[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_289[au](0): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_290[au](1): boolean)
  PickupObject{
   State: (id_294[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_289[au](0): boolean)
   StartCondition: Boolean constant true (id_290[au](1): boolean)
   EndCondition: (id_412[au](0): ((id_406[au](0): interruptibleCommandHandleValues(anonymous (id_405[au](UNKNOWN): string))) || (id_410[au](0): ((id_408[au](0): isknown(anonymous (id_405[au](UNKNOWN): string))) && (id_396[au](0): (IntegerValue (id_398[au](10): int) == returnValue (id_329[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_290[au](1): boolean)
   PreCondition: Boolean constant true (id_290[au](1): boolean)
   PostCondition: (id_399[au](UNKNOWN): (id_402[au](UNKNOWN): ((id_297[au](UNKNOWN):  command_handle) == (id_401[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_289[au](0): boolean)
   AncestorInvariantCondition: (id_379[au](1): (TransparentWrapper(id_375[auT]{1}(Boolean constant true (id_290[au](1): boolean)) && TransparentWrapper(id_377[auT]{1}(Boolean constant true (id_290[au](1): boolean)))
   AncestorEndCondition: (id_385[iu](UNKNOWN): (TransparentWrapper(id_381[iuT]{0}(Boolean constant false (id_289[au](0): boolean)) || TransparentWrapper(id_383[iuT]{0}((id_372[au](0): childrenFinished(0:2))))
   ParentExecutingCondition: (id_388[iu](UNKNOWN): ((id_254[au](EXECUTING): state(EXECUTING)) == (id_387[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_291[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_404[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_391[iu](UNKNOWN): ((id_254[au](EXECUTING): state(EXECUTING)) == (id_390[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_394[iu](UNKNOWN): ((id_254[au](EXECUTING): state(EXECUTING)) == (id_393[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_414[au](0): allCommandHandleValues(anonymous (id_405[au](UNKNOWN): string)))
   Command handle: (id_297[au](UNKNOWN):  command_handle)
   priority20: priority20 (id_330[au](20): int)
   returnValue: returnValue (id_329[au](-1): int)
  }
  ProcessImage{
   State: (id_333[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_289[au](0): boolean)
   StartCondition: Boolean constant true (id_290[au](1): boolean)
   EndCondition: (id_454[au](1): ((id_448[au](1): interruptibleCommandHandleValues(anonymous (id_447[au](COMMAND_DENIED): string))) || (id_452[au](1): ((id_450[au](1): isknown(anonymous (id_447[au](COMMAND_DENIED): string))) && Boolean constant true (id_290[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_290[au](1): boolean)
   PreCondition: Boolean constant true (id_290[au](1): boolean)
   PostCondition: (id_441[au](UNKNOWN): (id_444[au](UNKNOWN): ((id_336[au](UNKNOWN):  command_handle) == (id_443[au](COMMAND_DENIED):  command_handle))))
   RepeatCondition: Boolean constant false (id_289[au](0): boolean)
   AncestorInvariantCondition: (id_427[au](1): (TransparentWrapper(id_423[auT]{1}(Boolean constant true (id_290[au](1): boolean)) && TransparentWrapper(id_425[auT]{1}(Boolean constant true (id_290[au](1): boolean)))
   AncestorEndCondition: (id_433[iu](UNKNOWN): (TransparentWrapper(id_429[iuT]{0}(Boolean constant false (id_289[au](0): boolean)) || TransparentWrapper(id_431[iuT]{0}((id_372[au](0): childrenFinished(0:2))))
   ParentExecutingCondition: (id_435[iu](UNKNOWN): ((id_254[au](EXECUTING): state(EXECUTING)) == (id_387[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_291[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_446[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_437[iu](UNKNOWN): ((id_254[au](EXECUTING): state(EXECUTING)) == (id_390[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_439[iu](UNKNOWN): ((id_254[au](EXECUTING): state(EXECUTING)) == (id_393[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_456[au](1): allCommandHandleValues(anonymous (id_447[au](COMMAND_DENIED): string)))
   Command handle: (id_336[au](UNKNOWN):  command_handle)
   mem_priority2: mem_priority2 (id_368[au](20): int)
  }
}

[Test:testOutput]Sending command ACK pickup_object(20) = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 7
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:step][2:0] State change queue: ProcessImage 
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][2:0:0] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 8
[PlexilExec:step][2:1] State change queue: ProcessImage 
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][2:1:0] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'ProcessImage' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: (id_254[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_289[au](0): boolean)
 StartCondition: Boolean constant true (id_290[au](1): boolean)
 EndCondition: (id_372[au](0): childrenFinished(1:2))
 InvariantCondition: Boolean constant true (id_290[au](1): boolean)
 PreCondition: Boolean constant true (id_290[au](1): boolean)
 PostCondition: Boolean constant true (id_290[au](1): boolean)
 RepeatCondition: Boolean constant false (id_289[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_290[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_289[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_290[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_369[iu](UNKNOWN): childrenWaitingOrFinished(0:2))
 AbortCompleteCondition: Boolean constant unknown (id_291[au](UNKNOWN): boolean)
 ParentWaitingCondition: Boolean constant false (id_289[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_289[au](0): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_290[au](1): boolean)
  PickupObject{
   State: (id_294[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_289[au](0): boolean)
   StartCondition: Boolean constant true (id_290[au](1): boolean)
   EndCondition: (id_412[au](0): ((id_406[au](0): interruptibleCommandHandleValues(anonymous (id_405[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_410[au](0): ((id_408[au](1): isknown(anonymous (id_405[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_396[au](0): (IntegerValue (id_398[au](10): int) == returnValue (id_329[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_290[au](1): boolean)
   PreCondition: Boolean constant true (id_290[au](1): boolean)
   PostCondition: (id_399[au](1): (id_402[au](1): ((id_297[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_401[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_289[au](0): boolean)
   AncestorInvariantCondition: (id_379[au](1): (TransparentWrapper(id_375[auT]{1}(Boolean constant true (id_290[au](1): boolean)) && TransparentWrapper(id_377[auT]{1}(Boolean constant true (id_290[au](1): boolean)))
   AncestorEndCondition: (id_385[iu](UNKNOWN): (TransparentWrapper(id_381[iuT]{0}(Boolean constant false (id_289[au](0): boolean)) || TransparentWrapper(id_383[iuT]{0}((id_372[au](0): childrenFinished(1:2))))
   ParentExecutingCondition: (id_388[iu](UNKNOWN): ((id_254[au](EXECUTING): state(EXECUTING)) == (id_387[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_291[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_404[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_391[iu](UNKNOWN): ((id_254[au](EXECUTING): state(EXECUTING)) == (id_390[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_394[iu](UNKNOWN): ((id_254[au](EXECUTING): state(EXECUTING)) == (id_393[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_414[au](1): allCommandHandleValues(anonymous (id_405[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: (id_297[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   priority20: priority20 (id_330[au](20): int)
   returnValue: returnValue (id_329[au](-1): int)
  }
  ProcessImage{
   State: (id_333[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_334[au](SUCCESS):  outcome)
   Command handle: (id_336[au](COMMAND_DENIED):  command_handle)
   mem_priority2: mem_priority2 (id_368[au](20): int)
  }
}

[Test:testOutput]Sending command result pickup_object(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 9
[PlexilExec:step][3:0] State change queue: PickupObject 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:step][3:0:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 10
[PlexilExec:step][3:1] State change queue: PickupObject 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:step][3:1:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'PickupObject' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 11
[PlexilExec:step][3:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][3:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 12
[PlexilExec:step][3:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][3:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 13
[PlexilExec:step][3:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][3:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: (id_254[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_255[au](SUCCESS):  outcome)
  PickupObject{
   State: (id_294[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_295[au](SUCCESS):  outcome)
   Command handle: (id_297[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   priority20: priority20 (id_330[au](20): int)
   returnValue: returnValue (id_329[iu](10): int)
  }
  ProcessImage{
   State: (id_333[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_334[au](SUCCESS):  outcome)
   Command handle: (id_336[au](COMMAND_DENIED):  command_handle)
   mem_priority2: mem_priority2 (id_368[au](20): int)
  }
}

