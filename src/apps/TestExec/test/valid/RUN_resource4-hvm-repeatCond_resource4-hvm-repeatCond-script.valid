[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: SimpleTask (id_64[au](INACTIVE): state) (inf)
  C1{
   State: C1 (id_131[au](INACTIVE): state) (inf)
  }
  C2{
   State: C2 (id_190[au](INACTIVE): state) (inf)
  }
  C3{
   State: C3 (id_247[au](INACTIVE): state) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:step][1:3:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments
[Test:testOutput]Executing c1(20) into returnValue (id_181[au](-1): int) with ack C1 ack (id_185[au](UNKNOWN): string)
[Test:testOutput]Permission to execute c2 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Executing c3() into noId with ack C3 ack (id_299[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_64[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_114[au](0): boolean)
 StartCondition: Boolean constant true (id_116[au](1): boolean)
 EndCondition: (id_310[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_116[au](1): boolean)
 PreCondition: Boolean constant true (id_116[au](1): boolean)
 PostCondition: Boolean constant true (id_116[au](1): boolean)
 RepeatCondition: Boolean constant false (id_114[au](0): boolean)
 AncestorEndCondition: Boolean constant false (id_114[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_116[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_116[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_114[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_114[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_303[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_131[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_114[au](0): boolean)
   StartCondition: Boolean constant true (id_116[au](1): boolean)
   EndCondition: (id_342[au](0): ((id_336[au](0): interruptibleCommandHandleValues(C1 ack (id_185[au](UNKNOWN): string))) || (id_340[au](0): ((id_338[au](0): isknown(C1 ack (id_185[au](UNKNOWN): string))) && (id_326[au](0): (IntegerValue (id_328[au](10): int) == returnValue (id_181[au](-1): int)))))))
   InvariantCondition: Boolean constant true (id_116[au](1): boolean)
   PreCondition: Boolean constant true (id_116[au](1): boolean)
   PostCondition: (id_330[au](UNKNOWN): (id_334[au](UNKNOWN): (C1 (id_187[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_332[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_114[au](0): boolean)
   AncestorEndCondition: (id_318[au](0): (Boolean constant false (id_114[au](0): boolean) || (id_310[au](0): childrenFinished(0:3))))
   AncestorInvariantCondition: (id_316[au](1): (Boolean constant true (id_116[au](1): boolean)))Boolean constant true (id_116[au](1): boolean)))
   ParentExecutingCondition: (id_120[au](1): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_118[au](EXECUTING): state)))
   ParentFinishedCondition: (id_124[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_122[au](FINISHED): state)))
   ParentWaitingCondition: (id_128[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_126[au](WAITING): state)))
   AbortCompleteCondition: anonymous (id_320[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_323[au](0): allCommandHandleValues(C1 ack (id_185[au](UNKNOWN): string)))
   Command handle: C1 (id_187[au](UNKNOWN): command_handle)
   head_priority: head_priority (id_183[au](20): int)
   returnValue: returnValue (id_181[au](-1): int)
  }
  C2{
   State: C2 (id_190[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_114[au](0): boolean)
   StartCondition: Boolean constant true (id_116[au](1): boolean)
   EndCondition: (id_375[au](1): ((id_369[au](1): interruptibleCommandHandleValues(C2 ack (id_242[au](COMMAND_DENIED): string))) || (id_373[au](1): ((id_371[au](1): isknown(C2 ack (id_242[au](COMMAND_DENIED): string))) && Boolean constant true (id_116[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_116[au](1): boolean)
   PreCondition: Boolean constant true (id_116[au](1): boolean)
   PostCondition: (id_357[au](UNKNOWN): (id_361[au](UNKNOWN): (C2 (id_244[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: (id_363[iu](UNKNOWN): (id_367[iu](UNKNOWN): (C2 (id_244[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_365[iu](COMMAND_DENIED): command_handle))))
   AncestorEndCondition: (id_318[au](0): (Boolean constant false (id_114[au](0): boolean) || (id_310[au](0): childrenFinished(0:3))))
   AncestorInvariantCondition: (id_316[au](1): (Boolean constant true (id_116[au](1): boolean)))Boolean constant true (id_116[au](1): boolean)))
   ParentExecutingCondition: (id_120[au](1): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_118[au](EXECUTING): state)))
   ParentFinishedCondition: (id_124[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_122[au](FINISHED): state)))
   ParentWaitingCondition: (id_128[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_126[au](WAITING): state)))
   AbortCompleteCondition: anonymous (id_351[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_354[au](1): allCommandHandleValues(C2 ack (id_242[au](COMMAND_DENIED): string)))
   Command handle: C2 (id_244[au](UNKNOWN): command_handle)
   v_priority2: v_priority2 (id_240[au](25): int)
  }
  C3{
   State: C3 (id_247[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_114[au](0): boolean)
   StartCondition: Boolean constant true (id_116[au](1): boolean)
   EndCondition: (id_400[au](0): ((id_394[au](0): interruptibleCommandHandleValues(C3 ack (id_299[au](UNKNOWN): string))) || (id_398[au](0): ((id_396[au](0): isknown(C3 ack (id_299[au](UNKNOWN): string))) && Boolean constant true (id_116[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_116[au](1): boolean)
   PreCondition: Boolean constant true (id_116[au](1): boolean)
   PostCondition: (id_388[au](UNKNOWN): (id_392[au](UNKNOWN): (C3 (id_301[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_390[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_114[au](0): boolean)
   AncestorEndCondition: (id_318[au](0): (Boolean constant false (id_114[au](0): boolean) || (id_310[au](0): childrenFinished(0:3))))
   AncestorInvariantCondition: (id_316[au](1): (Boolean constant true (id_116[au](1): boolean)))Boolean constant true (id_116[au](1): boolean)))
   ParentExecutingCondition: (id_120[au](1): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_118[au](EXECUTING): state)))
   ParentFinishedCondition: (id_124[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_122[au](FINISHED): state)))
   ParentWaitingCondition: (id_128[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_126[au](WAITING): state)))
   AbortCompleteCondition: anonymous (id_382[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_385[au](0): allCommandHandleValues(C3 ack (id_299[au](UNKNOWN): string)))
   Command handle: C3 (id_301[au](UNKNOWN): command_handle)
   mem_priority2: mem_priority2 (id_297[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c1(20) = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 9
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:0] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 10
[PlexilExec:step][2:1] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 11
[PlexilExec:step][2:2] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:2:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments
[Test:testOutput]Permission to execute c2 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_64[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_114[au](0): boolean)
 StartCondition: Boolean constant true (id_116[au](1): boolean)
 EndCondition: (id_310[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_116[au](1): boolean)
 PreCondition: Boolean constant true (id_116[au](1): boolean)
 PostCondition: Boolean constant true (id_116[au](1): boolean)
 RepeatCondition: Boolean constant false (id_114[au](0): boolean)
 AncestorEndCondition: Boolean constant false (id_114[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_116[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_116[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_114[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_114[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_303[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_131[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_114[au](0): boolean)
   StartCondition: Boolean constant true (id_116[au](1): boolean)
   EndCondition: (id_342[au](0): ((id_336[au](0): interruptibleCommandHandleValues(C1 ack (id_185[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_340[au](0): ((id_338[au](1): isknown(C1 ack (id_185[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_326[au](0): (IntegerValue (id_328[au](10): int) == returnValue (id_181[au](-1): int)))))))
   InvariantCondition: Boolean constant true (id_116[au](1): boolean)
   PreCondition: Boolean constant true (id_116[au](1): boolean)
   PostCondition: (id_330[au](1): (id_334[au](1): (C1 (id_187[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_332[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_114[au](0): boolean)
   AncestorEndCondition: (id_318[au](0): (Boolean constant false (id_114[au](0): boolean) || (id_310[au](0): childrenFinished(0:3))))
   AncestorInvariantCondition: (id_316[au](1): (Boolean constant true (id_116[au](1): boolean)))Boolean constant true (id_116[au](1): boolean)))
   ParentExecutingCondition: (id_120[au](1): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_118[au](EXECUTING): state)))
   ParentFinishedCondition: (id_124[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_122[au](FINISHED): state)))
   ParentWaitingCondition: (id_128[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_126[au](WAITING): state)))
   AbortCompleteCondition: anonymous (id_320[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_323[au](1): allCommandHandleValues(C1 ack (id_185[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: C1 (id_187[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   head_priority: head_priority (id_183[au](20): int)
   returnValue: returnValue (id_181[au](-1): int)
  }
  C2{
   State: C2 (id_190[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_114[au](0): boolean)
   StartCondition: Boolean constant true (id_116[au](1): boolean)
   EndCondition: (id_375[au](1): ((id_369[au](1): interruptibleCommandHandleValues(C2 ack (id_242[au](COMMAND_DENIED): string))) || (id_373[au](1): ((id_371[au](1): isknown(C2 ack (id_242[au](COMMAND_DENIED): string))) && Boolean constant true (id_116[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_116[au](1): boolean)
   PreCondition: Boolean constant true (id_116[au](1): boolean)
   PostCondition: (id_357[au](UNKNOWN): (id_361[au](UNKNOWN): (C2 (id_244[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: (id_363[iu](UNKNOWN): (id_367[iu](UNKNOWN): (C2 (id_244[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_365[au](COMMAND_DENIED): command_handle))))
   AncestorEndCondition: (id_318[au](0): (Boolean constant false (id_114[au](0): boolean) || (id_310[au](0): childrenFinished(0:3))))
   AncestorInvariantCondition: (id_316[au](1): (Boolean constant true (id_116[au](1): boolean)))Boolean constant true (id_116[au](1): boolean)))
   ParentExecutingCondition: (id_120[au](1): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_118[au](EXECUTING): state)))
   ParentFinishedCondition: (id_124[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_122[au](FINISHED): state)))
   ParentWaitingCondition: (id_128[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_126[au](WAITING): state)))
   AbortCompleteCondition: anonymous (id_351[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_354[au](1): allCommandHandleValues(C2 ack (id_242[au](COMMAND_DENIED): string)))
   Command handle: C2 (id_244[au](UNKNOWN): command_handle)
   v_priority2: v_priority2 (id_240[au](25): int)
  }
  C3{
   State: C3 (id_247[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_114[au](0): boolean)
   StartCondition: Boolean constant true (id_116[au](1): boolean)
   EndCondition: (id_400[au](0): ((id_394[au](0): interruptibleCommandHandleValues(C3 ack (id_299[au](UNKNOWN): string))) || (id_398[au](0): ((id_396[au](0): isknown(C3 ack (id_299[au](UNKNOWN): string))) && Boolean constant true (id_116[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_116[au](1): boolean)
   PreCondition: Boolean constant true (id_116[au](1): boolean)
   PostCondition: (id_388[au](UNKNOWN): (id_392[au](UNKNOWN): (C3 (id_301[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_390[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_114[au](0): boolean)
   AncestorEndCondition: (id_318[au](0): (Boolean constant false (id_114[au](0): boolean) || (id_310[au](0): childrenFinished(0:3))))
   AncestorInvariantCondition: (id_316[au](1): (Boolean constant true (id_116[au](1): boolean)))Boolean constant true (id_116[au](1): boolean)))
   ParentExecutingCondition: (id_120[au](1): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_118[au](EXECUTING): state)))
   ParentFinishedCondition: (id_124[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_122[au](FINISHED): state)))
   ParentWaitingCondition: (id_128[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_126[au](WAITING): state)))
   AbortCompleteCondition: anonymous (id_382[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_385[au](0): allCommandHandleValues(C3 ack (id_299[au](UNKNOWN): string)))
   Command handle: C3 (id_301[au](UNKNOWN): command_handle)
   mem_priority2: mem_priority2 (id_297[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 12
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 13
[PlexilExec:step][3:0] State change queue: C2 C3 
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][3:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][3:0:1] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 14
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 15
[PlexilExec:step][3:1] State change queue: C2 C3 
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][3:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][3:1:1] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 16
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:step][3:2] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][3:2:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments
[Test:testOutput]Permission to execute c2 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_64[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_114[au](0): boolean)
 StartCondition: Boolean constant true (id_116[au](1): boolean)
 EndCondition: (id_310[au](0): childrenFinished(1:3))
 InvariantCondition: Boolean constant true (id_116[au](1): boolean)
 PreCondition: Boolean constant true (id_116[au](1): boolean)
 PostCondition: Boolean constant true (id_116[au](1): boolean)
 RepeatCondition: Boolean constant false (id_114[au](0): boolean)
 AncestorEndCondition: Boolean constant false (id_114[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_116[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_116[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_114[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_114[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_303[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_131[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_114[au](0): boolean)
   StartCondition: Boolean constant true (id_116[au](1): boolean)
   EndCondition: (id_342[au](0): ((id_336[au](0): interruptibleCommandHandleValues(C1 ack (id_185[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_340[au](0): ((id_338[au](1): isknown(C1 ack (id_185[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_326[au](0): (IntegerValue (id_328[au](10): int) == returnValue (id_181[au](-1): int)))))))
   InvariantCondition: Boolean constant true (id_116[au](1): boolean)
   PreCondition: Boolean constant true (id_116[au](1): boolean)
   PostCondition: (id_330[au](1): (id_334[au](1): (C1 (id_187[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_332[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_114[au](0): boolean)
   AncestorEndCondition: (id_318[au](0): (Boolean constant false (id_114[au](0): boolean) || (id_310[au](0): childrenFinished(1:3))))
   AncestorInvariantCondition: (id_316[au](1): (Boolean constant true (id_116[au](1): boolean)))Boolean constant true (id_116[au](1): boolean)))
   ParentExecutingCondition: (id_120[au](1): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_118[au](EXECUTING): state)))
   ParentFinishedCondition: (id_124[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_122[au](FINISHED): state)))
   ParentWaitingCondition: (id_128[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_126[au](WAITING): state)))
   AbortCompleteCondition: anonymous (id_320[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_323[au](1): allCommandHandleValues(C1 ack (id_185[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: C1 (id_187[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   head_priority: head_priority (id_183[au](20): int)
   returnValue: returnValue (id_181[au](-1): int)
  }
  C2{
   State: C2 (id_190[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_114[au](0): boolean)
   StartCondition: Boolean constant true (id_116[au](1): boolean)
   EndCondition: (id_375[au](1): ((id_369[au](1): interruptibleCommandHandleValues(C2 ack (id_242[au](COMMAND_DENIED): string))) || (id_373[au](1): ((id_371[au](1): isknown(C2 ack (id_242[au](COMMAND_DENIED): string))) && Boolean constant true (id_116[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_116[au](1): boolean)
   PreCondition: Boolean constant true (id_116[au](1): boolean)
   PostCondition: (id_357[au](UNKNOWN): (id_361[au](UNKNOWN): (C2 (id_244[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: (id_363[iu](UNKNOWN): (id_367[iu](UNKNOWN): (C2 (id_244[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_365[au](COMMAND_DENIED): command_handle))))
   AncestorEndCondition: (id_318[au](0): (Boolean constant false (id_114[au](0): boolean) || (id_310[au](0): childrenFinished(1:3))))
   AncestorInvariantCondition: (id_316[au](1): (Boolean constant true (id_116[au](1): boolean)))Boolean constant true (id_116[au](1): boolean)))
   ParentExecutingCondition: (id_120[au](1): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_118[au](EXECUTING): state)))
   ParentFinishedCondition: (id_124[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_122[au](FINISHED): state)))
   ParentWaitingCondition: (id_128[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_126[au](WAITING): state)))
   AbortCompleteCondition: anonymous (id_351[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_354[au](1): allCommandHandleValues(C2 ack (id_242[au](COMMAND_DENIED): string)))
   Command handle: C2 (id_244[au](UNKNOWN): command_handle)
   v_priority2: v_priority2 (id_240[au](25): int)
  }
  C3{
   State: C3 (id_247[au](FINISHED): state) (0)
   Outcome: C3 (id_249[au](SUCCESS): outcome)
   Command handle: C3 (id_301[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   mem_priority2: mem_priority2 (id_297[au](30): int)
  }
}

[Test:testOutput]Sending command result c1(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 17
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 18
[PlexilExec:step][4:0] State change queue: C2 C1 
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C1
[PlexilExec:step][4:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][4:0:1] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 19
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 20
[PlexilExec:step][4:1] State change queue: C2 C1 
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C1
[PlexilExec:step][4:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][4:1:1] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 21
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:step][4:2] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][4:2:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments
[Test:testOutput]Executing c2() into noId with ack C2 ack (id_242[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_64[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_114[au](0): boolean)
 StartCondition: Boolean constant true (id_116[au](1): boolean)
 EndCondition: (id_310[au](0): childrenFinished(2:3))
 InvariantCondition: Boolean constant true (id_116[au](1): boolean)
 PreCondition: Boolean constant true (id_116[au](1): boolean)
 PostCondition: Boolean constant true (id_116[au](1): boolean)
 RepeatCondition: Boolean constant false (id_114[au](0): boolean)
 AncestorEndCondition: Boolean constant false (id_114[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_116[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_116[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_114[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_114[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_303[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_131[au](FINISHED): state) (0)
   Outcome: C1 (id_133[au](SUCCESS): outcome)
   Command handle: C1 (id_187[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   head_priority: head_priority (id_183[au](20): int)
   returnValue: returnValue (id_181[iu](10): int)
  }
  C2{
   State: C2 (id_190[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_114[au](0): boolean)
   StartCondition: Boolean constant true (id_116[au](1): boolean)
   EndCondition: (id_375[au](0): ((id_369[au](0): interruptibleCommandHandleValues(C2 ack (id_242[au](UNKNOWN): string))) || (id_373[au](0): ((id_371[au](0): isknown(C2 ack (id_242[au](UNKNOWN): string))) && Boolean constant true (id_116[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_116[au](1): boolean)
   PreCondition: Boolean constant true (id_116[au](1): boolean)
   PostCondition: (id_357[au](UNKNOWN): (id_361[au](UNKNOWN): (C2 (id_244[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: (id_363[iu](UNKNOWN): (id_367[iu](UNKNOWN): (C2 (id_244[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_365[au](COMMAND_DENIED): command_handle))))
   AncestorEndCondition: (id_318[au](0): (Boolean constant false (id_114[au](0): boolean) || (id_310[au](0): childrenFinished(2:3))))
   AncestorInvariantCondition: (id_316[au](1): (Boolean constant true (id_116[au](1): boolean)))Boolean constant true (id_116[au](1): boolean)))
   ParentExecutingCondition: (id_120[au](1): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_118[au](EXECUTING): state)))
   ParentFinishedCondition: (id_124[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_122[au](FINISHED): state)))
   ParentWaitingCondition: (id_128[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_126[au](WAITING): state)))
   AbortCompleteCondition: anonymous (id_351[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_354[au](0): allCommandHandleValues(C2 ack (id_242[au](UNKNOWN): string)))
   Command handle: C2 (id_244[au](UNKNOWN): command_handle)
   v_priority2: v_priority2 (id_240[au](25): int)
  }
  C3{
   State: C3 (id_247[au](FINISHED): state) (0)
   Outcome: C3 (id_249[au](SUCCESS): outcome)
   Command handle: C3 (id_301[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   mem_priority2: mem_priority2 (id_297[au](30): int)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:performAssignments] performing 0 assignments
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_64[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_114[au](0): boolean)
 StartCondition: Boolean constant true (id_116[au](1): boolean)
 EndCondition: (id_310[au](0): childrenFinished(2:3))
 InvariantCondition: Boolean constant true (id_116[au](1): boolean)
 PreCondition: Boolean constant true (id_116[au](1): boolean)
 PostCondition: Boolean constant true (id_116[au](1): boolean)
 RepeatCondition: Boolean constant false (id_114[au](0): boolean)
 AncestorEndCondition: Boolean constant false (id_114[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_116[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_116[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_114[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_114[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_303[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  C1{
   State: C1 (id_131[au](FINISHED): state) (0)
   Outcome: C1 (id_133[au](SUCCESS): outcome)
   Command handle: C1 (id_187[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   head_priority: head_priority (id_183[au](20): int)
   returnValue: returnValue (id_181[iu](10): int)
  }
  C2{
   State: C2 (id_190[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_114[au](0): boolean)
   StartCondition: Boolean constant true (id_116[au](1): boolean)
   EndCondition: (id_375[au](0): ((id_369[au](0): interruptibleCommandHandleValues(C2 ack (id_242[au](UNKNOWN): string))) || (id_373[au](0): ((id_371[au](0): isknown(C2 ack (id_242[au](UNKNOWN): string))) && Boolean constant true (id_116[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_116[au](1): boolean)
   PreCondition: Boolean constant true (id_116[au](1): boolean)
   PostCondition: (id_357[au](UNKNOWN): (id_361[au](UNKNOWN): (C2 (id_244[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_359[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: (id_363[iu](UNKNOWN): (id_367[iu](UNKNOWN): (C2 (id_244[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_365[au](COMMAND_DENIED): command_handle))))
   AncestorEndCondition: (id_318[au](0): (Boolean constant false (id_114[au](0): boolean) || (id_310[au](0): childrenFinished(2:3))))
   AncestorInvariantCondition: (id_316[au](1): (Boolean constant true (id_116[au](1): boolean)))Boolean constant true (id_116[au](1): boolean)))
   ParentExecutingCondition: (id_120[au](1): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_118[au](EXECUTING): state)))
   ParentFinishedCondition: (id_124[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_122[au](FINISHED): state)))
   ParentWaitingCondition: (id_128[au](0): (SimpleTask (id_64[au](EXECUTING): state) == anonymous (id_126[au](WAITING): state)))
   AbortCompleteCondition: anonymous (id_351[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_354[au](0): allCommandHandleValues(C2 ack (id_242[au](UNKNOWN): string)))
   Command handle: C2 (id_244[au](UNKNOWN): command_handle)
   v_priority2: v_priority2 (id_240[au](25): int)
  }
  C3{
   State: C3 (id_247[au](FINISHED): state) (0)
   Outcome: C3 (id_249[au](SUCCESS): outcome)
   Command handle: C3 (id_301[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   mem_priority2: mem_priority2 (id_297[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c2() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 6
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 22
[PlexilExec:step][6:0] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][6:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 23
[PlexilExec:step][6:1] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][6:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 24
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:step][6:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][6:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 25
[PlexilExec:step][6:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][6:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 26
[PlexilExec:step][6:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][6:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments
[PlexilExec:cycle]==>End cycle 6
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_64[au](FINISHED): state) (0)
 Outcome: SimpleTask (id_66[au](SUCCESS): outcome)
  C1{
   State: C1 (id_131[au](FINISHED): state) (0)
   Outcome: C1 (id_133[au](SUCCESS): outcome)
   Command handle: C1 (id_187[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   head_priority: head_priority (id_183[au](20): int)
   returnValue: returnValue (id_181[iu](10): int)
  }
  C2{
   State: C2 (id_190[au](FINISHED): state) (0)
   Outcome: C2 (id_192[au](SUCCESS): outcome)
   Command handle: C2 (id_244[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   v_priority2: v_priority2 (id_240[au](25): int)
  }
  C3{
   State: C3 (id_247[au](FINISHED): state) (0)
   Outcome: C3 (id_249[au](SUCCESS): outcome)
   Command handle: C3 (id_301[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   mem_priority2: mem_priority2 (id_297[au](30): int)
  }
}

