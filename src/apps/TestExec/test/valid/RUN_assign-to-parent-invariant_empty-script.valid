[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
Parent{
 State: (id_230[au](INACTIVE): state(INACTIVE)) (inf)
  Child{
   State: (id_283[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node Parent
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Parent' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Parent' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: Parent 
[PlexilExec:lock]Locking node Parent
[PlexilExec:step][1:0:0] Transitioning node Parent
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:unlock]Unlocking node Parent
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Parent' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Parent' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: Parent 
[PlexilExec:lock]Locking node Parent
[PlexilExec:step][1:1:0] Transitioning node Parent
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:notifyNodeConditionChanged] for node Child
[PlexilExec:handleNeedsExecution]Storing action for node 'Parent' of type 'NodeList' to be executed.
[PlexilExec:unlock]Unlocking node Parent
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Parent' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node Child had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Child' for state transition.
[PlexilExec:handleConditionsChanged]Node 'Child' is an assignment node that is no longer possibly executing.  Removing it from resource contention.
[PlexilExec:handleConditionsChanged]Placing node 'Child' on the state change queue in position 3
[PlexilExec:step][1:2] State change queue: Child 
[PlexilExec:lock]Locking node Child
[PlexilExec:step][1:2:0] Transitioning node Child
[PlexilExec:notifyNodeConditionChanged] for node Child
[PlexilExec:unlock]Unlocking node Child
[PlexilExec:handleConditionsChanged]Node Child had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Child' for state transition.
[PlexilExec:handleConditionsChanged]Node 'Child' is an assignment node that could be executing.  Adding it to the resource contention list 
[PlexilExec:addToResourceContention]Adding node 'Child' to resource contention.
[PlexilExec:resolveResourceConflicts]Node 'Child' has best priority.  Adding it to be executed in position 4
[PlexilExec:step][1:3] State change queue: Child 
[PlexilExec:lock]Locking node Child
[PlexilExec:step][1:3:0] Transitioning node Child
[PlexilExec:handleNeedsExecution]Storing action for node 'Child' of type 'Assignment' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node Child
[PlexilExec:unlock]Unlocking node Child
[Test:testOutput]Assigning 'step_failed' ((id_280[au](0): boolean)) to 1
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:handleConditionsChanged]Node Child had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Child' for state transition.
[PlexilExec:handleConditionsChanged]Node 'Child' is an assignment node that is no longer possibly executing.  Removing it from resource contention.
[PlexilExec:handleConditionsChanged]Placing node 'Child' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Parent' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Parent' on the state change queue in position 6
[PlexilExec:step][1:4] State change queue: Child Parent 
[PlexilExec:lock]Locking node Child
[PlexilExec:lock]Locking node Parent
[PlexilExec:step][1:4:0] Transitioning node Child
[PlexilExec:notifyNodeConditionChanged] for node Child
[PlexilExec:step][1:4:1] Transitioning node Parent
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:unlock]Unlocking node Child
[PlexilExec:unlock]Unlocking node Parent
[PlexilExec:handleConditionsChanged]Node Child had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Child' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Removing node from resource contention.
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Parent' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Parent' on the state change queue in position 7
[PlexilExec:step][1:5] State change queue: Parent 
[PlexilExec:lock]Locking node Parent
[PlexilExec:step][1:5:0] Transitioning node Parent
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:unlock]Unlocking node Parent
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Parent' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Parent' on the state change queue in position 8
[PlexilExec:step][1:6] State change queue: Parent 
[PlexilExec:lock]Locking node Parent
[PlexilExec:step][1:6:0] Transitioning node Parent
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:unlock]Unlocking node Parent
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Parent' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
Parent{
 State: (id_230[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_231[au](FAILURE):  outcome)
 Failure type: (id_232[au](INVARIANT_CONDITION_FAILED):  failure)
 step_failed: (id_280[iu](UNKNOWN): boolean)
  Child{
   State: (id_283[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_284[au](FAILURE):  outcome)
   Failure type: (id_285[au](PARENT_FAILED):  failure)
   step_failed: (id_280[iu](UNKNOWN): boolean)
  }
}

