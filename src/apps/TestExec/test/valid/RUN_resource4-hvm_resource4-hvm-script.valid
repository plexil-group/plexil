[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: (id_262[au](INACTIVE): state(INACTIVE)) (inf)
  C1{
   State: (id_323[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C2{
   State: (id_396[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C3{
   State: (id_461[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:step][1:3:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c1(20) into returnValue (id_391[au](-1): int) with ack anonymous (id_555[au](UNKNOWN): string)
[Test:testOutput]Permission to execute c2 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Executing c3() into noId with ack anonymous (id_631[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: (id_262[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_316[au](0): boolean)
 StartCondition: Boolean constant true (id_318[au](1): boolean)
 EndCondition: (id_527[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_318[au](1): boolean)
 PreCondition: Boolean constant true (id_318[au](1): boolean)
 PostCondition: Boolean constant true (id_318[au](1): boolean)
 RepeatCondition: Boolean constant false (id_316[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_318[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_316[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_318[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_316[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_316[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_524[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: Boolean constant unknown (id_320[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_318[au](1): boolean)
  C1{
   State: (id_323[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_316[au](0): boolean)
   StartCondition: Boolean constant true (id_318[au](1): boolean)
   EndCondition: (id_562[au](0): ((id_556[au](0): interruptibleCommandHandleValues(anonymous (id_555[au](UNKNOWN): string))) || (id_560[au](0): ((id_558[au](0): isknown(anonymous (id_555[au](UNKNOWN): string))) && (id_542[au](0): (IntegerValue (id_545[au](10): int) == returnValue (id_391[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_318[au](1): boolean)
   PreCondition: Boolean constant true (id_318[au](1): boolean)
   PostCondition: (id_546[au](UNKNOWN): (id_550[au](UNKNOWN): ((id_329[au](UNKNOWN):  command_handle) == (id_548[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_316[au](0): boolean)
   AncestorInvariantCondition: (id_534[au](1): (TransparentWrapper(id_530[auT]{1}(Boolean constant true (id_318[au](1): boolean)) && TransparentWrapper(id_532[auT]{1}(Boolean constant true (id_318[au](1): boolean)))
   AncestorEndCondition: (id_540[iu](UNKNOWN): (TransparentWrapper(id_536[iuT]{0}(Boolean constant false (id_316[au](0): boolean)) || TransparentWrapper(id_538[iuT]{0}((id_527[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_380[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_378[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_384[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_382[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_388[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_386[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_320[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_553[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_564[au](0): allCommandHandleValues(anonymous (id_555[au](UNKNOWN): string)))
   Command handle: (id_329[au](UNKNOWN):  command_handle)
   head_priority: head_priority (id_393[au](20): int)
   returnValue: returnValue (id_391[au](-1): int)
  }
  C2{
   State: (id_396[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_316[au](0): boolean)
   StartCondition: Boolean constant true (id_318[au](1): boolean)
   EndCondition: (id_601[au](1): ((id_595[au](1): interruptibleCommandHandleValues(anonymous (id_594[au](COMMAND_DENIED): string))) || (id_599[au](1): ((id_597[au](1): isknown(anonymous (id_594[au](COMMAND_DENIED): string))) && Boolean constant true (id_318[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_318[au](1): boolean)
   PreCondition: Boolean constant true (id_318[au](1): boolean)
   PostCondition: (id_585[au](UNKNOWN): (id_589[au](UNKNOWN): ((id_402[au](UNKNOWN):  command_handle) == (id_587[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_316[au](0): boolean)
   AncestorInvariantCondition: (id_577[au](1): (TransparentWrapper(id_573[auT]{1}(Boolean constant true (id_318[au](1): boolean)) && TransparentWrapper(id_575[auT]{1}(Boolean constant true (id_318[au](1): boolean)))
   AncestorEndCondition: (id_583[iu](UNKNOWN): (TransparentWrapper(id_579[iuT]{0}(Boolean constant false (id_316[au](0): boolean)) || TransparentWrapper(id_581[iuT]{0}((id_527[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_451[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_378[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_453[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_382[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_455[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_386[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_320[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_592[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_603[au](1): allCommandHandleValues(anonymous (id_594[au](COMMAND_DENIED): string)))
   Command handle: (id_402[au](UNKNOWN):  command_handle)
   v_priority2: v_priority2 (id_458[au](25): int)
  }
  C3{
   State: (id_461[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_316[au](0): boolean)
   StartCondition: Boolean constant true (id_318[au](1): boolean)
   EndCondition: (id_638[au](0): ((id_632[au](0): interruptibleCommandHandleValues(anonymous (id_631[au](UNKNOWN): string))) || (id_636[au](0): ((id_634[au](0): isknown(anonymous (id_631[au](UNKNOWN): string))) && Boolean constant true (id_318[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_318[au](1): boolean)
   PreCondition: Boolean constant true (id_318[au](1): boolean)
   PostCondition: (id_622[au](UNKNOWN): (id_626[au](UNKNOWN): ((id_467[au](UNKNOWN):  command_handle) == (id_624[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_316[au](0): boolean)
   AncestorInvariantCondition: (id_614[au](1): (TransparentWrapper(id_610[auT]{1}(Boolean constant true (id_318[au](1): boolean)) && TransparentWrapper(id_612[auT]{1}(Boolean constant true (id_318[au](1): boolean)))
   AncestorEndCondition: (id_620[iu](UNKNOWN): (TransparentWrapper(id_616[iuT]{0}(Boolean constant false (id_316[au](0): boolean)) || TransparentWrapper(id_618[iuT]{0}((id_527[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_516[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_378[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_518[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_382[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_520[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_386[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_320[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_629[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_640[au](0): allCommandHandleValues(anonymous (id_631[au](UNKNOWN): string)))
   Command handle: (id_467[au](UNKNOWN):  command_handle)
   mem_priority2: mem_priority2 (id_523[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c1(20) = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 9
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:0] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 10
[PlexilExec:step][2:1] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: (id_262[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_316[au](0): boolean)
 StartCondition: Boolean constant true (id_318[au](1): boolean)
 EndCondition: (id_527[au](0): childrenFinished(1:3))
 InvariantCondition: Boolean constant true (id_318[au](1): boolean)
 PreCondition: Boolean constant true (id_318[au](1): boolean)
 PostCondition: Boolean constant true (id_318[au](1): boolean)
 RepeatCondition: Boolean constant false (id_316[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_318[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_316[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_318[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_316[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_316[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_524[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: Boolean constant unknown (id_320[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_318[au](1): boolean)
  C1{
   State: (id_323[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_316[au](0): boolean)
   StartCondition: Boolean constant true (id_318[au](1): boolean)
   EndCondition: (id_562[au](0): ((id_556[au](0): interruptibleCommandHandleValues(anonymous (id_555[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_560[au](0): ((id_558[au](1): isknown(anonymous (id_555[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_542[au](0): (IntegerValue (id_545[au](10): int) == returnValue (id_391[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_318[au](1): boolean)
   PreCondition: Boolean constant true (id_318[au](1): boolean)
   PostCondition: (id_546[au](1): (id_550[au](1): ((id_329[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_548[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_316[au](0): boolean)
   AncestorInvariantCondition: (id_534[au](1): (TransparentWrapper(id_530[auT]{1}(Boolean constant true (id_318[au](1): boolean)) && TransparentWrapper(id_532[auT]{1}(Boolean constant true (id_318[au](1): boolean)))
   AncestorEndCondition: (id_540[iu](UNKNOWN): (TransparentWrapper(id_536[iuT]{0}(Boolean constant false (id_316[au](0): boolean)) || TransparentWrapper(id_538[iuT]{0}((id_527[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_380[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_378[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_384[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_382[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_388[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_386[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_320[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_553[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_564[au](1): allCommandHandleValues(anonymous (id_555[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: (id_329[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: head_priority (id_393[au](20): int)
   returnValue: returnValue (id_391[au](-1): int)
  }
  C2{
   State: (id_396[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_398[au](FAILURE):  outcome)
   Failure type: (id_400[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_402[au](COMMAND_DENIED):  command_handle)
   v_priority2: v_priority2 (id_458[au](25): int)
  }
  C3{
   State: (id_461[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_316[au](0): boolean)
   StartCondition: Boolean constant true (id_318[au](1): boolean)
   EndCondition: (id_638[au](0): ((id_632[au](0): interruptibleCommandHandleValues(anonymous (id_631[au](UNKNOWN): string))) || (id_636[au](0): ((id_634[au](0): isknown(anonymous (id_631[au](UNKNOWN): string))) && Boolean constant true (id_318[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_318[au](1): boolean)
   PreCondition: Boolean constant true (id_318[au](1): boolean)
   PostCondition: (id_622[au](UNKNOWN): (id_626[au](UNKNOWN): ((id_467[au](UNKNOWN):  command_handle) == (id_624[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_316[au](0): boolean)
   AncestorInvariantCondition: (id_614[au](1): (TransparentWrapper(id_610[auT]{1}(Boolean constant true (id_318[au](1): boolean)) && TransparentWrapper(id_612[auT]{1}(Boolean constant true (id_318[au](1): boolean)))
   AncestorEndCondition: (id_620[iu](UNKNOWN): (TransparentWrapper(id_616[iuT]{0}(Boolean constant false (id_316[au](0): boolean)) || TransparentWrapper(id_618[iuT]{0}((id_527[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_516[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_378[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_518[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_382[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_520[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_386[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_320[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_629[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_640[au](0): allCommandHandleValues(anonymous (id_631[au](UNKNOWN): string)))
   Command handle: (id_467[au](UNKNOWN):  command_handle)
   mem_priority2: mem_priority2 (id_523[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 11
[PlexilExec:step][3:0] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][3:0:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 12
[PlexilExec:step][3:1] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][3:1:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: (id_262[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_316[au](0): boolean)
 StartCondition: Boolean constant true (id_318[au](1): boolean)
 EndCondition: (id_527[au](0): childrenFinished(2:3))
 InvariantCondition: Boolean constant true (id_318[au](1): boolean)
 PreCondition: Boolean constant true (id_318[au](1): boolean)
 PostCondition: Boolean constant true (id_318[au](1): boolean)
 RepeatCondition: Boolean constant false (id_316[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_318[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_316[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_318[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_316[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_316[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_524[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: Boolean constant unknown (id_320[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_318[au](1): boolean)
  C1{
   State: (id_323[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_316[au](0): boolean)
   StartCondition: Boolean constant true (id_318[au](1): boolean)
   EndCondition: (id_562[au](0): ((id_556[au](0): interruptibleCommandHandleValues(anonymous (id_555[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_560[au](0): ((id_558[au](1): isknown(anonymous (id_555[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_542[au](0): (IntegerValue (id_545[au](10): int) == returnValue (id_391[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_318[au](1): boolean)
   PreCondition: Boolean constant true (id_318[au](1): boolean)
   PostCondition: (id_546[au](1): (id_550[au](1): ((id_329[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_548[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_316[au](0): boolean)
   AncestorInvariantCondition: (id_534[au](1): (TransparentWrapper(id_530[auT]{1}(Boolean constant true (id_318[au](1): boolean)) && TransparentWrapper(id_532[auT]{1}(Boolean constant true (id_318[au](1): boolean)))
   AncestorEndCondition: (id_540[iu](UNKNOWN): (TransparentWrapper(id_536[iuT]{0}(Boolean constant false (id_316[au](0): boolean)) || TransparentWrapper(id_538[iuT]{0}((id_527[au](0): childrenFinished(2:3))))
   ParentExecutingCondition: (id_380[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_378[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_384[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_382[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_388[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_386[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_320[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_553[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_564[au](1): allCommandHandleValues(anonymous (id_555[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: (id_329[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: head_priority (id_393[au](20): int)
   returnValue: returnValue (id_391[au](-1): int)
  }
  C2{
   State: (id_396[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_398[au](FAILURE):  outcome)
   Failure type: (id_400[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_402[au](COMMAND_DENIED):  command_handle)
   v_priority2: v_priority2 (id_458[au](25): int)
  }
  C3{
   State: (id_461[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_463[au](SUCCESS):  outcome)
   Command handle: (id_467[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority2: mem_priority2 (id_523[au](30): int)
  }
}

[Test:testOutput]Sending command result c1(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 13
[PlexilExec:step][4:0] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][4:0:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 14
[PlexilExec:step][4:1] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][4:1:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 15
[PlexilExec:step][4:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 16
[PlexilExec:step][4:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 17
[PlexilExec:step][4:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: (id_262[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_264[au](SUCCESS):  outcome)
  C1{
   State: (id_323[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_325[au](SUCCESS):  outcome)
   Command handle: (id_329[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: head_priority (id_393[au](20): int)
   returnValue: returnValue (id_391[iu](10): int)
  }
  C2{
   State: (id_396[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_398[au](FAILURE):  outcome)
   Failure type: (id_400[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_402[au](COMMAND_DENIED):  command_handle)
   v_priority2: v_priority2 (id_458[au](25): int)
  }
  C3{
   State: (id_461[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_463[au](SUCCESS):  outcome)
   Command handle: (id_467[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority2: mem_priority2 (id_523[au](30): int)
  }
}

