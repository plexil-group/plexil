[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: (id_261[au](INACTIVE): state(INACTIVE)) (inf)
  C1{
   State: (id_313[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C2{
   State: (id_367[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C3{
   State: (id_420[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:step][1:3:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c1(20) into (id_363[au](-1): int) with ack (id_507[au](UNKNOWN): string)
[Test:testOutput]Permission to execute c2 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Executing c3() into noId with ack (id_588[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: (id_261[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_281[au](0): boolean)
 StartCondition: (id_283[au](1): boolean)
 EndCondition: (id_474[au](0): childrenFinished(0:3))
 InvariantCondition: (id_287[au](1): boolean)
 PreCondition: (id_289[au](1): boolean)
 PostCondition: (id_291[au](1): boolean)
 RepeatCondition: (id_293[au](0): boolean)
 AncestorInvariantCondition: (id_295[au](1): boolean)
 AncestorEndCondition: (id_297[au](0): boolean)
 ParentExecutingCondition: (id_299[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_471[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_303[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_305[au](0): boolean)
 ParentFinishedCondition: (id_307[au](0): boolean)
 CommandHandleReceivedCondition: (id_309[au](1): boolean)
  C1{
   State: (id_313[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_333[au](0): boolean)
   StartCondition: (id_335[au](1): boolean)
   EndCondition: (id_514[au](0): ((id_510[au](0): interruptibleCommandHandleValues((id_507[au](UNKNOWN): string))) || (id_512[au](0): ((id_508[au](0): isknown((id_507[au](UNKNOWN): string))) && (id_498[au](0): ((id_500[au](10): int) == (id_363[au](-1): int)))))
   InvariantCondition: (id_339[au](1): boolean)
   PreCondition: (id_341[au](1): boolean)
   PostCondition: (id_501[au](UNKNOWN): (id_504[au](UNKNOWN): ((id_316[au](UNKNOWN):  command_handle) == (id_503[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_345[au](0): boolean)
   AncestorInvariantCondition: (id_481[au](1): (TransparentWrapper(id_477[auT]{1}((id_295[au](1): boolean)) && TransparentWrapper(id_479[auT]{1}((id_287[au](1): boolean)))
   AncestorEndCondition: (id_487[iu](UNKNOWN): (TransparentWrapper(id_483[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_485[iuT]{0}((id_474[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_490[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_489[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_353[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_506[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_493[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_492[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_496[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_495[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_518[au](0): ((id_516[au](0): allCommandHandleValues((id_507[au](UNKNOWN): string))) && (id_361[au](1): boolean))
   Command handle: (id_316[au](UNKNOWN):  command_handle)
   head_priority: (id_364[au](20): int)
   returnValue: (id_363[au](-1): int)
  }
  C2{
   State: (id_367[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_387[au](0): boolean)
   StartCondition: (id_389[au](1): boolean)
   EndCondition: (id_555[au](1): ((id_551[au](1): interruptibleCommandHandleValues((id_548[au](COMMAND_DENIED): string))) || (id_553[au](1): ((id_549[au](1): isknown((id_548[au](COMMAND_DENIED): string))) && (id_391[au](1): boolean)))
   InvariantCondition: (id_393[au](1): boolean)
   PreCondition: (id_395[au](1): boolean)
   PostCondition: (id_542[au](UNKNOWN): (id_545[au](UNKNOWN): ((id_370[au](UNKNOWN):  command_handle) == (id_544[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_399[au](0): boolean)
   AncestorInvariantCondition: (id_528[au](1): (TransparentWrapper(id_524[auT]{1}((id_295[au](1): boolean)) && TransparentWrapper(id_526[auT]{1}((id_287[au](1): boolean)))
   AncestorEndCondition: (id_534[iu](UNKNOWN): (TransparentWrapper(id_530[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_532[iuT]{0}((id_474[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_536[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_489[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_407[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_547[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_538[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_492[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_540[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_495[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_559[au](1): ((id_557[au](1): allCommandHandleValues((id_548[au](COMMAND_DENIED): string))) && (id_415[au](1): boolean))
   Command handle: (id_370[au](UNKNOWN):  command_handle)
   v_priority2: (id_417[au](25): int)
  }
  C3{
   State: (id_420[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_440[au](0): boolean)
   StartCondition: (id_442[au](1): boolean)
   EndCondition: (id_595[au](0): ((id_591[au](0): interruptibleCommandHandleValues((id_588[au](UNKNOWN): string))) || (id_593[au](0): ((id_589[au](0): isknown((id_588[au](UNKNOWN): string))) && (id_444[au](1): boolean)))
   InvariantCondition: (id_446[au](1): boolean)
   PreCondition: (id_448[au](1): boolean)
   PostCondition: (id_582[au](UNKNOWN): (id_585[au](UNKNOWN): ((id_423[au](UNKNOWN):  command_handle) == (id_584[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_452[au](0): boolean)
   AncestorInvariantCondition: (id_568[au](1): (TransparentWrapper(id_564[auT]{1}((id_295[au](1): boolean)) && TransparentWrapper(id_566[auT]{1}((id_287[au](1): boolean)))
   AncestorEndCondition: (id_574[iu](UNKNOWN): (TransparentWrapper(id_570[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_572[iuT]{0}((id_474[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_576[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_489[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_460[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_587[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_578[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_492[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_580[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_495[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_599[au](0): ((id_597[au](0): allCommandHandleValues((id_588[au](UNKNOWN): string))) && (id_468[au](1): boolean))
   Command handle: (id_423[au](UNKNOWN):  command_handle)
   mem_priority2: (id_470[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c1(20) = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 9
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:0] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 10
[PlexilExec:step][2:1] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: (id_261[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_281[au](0): boolean)
 StartCondition: (id_283[au](1): boolean)
 EndCondition: (id_474[au](0): childrenFinished(1:3))
 InvariantCondition: (id_287[au](1): boolean)
 PreCondition: (id_289[au](1): boolean)
 PostCondition: (id_291[au](1): boolean)
 RepeatCondition: (id_293[au](0): boolean)
 AncestorInvariantCondition: (id_295[au](1): boolean)
 AncestorEndCondition: (id_297[au](0): boolean)
 ParentExecutingCondition: (id_299[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_471[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_303[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_305[au](0): boolean)
 ParentFinishedCondition: (id_307[au](0): boolean)
 CommandHandleReceivedCondition: (id_309[au](1): boolean)
  C1{
   State: (id_313[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_333[au](0): boolean)
   StartCondition: (id_335[au](1): boolean)
   EndCondition: (id_514[au](0): ((id_510[au](0): interruptibleCommandHandleValues((id_507[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_512[au](0): ((id_508[au](1): isknown((id_507[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_498[au](0): ((id_500[au](10): int) == (id_363[au](-1): int)))))
   InvariantCondition: (id_339[au](1): boolean)
   PreCondition: (id_341[au](1): boolean)
   PostCondition: (id_501[au](1): (id_504[au](1): ((id_316[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_503[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_345[au](0): boolean)
   AncestorInvariantCondition: (id_481[au](1): (TransparentWrapper(id_477[auT]{1}((id_295[au](1): boolean)) && TransparentWrapper(id_479[auT]{1}((id_287[au](1): boolean)))
   AncestorEndCondition: (id_487[iu](UNKNOWN): (TransparentWrapper(id_483[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_485[iuT]{0}((id_474[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_490[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_489[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_353[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_506[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_493[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_492[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_496[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_495[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_518[au](1): ((id_516[au](1): allCommandHandleValues((id_507[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_361[au](1): boolean))
   Command handle: (id_316[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: (id_364[au](20): int)
   returnValue: (id_363[au](-1): int)
  }
  C2{
   State: (id_367[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_368[au](FAILURE):  outcome)
   Failure type: (id_369[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_370[au](COMMAND_DENIED):  command_handle)
   v_priority2: (id_417[au](25): int)
  }
  C3{
   State: (id_420[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_440[au](0): boolean)
   StartCondition: (id_442[au](1): boolean)
   EndCondition: (id_595[au](0): ((id_591[au](0): interruptibleCommandHandleValues((id_588[au](UNKNOWN): string))) || (id_593[au](0): ((id_589[au](0): isknown((id_588[au](UNKNOWN): string))) && (id_444[au](1): boolean)))
   InvariantCondition: (id_446[au](1): boolean)
   PreCondition: (id_448[au](1): boolean)
   PostCondition: (id_582[au](UNKNOWN): (id_585[au](UNKNOWN): ((id_423[au](UNKNOWN):  command_handle) == (id_584[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_452[au](0): boolean)
   AncestorInvariantCondition: (id_568[au](1): (TransparentWrapper(id_564[auT]{1}((id_295[au](1): boolean)) && TransparentWrapper(id_566[auT]{1}((id_287[au](1): boolean)))
   AncestorEndCondition: (id_574[iu](UNKNOWN): (TransparentWrapper(id_570[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_572[iuT]{0}((id_474[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_576[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_489[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_460[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_587[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_578[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_492[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_580[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_495[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_599[au](0): ((id_597[au](0): allCommandHandleValues((id_588[au](UNKNOWN): string))) && (id_468[au](1): boolean))
   Command handle: (id_423[au](UNKNOWN):  command_handle)
   mem_priority2: (id_470[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 11
[PlexilExec:step][3:0] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][3:0:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 12
[PlexilExec:step][3:1] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][3:1:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: (id_261[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_281[au](0): boolean)
 StartCondition: (id_283[au](1): boolean)
 EndCondition: (id_474[au](0): childrenFinished(2:3))
 InvariantCondition: (id_287[au](1): boolean)
 PreCondition: (id_289[au](1): boolean)
 PostCondition: (id_291[au](1): boolean)
 RepeatCondition: (id_293[au](0): boolean)
 AncestorInvariantCondition: (id_295[au](1): boolean)
 AncestorEndCondition: (id_297[au](0): boolean)
 ParentExecutingCondition: (id_299[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_471[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_303[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_305[au](0): boolean)
 ParentFinishedCondition: (id_307[au](0): boolean)
 CommandHandleReceivedCondition: (id_309[au](1): boolean)
  C1{
   State: (id_313[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_333[au](0): boolean)
   StartCondition: (id_335[au](1): boolean)
   EndCondition: (id_514[au](0): ((id_510[au](0): interruptibleCommandHandleValues((id_507[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_512[au](0): ((id_508[au](1): isknown((id_507[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_498[au](0): ((id_500[au](10): int) == (id_363[au](-1): int)))))
   InvariantCondition: (id_339[au](1): boolean)
   PreCondition: (id_341[au](1): boolean)
   PostCondition: (id_501[au](1): (id_504[au](1): ((id_316[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_503[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_345[au](0): boolean)
   AncestorInvariantCondition: (id_481[au](1): (TransparentWrapper(id_477[auT]{1}((id_295[au](1): boolean)) && TransparentWrapper(id_479[auT]{1}((id_287[au](1): boolean)))
   AncestorEndCondition: (id_487[iu](UNKNOWN): (TransparentWrapper(id_483[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_485[iuT]{0}((id_474[au](0): childrenFinished(2:3))))
   ParentExecutingCondition: (id_490[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_489[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_353[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_506[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_493[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_492[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_496[iu](UNKNOWN): ((id_261[au](EXECUTING): state(EXECUTING)) == (id_495[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_518[au](1): ((id_516[au](1): allCommandHandleValues((id_507[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_361[au](1): boolean))
   Command handle: (id_316[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: (id_364[au](20): int)
   returnValue: (id_363[au](-1): int)
  }
  C2{
   State: (id_367[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_368[au](FAILURE):  outcome)
   Failure type: (id_369[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_370[au](COMMAND_DENIED):  command_handle)
   v_priority2: (id_417[au](25): int)
  }
  C3{
   State: (id_420[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_421[au](SUCCESS):  outcome)
   Command handle: (id_423[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority2: (id_470[au](30): int)
  }
}

[Test:testOutput]Sending command result c1(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 13
[PlexilExec:step][4:0] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][4:0:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 14
[PlexilExec:step][4:1] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][4:1:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 15
[PlexilExec:step][4:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 16
[PlexilExec:step][4:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 17
[PlexilExec:step][4:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: (id_261[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_262[au](SUCCESS):  outcome)
  C1{
   State: (id_313[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_314[au](SUCCESS):  outcome)
   Command handle: (id_316[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: (id_364[au](20): int)
   returnValue: (id_363[iu](10): int)
  }
  C2{
   State: (id_367[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_368[au](FAILURE):  outcome)
   Failure type: (id_369[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_370[au](COMMAND_DENIED):  command_handle)
   v_priority2: (id_417[au](25): int)
  }
  C3{
   State: (id_420[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_421[au](SUCCESS):  outcome)
   Command handle: (id_423[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority2: (id_470[au](30): int)
  }
}

