[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: (id_262[au](INACTIVE): state(INACTIVE)) (inf)
  C1{
   State: (id_302[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C2{
   State: (id_341[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C3{
   State: (id_379[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C2 C3 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:step][1:3:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c1(20) into (id_337[au](-1): int) with ack (id_451[au](UNKNOWN): string)
[Test:testOutput]Permission to execute c2 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Executing c3() into noId with ack (id_528[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: (id_262[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_297[au](0): boolean)
 StartCondition: (id_298[au](1): boolean)
 EndCondition: (id_418[au](0): childrenFinished(0:3))
 InvariantCondition: (id_298[au](1): boolean)
 PreCondition: (id_298[au](1): boolean)
 PostCondition: (id_298[au](1): boolean)
 RepeatCondition: (id_297[au](0): boolean)
 AncestorInvariantCondition: (id_298[au](1): boolean)
 AncestorEndCondition: (id_297[au](0): boolean)
 ParentExecutingCondition: (id_298[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_415[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_299[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_297[au](0): boolean)
 ParentFinishedCondition: (id_297[au](0): boolean)
 CommandHandleReceivedCondition: (id_298[au](1): boolean)
  C1{
   State: (id_302[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_297[au](0): boolean)
   StartCondition: (id_298[au](1): boolean)
   EndCondition: (id_458[au](0): ((id_452[au](0): interruptibleCommandHandleValues((id_451[au](UNKNOWN): string))) || (id_456[au](0): ((id_454[au](0): isknown((id_451[au](UNKNOWN): string))) && (id_442[au](0): ((id_444[au](10): int) == (id_337[au](-1): int)))))
   InvariantCondition: (id_298[au](1): boolean)
   PreCondition: (id_298[au](1): boolean)
   PostCondition: (id_445[au](UNKNOWN): (id_448[au](UNKNOWN): ((id_305[au](UNKNOWN):  command_handle) == (id_447[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_297[au](0): boolean)
   AncestorInvariantCondition: (id_425[au](1): (TransparentWrapper(id_421[auT]{1}((id_298[au](1): boolean)) && TransparentWrapper(id_423[auT]{1}((id_298[au](1): boolean)))
   AncestorEndCondition: (id_431[iu](UNKNOWN): (TransparentWrapper(id_427[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_429[iuT]{0}((id_418[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_434[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_433[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_299[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_450[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_437[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_436[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_440[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_439[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_460[au](0): allCommandHandleValues((id_451[au](UNKNOWN): string)))
   Command handle: (id_305[au](UNKNOWN):  command_handle)
   head_priority: (id_338[au](20): int)
   returnValue: (id_337[au](-1): int)
  }
  C2{
   State: (id_341[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_297[au](0): boolean)
   StartCondition: (id_298[au](1): boolean)
   EndCondition: (id_497[au](1): ((id_491[au](1): interruptibleCommandHandleValues((id_490[au](COMMAND_DENIED): string))) || (id_495[au](1): ((id_493[au](1): isknown((id_490[au](COMMAND_DENIED): string))) && (id_298[au](1): boolean)))
   InvariantCondition: (id_298[au](1): boolean)
   PreCondition: (id_298[au](1): boolean)
   PostCondition: (id_484[au](UNKNOWN): (id_487[au](UNKNOWN): ((id_344[au](UNKNOWN):  command_handle) == (id_486[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_297[au](0): boolean)
   AncestorInvariantCondition: (id_470[au](1): (TransparentWrapper(id_466[auT]{1}((id_298[au](1): boolean)) && TransparentWrapper(id_468[auT]{1}((id_298[au](1): boolean)))
   AncestorEndCondition: (id_476[iu](UNKNOWN): (TransparentWrapper(id_472[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_474[iuT]{0}((id_418[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_478[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_433[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_299[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_489[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_480[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_436[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_482[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_439[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_499[au](1): allCommandHandleValues((id_490[au](COMMAND_DENIED): string)))
   Command handle: (id_344[au](UNKNOWN):  command_handle)
   v_priority2: (id_376[au](25): int)
  }
  C3{
   State: (id_379[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_297[au](0): boolean)
   StartCondition: (id_298[au](1): boolean)
   EndCondition: (id_535[au](0): ((id_529[au](0): interruptibleCommandHandleValues((id_528[au](UNKNOWN): string))) || (id_533[au](0): ((id_531[au](0): isknown((id_528[au](UNKNOWN): string))) && (id_298[au](1): boolean)))
   InvariantCondition: (id_298[au](1): boolean)
   PreCondition: (id_298[au](1): boolean)
   PostCondition: (id_522[au](UNKNOWN): (id_525[au](UNKNOWN): ((id_382[au](UNKNOWN):  command_handle) == (id_524[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_297[au](0): boolean)
   AncestorInvariantCondition: (id_508[au](1): (TransparentWrapper(id_504[auT]{1}((id_298[au](1): boolean)) && TransparentWrapper(id_506[auT]{1}((id_298[au](1): boolean)))
   AncestorEndCondition: (id_514[iu](UNKNOWN): (TransparentWrapper(id_510[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_512[iuT]{0}((id_418[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_516[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_433[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_299[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_527[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_518[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_436[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_520[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_439[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_537[au](0): allCommandHandleValues((id_528[au](UNKNOWN): string)))
   Command handle: (id_382[au](UNKNOWN):  command_handle)
   mem_priority2: (id_414[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c1(20) = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 9
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:0] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 10
[PlexilExec:step][2:1] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][2:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: (id_262[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_297[au](0): boolean)
 StartCondition: (id_298[au](1): boolean)
 EndCondition: (id_418[au](0): childrenFinished(1:3))
 InvariantCondition: (id_298[au](1): boolean)
 PreCondition: (id_298[au](1): boolean)
 PostCondition: (id_298[au](1): boolean)
 RepeatCondition: (id_297[au](0): boolean)
 AncestorInvariantCondition: (id_298[au](1): boolean)
 AncestorEndCondition: (id_297[au](0): boolean)
 ParentExecutingCondition: (id_298[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_415[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_299[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_297[au](0): boolean)
 ParentFinishedCondition: (id_297[au](0): boolean)
 CommandHandleReceivedCondition: (id_298[au](1): boolean)
  C1{
   State: (id_302[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_297[au](0): boolean)
   StartCondition: (id_298[au](1): boolean)
   EndCondition: (id_458[au](0): ((id_452[au](0): interruptibleCommandHandleValues((id_451[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_456[au](0): ((id_454[au](1): isknown((id_451[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_442[au](0): ((id_444[au](10): int) == (id_337[au](-1): int)))))
   InvariantCondition: (id_298[au](1): boolean)
   PreCondition: (id_298[au](1): boolean)
   PostCondition: (id_445[au](1): (id_448[au](1): ((id_305[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_447[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_297[au](0): boolean)
   AncestorInvariantCondition: (id_425[au](1): (TransparentWrapper(id_421[auT]{1}((id_298[au](1): boolean)) && TransparentWrapper(id_423[auT]{1}((id_298[au](1): boolean)))
   AncestorEndCondition: (id_431[iu](UNKNOWN): (TransparentWrapper(id_427[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_429[iuT]{0}((id_418[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_434[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_433[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_299[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_450[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_437[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_436[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_440[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_439[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_460[au](1): allCommandHandleValues((id_451[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: (id_305[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: (id_338[au](20): int)
   returnValue: (id_337[au](-1): int)
  }
  C2{
   State: (id_341[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_342[au](FAILURE):  outcome)
   Failure type: (id_343[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_344[au](COMMAND_DENIED):  command_handle)
   v_priority2: (id_376[au](25): int)
  }
  C3{
   State: (id_379[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_297[au](0): boolean)
   StartCondition: (id_298[au](1): boolean)
   EndCondition: (id_535[au](0): ((id_529[au](0): interruptibleCommandHandleValues((id_528[au](UNKNOWN): string))) || (id_533[au](0): ((id_531[au](0): isknown((id_528[au](UNKNOWN): string))) && (id_298[au](1): boolean)))
   InvariantCondition: (id_298[au](1): boolean)
   PreCondition: (id_298[au](1): boolean)
   PostCondition: (id_522[au](UNKNOWN): (id_525[au](UNKNOWN): ((id_382[au](UNKNOWN):  command_handle) == (id_524[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_297[au](0): boolean)
   AncestorInvariantCondition: (id_508[au](1): (TransparentWrapper(id_504[auT]{1}((id_298[au](1): boolean)) && TransparentWrapper(id_506[auT]{1}((id_298[au](1): boolean)))
   AncestorEndCondition: (id_514[iu](UNKNOWN): (TransparentWrapper(id_510[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_512[iuT]{0}((id_418[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_516[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_433[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_299[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_527[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_518[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_436[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_520[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_439[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_537[au](0): allCommandHandleValues((id_528[au](UNKNOWN): string)))
   Command handle: (id_382[au](UNKNOWN):  command_handle)
   mem_priority2: (id_414[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 11
[PlexilExec:step][3:0] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][3:0:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 12
[PlexilExec:step][3:1] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][3:1:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: (id_262[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_297[au](0): boolean)
 StartCondition: (id_298[au](1): boolean)
 EndCondition: (id_418[au](0): childrenFinished(2:3))
 InvariantCondition: (id_298[au](1): boolean)
 PreCondition: (id_298[au](1): boolean)
 PostCondition: (id_298[au](1): boolean)
 RepeatCondition: (id_297[au](0): boolean)
 AncestorInvariantCondition: (id_298[au](1): boolean)
 AncestorEndCondition: (id_297[au](0): boolean)
 ParentExecutingCondition: (id_298[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_415[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_299[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_297[au](0): boolean)
 ParentFinishedCondition: (id_297[au](0): boolean)
 CommandHandleReceivedCondition: (id_298[au](1): boolean)
  C1{
   State: (id_302[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_297[au](0): boolean)
   StartCondition: (id_298[au](1): boolean)
   EndCondition: (id_458[au](0): ((id_452[au](0): interruptibleCommandHandleValues((id_451[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_456[au](0): ((id_454[au](1): isknown((id_451[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_442[au](0): ((id_444[au](10): int) == (id_337[au](-1): int)))))
   InvariantCondition: (id_298[au](1): boolean)
   PreCondition: (id_298[au](1): boolean)
   PostCondition: (id_445[au](1): (id_448[au](1): ((id_305[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_447[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_297[au](0): boolean)
   AncestorInvariantCondition: (id_425[au](1): (TransparentWrapper(id_421[auT]{1}((id_298[au](1): boolean)) && TransparentWrapper(id_423[auT]{1}((id_298[au](1): boolean)))
   AncestorEndCondition: (id_431[iu](UNKNOWN): (TransparentWrapper(id_427[iuT]{0}((id_297[au](0): boolean)) || TransparentWrapper(id_429[iuT]{0}((id_418[au](0): childrenFinished(2:3))))
   ParentExecutingCondition: (id_434[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_433[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_299[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_450[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_437[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_436[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_440[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_439[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_460[au](1): allCommandHandleValues((id_451[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: (id_305[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: (id_338[au](20): int)
   returnValue: (id_337[au](-1): int)
  }
  C2{
   State: (id_341[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_342[au](FAILURE):  outcome)
   Failure type: (id_343[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_344[au](COMMAND_DENIED):  command_handle)
   v_priority2: (id_376[au](25): int)
  }
  C3{
   State: (id_379[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_380[au](SUCCESS):  outcome)
   Command handle: (id_382[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority2: (id_414[au](30): int)
  }
}

[Test:testOutput]Sending command result c1(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 13
[PlexilExec:step][4:0] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][4:0:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 14
[PlexilExec:step][4:1] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][4:1:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 15
[PlexilExec:step][4:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 16
[PlexilExec:step][4:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 17
[PlexilExec:step][4:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: (id_262[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_263[au](SUCCESS):  outcome)
  C1{
   State: (id_302[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_303[au](SUCCESS):  outcome)
   Command handle: (id_305[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: (id_338[au](20): int)
   returnValue: (id_337[iu](10): int)
  }
  C2{
   State: (id_341[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_342[au](FAILURE):  outcome)
   Failure type: (id_343[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_344[au](COMMAND_DENIED):  command_handle)
   v_priority2: (id_376[au](25): int)
  }
  C3{
   State: (id_379[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_380[au](SUCCESS):  outcome)
   Command handle: (id_382[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority2: (id_414[au](30): int)
  }
}

