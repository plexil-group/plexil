[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: (id_267[au](INACTIVE): state(INACTIVE)) (inf)
  PickupObject{
   State: (id_328[au](INACTIVE): state(INACTIVE)) (inf)
  }
  ProcessImage{
   State: (id_401[au](INACTIVE): state(INACTIVE)) (inf)
  }
  TakePicture{
   State: (id_466[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: PickupObject ProcessImage TakePicture 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][1:2:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:step][1:2:1] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:step][1:2:2] Transitioning node TakePicture
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: PickupObject ProcessImage TakePicture 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][1:3:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:handleNeedsExecution]Storing action for node 'PickupObject' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:handleNeedsExecution]Storing action for node 'ProcessImage' of type 'Command' to be executed.
[PlexilExec:step][1:3:2] Transitioning node TakePicture
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:handleNeedsExecution]Storing action for node 'TakePicture' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'PickupObject' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'ProcessImage' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'TakePicture' was previously eligible to transition but isn't now.
[Test:testOutput]Executing pickup_object(20) into returnValue (id_396[au](-1): int) with ack anonymous (id_560[au](UNKNOWN): string)
[Test:testOutput]Permission to execute process_image has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[Test:testOutput]Executing take_picture() into noId with ack anonymous (id_646[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: (id_267[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_321[au](0): boolean)
 StartCondition: Boolean constant true (id_323[au](1): boolean)
 EndCondition: (id_532[au](0): childrenFinished(0:3))
 InvariantCondition: Boolean constant true (id_323[au](1): boolean)
 PreCondition: Boolean constant true (id_323[au](1): boolean)
 PostCondition: Boolean constant true (id_323[au](1): boolean)
 RepeatCondition: Boolean constant false (id_321[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_323[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_321[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_323[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_321[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_321[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_529[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: Boolean constant unknown (id_325[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_323[au](1): boolean)
  PickupObject{
   State: (id_328[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_321[au](0): boolean)
   StartCondition: Boolean constant true (id_323[au](1): boolean)
   EndCondition: (id_567[au](0): ((id_561[au](0): interruptibleCommandHandleValues(anonymous (id_560[au](UNKNOWN): string))) || (id_565[au](0): ((id_563[au](0): isknown(anonymous (id_560[au](UNKNOWN): string))) && (id_547[au](0): (IntegerValue (id_550[au](10): int) == returnValue (id_396[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_323[au](1): boolean)
   PreCondition: Boolean constant true (id_323[au](1): boolean)
   PostCondition: (id_551[au](UNKNOWN): (id_555[au](UNKNOWN): ((id_334[au](UNKNOWN):  command_handle) == (id_553[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_321[au](0): boolean)
   AncestorInvariantCondition: (id_539[au](1): (TransparentWrapper(id_535[auT]{1}(Boolean constant true (id_323[au](1): boolean)) && TransparentWrapper(id_537[auT]{1}(Boolean constant true (id_323[au](1): boolean)))
   AncestorEndCondition: (id_545[iu](UNKNOWN): (TransparentWrapper(id_541[iuT]{0}(Boolean constant false (id_321[au](0): boolean)) || TransparentWrapper(id_543[iuT]{0}((id_532[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_385[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_383[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_389[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_387[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_393[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_391[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_325[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_558[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_569[au](0): allCommandHandleValues(anonymous (id_560[au](UNKNOWN): string)))
   Command handle: (id_334[au](UNKNOWN):  command_handle)
   priority10: priority10 (id_398[au](10): int)
   returnValue: returnValue (id_396[au](-1): int)
  }
  ProcessImage{
   State: (id_401[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_321[au](0): boolean)
   StartCondition: Boolean constant true (id_323[au](1): boolean)
   EndCondition: (id_612[au](1): ((id_606[au](1): interruptibleCommandHandleValues(anonymous (id_605[au](COMMAND_DENIED): string))) || (id_610[au](1): ((id_608[au](1): isknown(anonymous (id_605[au](COMMAND_DENIED): string))) && Boolean constant true (id_323[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_323[au](1): boolean)
   PreCondition: Boolean constant true (id_323[au](1): boolean)
   PostCondition: (id_596[au](UNKNOWN): (id_600[au](UNKNOWN): ((id_407[au](UNKNOWN):  command_handle) == (id_598[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_321[au](0): boolean)
   AncestorInvariantCondition: (id_588[au](1): (TransparentWrapper(id_584[auT]{1}(Boolean constant true (id_323[au](1): boolean)) && TransparentWrapper(id_586[auT]{1}(Boolean constant true (id_323[au](1): boolean)))
   AncestorEndCondition: (id_594[iu](UNKNOWN): (TransparentWrapper(id_590[iuT]{0}(Boolean constant false (id_321[au](0): boolean)) || TransparentWrapper(id_592[iuT]{0}((id_532[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_456[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_383[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_458[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_387[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_460[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_391[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_325[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_603[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_614[au](1): allCommandHandleValues(anonymous (id_605[au](COMMAND_DENIED): string)))
   Command handle: (id_407[au](UNKNOWN):  command_handle)
   priority30: priority30 (id_463[au](30): int)
  }
  TakePicture{
   State: (id_466[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_321[au](0): boolean)
   StartCondition: Boolean constant true (id_323[au](1): boolean)
   EndCondition: (id_653[au](0): ((id_647[au](0): interruptibleCommandHandleValues(anonymous (id_646[au](UNKNOWN): string))) || (id_651[au](0): ((id_649[au](0): isknown(anonymous (id_646[au](UNKNOWN): string))) && Boolean constant true (id_323[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_323[au](1): boolean)
   PreCondition: Boolean constant true (id_323[au](1): boolean)
   PostCondition: (id_637[au](UNKNOWN): (id_641[au](UNKNOWN): ((id_472[au](UNKNOWN):  command_handle) == (id_639[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_321[au](0): boolean)
   AncestorInvariantCondition: (id_629[au](1): (TransparentWrapper(id_625[auT]{1}(Boolean constant true (id_323[au](1): boolean)) && TransparentWrapper(id_627[auT]{1}(Boolean constant true (id_323[au](1): boolean)))
   AncestorEndCondition: (id_635[iu](UNKNOWN): (TransparentWrapper(id_631[iuT]{0}(Boolean constant false (id_321[au](0): boolean)) || TransparentWrapper(id_633[iuT]{0}((id_532[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_521[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_383[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_523[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_387[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_525[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_391[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_325[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_644[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_655[au](0): allCommandHandleValues(anonymous (id_646[au](UNKNOWN): string)))
   Command handle: (id_472[au](UNKNOWN):  command_handle)
   v_priority: v_priority (id_528[au](10): int)
  }
}

[Test:testOutput]Sending command ACK pickup_object(20) = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 9
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:step][2:0] State change queue: ProcessImage 
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][2:0:0] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 10
[PlexilExec:step][2:1] State change queue: ProcessImage 
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][2:1:0] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'ProcessImage' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: (id_267[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_321[au](0): boolean)
 StartCondition: Boolean constant true (id_323[au](1): boolean)
 EndCondition: (id_532[au](0): childrenFinished(1:3))
 InvariantCondition: Boolean constant true (id_323[au](1): boolean)
 PreCondition: Boolean constant true (id_323[au](1): boolean)
 PostCondition: Boolean constant true (id_323[au](1): boolean)
 RepeatCondition: Boolean constant false (id_321[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_323[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_321[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_323[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_321[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_321[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_529[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: Boolean constant unknown (id_325[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_323[au](1): boolean)
  PickupObject{
   State: (id_328[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_321[au](0): boolean)
   StartCondition: Boolean constant true (id_323[au](1): boolean)
   EndCondition: (id_567[au](0): ((id_561[au](0): interruptibleCommandHandleValues(anonymous (id_560[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_565[au](0): ((id_563[au](1): isknown(anonymous (id_560[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_547[au](0): (IntegerValue (id_550[au](10): int) == returnValue (id_396[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_323[au](1): boolean)
   PreCondition: Boolean constant true (id_323[au](1): boolean)
   PostCondition: (id_551[au](1): (id_555[au](1): ((id_334[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_553[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_321[au](0): boolean)
   AncestorInvariantCondition: (id_539[au](1): (TransparentWrapper(id_535[auT]{1}(Boolean constant true (id_323[au](1): boolean)) && TransparentWrapper(id_537[auT]{1}(Boolean constant true (id_323[au](1): boolean)))
   AncestorEndCondition: (id_545[iu](UNKNOWN): (TransparentWrapper(id_541[iuT]{0}(Boolean constant false (id_321[au](0): boolean)) || TransparentWrapper(id_543[iuT]{0}((id_532[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_385[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_383[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_389[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_387[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_393[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_391[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_325[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_558[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_569[au](1): allCommandHandleValues(anonymous (id_560[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: (id_334[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   priority10: priority10 (id_398[au](10): int)
   returnValue: returnValue (id_396[au](-1): int)
  }
  ProcessImage{
   State: (id_401[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_403[au](FAILURE):  outcome)
   Failure type: (id_405[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_407[au](COMMAND_DENIED):  command_handle)
   priority30: priority30 (id_463[au](30): int)
  }
  TakePicture{
   State: (id_466[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_321[au](0): boolean)
   StartCondition: Boolean constant true (id_323[au](1): boolean)
   EndCondition: (id_653[au](0): ((id_647[au](0): interruptibleCommandHandleValues(anonymous (id_646[au](UNKNOWN): string))) || (id_651[au](0): ((id_649[au](0): isknown(anonymous (id_646[au](UNKNOWN): string))) && Boolean constant true (id_323[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_323[au](1): boolean)
   PreCondition: Boolean constant true (id_323[au](1): boolean)
   PostCondition: (id_637[au](UNKNOWN): (id_641[au](UNKNOWN): ((id_472[au](UNKNOWN):  command_handle) == (id_639[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_321[au](0): boolean)
   AncestorInvariantCondition: (id_629[au](1): (TransparentWrapper(id_625[auT]{1}(Boolean constant true (id_323[au](1): boolean)) && TransparentWrapper(id_627[auT]{1}(Boolean constant true (id_323[au](1): boolean)))
   AncestorEndCondition: (id_635[iu](UNKNOWN): (TransparentWrapper(id_631[iuT]{0}(Boolean constant false (id_321[au](0): boolean)) || TransparentWrapper(id_633[iuT]{0}((id_532[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_521[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_383[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_523[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_387[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_525[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_391[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_325[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_644[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_655[au](0): allCommandHandleValues(anonymous (id_646[au](UNKNOWN): string)))
   Command handle: (id_472[au](UNKNOWN):  command_handle)
   v_priority: v_priority (id_528[au](10): int)
  }
}

[Test:testOutput]Sending command ACK take_picture() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 11
[PlexilExec:step][3:0] State change queue: TakePicture 
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][3:0:0] Transitioning node TakePicture
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 12
[PlexilExec:step][3:1] State change queue: TakePicture 
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][3:1:0] Transitioning node TakePicture
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'TakePicture' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: (id_267[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_321[au](0): boolean)
 StartCondition: Boolean constant true (id_323[au](1): boolean)
 EndCondition: (id_532[au](0): childrenFinished(2:3))
 InvariantCondition: Boolean constant true (id_323[au](1): boolean)
 PreCondition: Boolean constant true (id_323[au](1): boolean)
 PostCondition: Boolean constant true (id_323[au](1): boolean)
 RepeatCondition: Boolean constant false (id_321[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_323[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_321[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_323[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_321[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_321[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_529[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: Boolean constant unknown (id_325[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_323[au](1): boolean)
  PickupObject{
   State: (id_328[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_321[au](0): boolean)
   StartCondition: Boolean constant true (id_323[au](1): boolean)
   EndCondition: (id_567[au](0): ((id_561[au](0): interruptibleCommandHandleValues(anonymous (id_560[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_565[au](0): ((id_563[au](1): isknown(anonymous (id_560[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_547[au](0): (IntegerValue (id_550[au](10): int) == returnValue (id_396[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_323[au](1): boolean)
   PreCondition: Boolean constant true (id_323[au](1): boolean)
   PostCondition: (id_551[au](1): (id_555[au](1): ((id_334[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_553[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_321[au](0): boolean)
   AncestorInvariantCondition: (id_539[au](1): (TransparentWrapper(id_535[auT]{1}(Boolean constant true (id_323[au](1): boolean)) && TransparentWrapper(id_537[auT]{1}(Boolean constant true (id_323[au](1): boolean)))
   AncestorEndCondition: (id_545[iu](UNKNOWN): (TransparentWrapper(id_541[iuT]{0}(Boolean constant false (id_321[au](0): boolean)) || TransparentWrapper(id_543[iuT]{0}((id_532[au](0): childrenFinished(2:3))))
   ParentExecutingCondition: (id_385[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_383[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_389[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_387[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_393[iu](UNKNOWN): ((id_267[au](EXECUTING): state(EXECUTING)) == (id_391[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_325[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_558[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_569[au](1): allCommandHandleValues(anonymous (id_560[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: (id_334[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   priority10: priority10 (id_398[au](10): int)
   returnValue: returnValue (id_396[au](-1): int)
  }
  ProcessImage{
   State: (id_401[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_403[au](FAILURE):  outcome)
   Failure type: (id_405[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_407[au](COMMAND_DENIED):  command_handle)
   priority30: priority30 (id_463[au](30): int)
  }
  TakePicture{
   State: (id_466[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_468[au](SUCCESS):  outcome)
   Command handle: (id_472[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   v_priority: v_priority (id_528[au](10): int)
  }
}

[Test:testOutput]Sending command result pickup_object(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 13
[PlexilExec:step][4:0] State change queue: PickupObject 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:step][4:0:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 14
[PlexilExec:step][4:1] State change queue: PickupObject 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:step][4:1:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'PickupObject' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 15
[PlexilExec:step][4:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 16
[PlexilExec:step][4:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 17
[PlexilExec:step][4:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: (id_267[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_269[au](SUCCESS):  outcome)
  PickupObject{
   State: (id_328[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_330[au](SUCCESS):  outcome)
   Command handle: (id_334[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   priority10: priority10 (id_398[au](10): int)
   returnValue: returnValue (id_396[iu](10): int)
  }
  ProcessImage{
   State: (id_401[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_403[au](FAILURE):  outcome)
   Failure type: (id_405[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_407[au](COMMAND_DENIED):  command_handle)
   priority30: priority30 (id_463[au](30): int)
  }
  TakePicture{
   State: (id_466[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_468[au](SUCCESS):  outcome)
   Command handle: (id_472[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   v_priority: v_priority (id_528[au](10): int)
  }
}

