[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: (id_266[au](INACTIVE): state(INACTIVE)) (inf)
  PickupObject{
   State: (id_318[au](INACTIVE): state(INACTIVE)) (inf)
  }
  ProcessImage{
   State: (id_372[au](INACTIVE): state(INACTIVE)) (inf)
  }
  TakePicture{
   State: (id_425[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: PickupObject ProcessImage TakePicture 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][1:2:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:step][1:2:1] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:step][1:2:2] Transitioning node TakePicture
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: PickupObject ProcessImage TakePicture 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][1:3:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:handleNeedsExecution]Storing action for node 'PickupObject' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:handleNeedsExecution]Storing action for node 'ProcessImage' of type 'Command' to be executed.
[PlexilExec:step][1:3:2] Transitioning node TakePicture
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:handleNeedsExecution]Storing action for node 'TakePicture' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'PickupObject' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'ProcessImage' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'TakePicture' was previously eligible to transition but isn't now.
[Test:testOutput]Executing pickup_object(20) into (id_368[au](-1): int) with ack (id_512[au](UNKNOWN): string)
[Test:testOutput]Permission to execute process_image has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[Test:testOutput]Executing take_picture() into noId with ack (id_598[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: (id_266[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_286[au](0): boolean)
 StartCondition: (id_288[au](1): boolean)
 EndCondition: (id_479[au](0): childrenFinished(0:3))
 InvariantCondition: (id_292[au](1): boolean)
 PreCondition: (id_294[au](1): boolean)
 PostCondition: (id_296[au](1): boolean)
 RepeatCondition: (id_298[au](0): boolean)
 AncestorInvariantCondition: (id_300[au](1): boolean)
 AncestorEndCondition: (id_302[au](0): boolean)
 ParentExecutingCondition: (id_304[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_476[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_308[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_310[au](0): boolean)
 ParentFinishedCondition: (id_312[au](0): boolean)
 CommandHandleReceivedCondition: (id_314[au](1): boolean)
  PickupObject{
   State: (id_318[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_338[au](0): boolean)
   StartCondition: (id_340[au](1): boolean)
   EndCondition: (id_519[au](0): ((id_515[au](0): interruptibleCommandHandleValues((id_512[au](UNKNOWN): string))) || (id_517[au](0): ((id_513[au](0): isknown((id_512[au](UNKNOWN): string))) && (id_503[au](0): ((id_505[au](10): int) == (id_368[au](-1): int)))))
   InvariantCondition: (id_344[au](1): boolean)
   PreCondition: (id_346[au](1): boolean)
   PostCondition: (id_506[au](UNKNOWN): (id_509[au](UNKNOWN): ((id_321[au](UNKNOWN):  command_handle) == (id_508[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_350[au](0): boolean)
   AncestorInvariantCondition: (id_486[au](1): (TransparentWrapper(id_482[auT]{1}((id_300[au](1): boolean)) && TransparentWrapper(id_484[auT]{1}((id_292[au](1): boolean)))
   AncestorEndCondition: (id_492[iu](UNKNOWN): (TransparentWrapper(id_488[iuT]{0}((id_302[au](0): boolean)) || TransparentWrapper(id_490[iuT]{0}((id_479[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_495[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_494[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_358[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_511[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_498[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_497[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_501[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_500[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_523[au](0): ((id_521[au](0): allCommandHandleValues((id_512[au](UNKNOWN): string))) && (id_366[au](1): boolean))
   Command handle: (id_321[au](UNKNOWN):  command_handle)
   priority10: (id_369[au](10): int)
   returnValue: (id_368[au](-1): int)
  }
  ProcessImage{
   State: (id_372[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_392[au](0): boolean)
   StartCondition: (id_394[au](1): boolean)
   EndCondition: (id_563[au](1): ((id_559[au](1): interruptibleCommandHandleValues((id_556[au](COMMAND_DENIED): string))) || (id_561[au](1): ((id_557[au](1): isknown((id_556[au](COMMAND_DENIED): string))) && (id_396[au](1): boolean)))
   InvariantCondition: (id_398[au](1): boolean)
   PreCondition: (id_400[au](1): boolean)
   PostCondition: (id_550[au](UNKNOWN): (id_553[au](UNKNOWN): ((id_375[au](UNKNOWN):  command_handle) == (id_552[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_404[au](0): boolean)
   AncestorInvariantCondition: (id_536[au](1): (TransparentWrapper(id_532[auT]{1}((id_300[au](1): boolean)) && TransparentWrapper(id_534[auT]{1}((id_292[au](1): boolean)))
   AncestorEndCondition: (id_542[iu](UNKNOWN): (TransparentWrapper(id_538[iuT]{0}((id_302[au](0): boolean)) || TransparentWrapper(id_540[iuT]{0}((id_479[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_544[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_494[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_412[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_555[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_546[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_497[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_548[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_500[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_567[au](1): ((id_565[au](1): allCommandHandleValues((id_556[au](COMMAND_DENIED): string))) && (id_420[au](1): boolean))
   Command handle: (id_375[au](UNKNOWN):  command_handle)
   priority30: (id_422[au](30): int)
  }
  TakePicture{
   State: (id_425[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_445[au](0): boolean)
   StartCondition: (id_447[au](1): boolean)
   EndCondition: (id_605[au](0): ((id_601[au](0): interruptibleCommandHandleValues((id_598[au](UNKNOWN): string))) || (id_603[au](0): ((id_599[au](0): isknown((id_598[au](UNKNOWN): string))) && (id_449[au](1): boolean)))
   InvariantCondition: (id_451[au](1): boolean)
   PreCondition: (id_453[au](1): boolean)
   PostCondition: (id_592[au](UNKNOWN): (id_595[au](UNKNOWN): ((id_428[au](UNKNOWN):  command_handle) == (id_594[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_457[au](0): boolean)
   AncestorInvariantCondition: (id_578[au](1): (TransparentWrapper(id_574[auT]{1}((id_300[au](1): boolean)) && TransparentWrapper(id_576[auT]{1}((id_292[au](1): boolean)))
   AncestorEndCondition: (id_584[iu](UNKNOWN): (TransparentWrapper(id_580[iuT]{0}((id_302[au](0): boolean)) || TransparentWrapper(id_582[iuT]{0}((id_479[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_586[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_494[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_465[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_597[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_588[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_497[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_590[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_500[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_609[au](0): ((id_607[au](0): allCommandHandleValues((id_598[au](UNKNOWN): string))) && (id_473[au](1): boolean))
   Command handle: (id_428[au](UNKNOWN):  command_handle)
   v_priority: (id_475[au](10): int)
  }
}

[Test:testOutput]Sending command ACK pickup_object(20) = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 9
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:step][2:0] State change queue: ProcessImage 
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][2:0:0] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 10
[PlexilExec:step][2:1] State change queue: ProcessImage 
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][2:1:0] Transitioning node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'ProcessImage' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: (id_266[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_286[au](0): boolean)
 StartCondition: (id_288[au](1): boolean)
 EndCondition: (id_479[au](0): childrenFinished(1:3))
 InvariantCondition: (id_292[au](1): boolean)
 PreCondition: (id_294[au](1): boolean)
 PostCondition: (id_296[au](1): boolean)
 RepeatCondition: (id_298[au](0): boolean)
 AncestorInvariantCondition: (id_300[au](1): boolean)
 AncestorEndCondition: (id_302[au](0): boolean)
 ParentExecutingCondition: (id_304[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_476[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_308[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_310[au](0): boolean)
 ParentFinishedCondition: (id_312[au](0): boolean)
 CommandHandleReceivedCondition: (id_314[au](1): boolean)
  PickupObject{
   State: (id_318[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_338[au](0): boolean)
   StartCondition: (id_340[au](1): boolean)
   EndCondition: (id_519[au](0): ((id_515[au](0): interruptibleCommandHandleValues((id_512[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_517[au](0): ((id_513[au](1): isknown((id_512[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_503[au](0): ((id_505[au](10): int) == (id_368[au](-1): int)))))
   InvariantCondition: (id_344[au](1): boolean)
   PreCondition: (id_346[au](1): boolean)
   PostCondition: (id_506[au](1): (id_509[au](1): ((id_321[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_508[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_350[au](0): boolean)
   AncestorInvariantCondition: (id_486[au](1): (TransparentWrapper(id_482[auT]{1}((id_300[au](1): boolean)) && TransparentWrapper(id_484[auT]{1}((id_292[au](1): boolean)))
   AncestorEndCondition: (id_492[iu](UNKNOWN): (TransparentWrapper(id_488[iuT]{0}((id_302[au](0): boolean)) || TransparentWrapper(id_490[iuT]{0}((id_479[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_495[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_494[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_358[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_511[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_498[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_497[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_501[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_500[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_523[au](1): ((id_521[au](1): allCommandHandleValues((id_512[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_366[au](1): boolean))
   Command handle: (id_321[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   priority10: (id_369[au](10): int)
   returnValue: (id_368[au](-1): int)
  }
  ProcessImage{
   State: (id_372[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_373[au](FAILURE):  outcome)
   Failure type: (id_374[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_375[au](COMMAND_DENIED):  command_handle)
   priority30: (id_422[au](30): int)
  }
  TakePicture{
   State: (id_425[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_445[au](0): boolean)
   StartCondition: (id_447[au](1): boolean)
   EndCondition: (id_605[au](0): ((id_601[au](0): interruptibleCommandHandleValues((id_598[au](UNKNOWN): string))) || (id_603[au](0): ((id_599[au](0): isknown((id_598[au](UNKNOWN): string))) && (id_449[au](1): boolean)))
   InvariantCondition: (id_451[au](1): boolean)
   PreCondition: (id_453[au](1): boolean)
   PostCondition: (id_592[au](UNKNOWN): (id_595[au](UNKNOWN): ((id_428[au](UNKNOWN):  command_handle) == (id_594[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_457[au](0): boolean)
   AncestorInvariantCondition: (id_578[au](1): (TransparentWrapper(id_574[auT]{1}((id_300[au](1): boolean)) && TransparentWrapper(id_576[auT]{1}((id_292[au](1): boolean)))
   AncestorEndCondition: (id_584[iu](UNKNOWN): (TransparentWrapper(id_580[iuT]{0}((id_302[au](0): boolean)) || TransparentWrapper(id_582[iuT]{0}((id_479[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_586[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_494[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_465[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_597[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_588[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_497[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_590[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_500[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_609[au](0): ((id_607[au](0): allCommandHandleValues((id_598[au](UNKNOWN): string))) && (id_473[au](1): boolean))
   Command handle: (id_428[au](UNKNOWN):  command_handle)
   v_priority: (id_475[au](10): int)
  }
}

[Test:testOutput]Sending command ACK take_picture() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 11
[PlexilExec:step][3:0] State change queue: TakePicture 
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][3:0:0] Transitioning node TakePicture
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 12
[PlexilExec:step][3:1] State change queue: TakePicture 
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][3:1:0] Transitioning node TakePicture
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'TakePicture' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: (id_266[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_286[au](0): boolean)
 StartCondition: (id_288[au](1): boolean)
 EndCondition: (id_479[au](0): childrenFinished(2:3))
 InvariantCondition: (id_292[au](1): boolean)
 PreCondition: (id_294[au](1): boolean)
 PostCondition: (id_296[au](1): boolean)
 RepeatCondition: (id_298[au](0): boolean)
 AncestorInvariantCondition: (id_300[au](1): boolean)
 AncestorEndCondition: (id_302[au](0): boolean)
 ParentExecutingCondition: (id_304[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_476[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_308[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_310[au](0): boolean)
 ParentFinishedCondition: (id_312[au](0): boolean)
 CommandHandleReceivedCondition: (id_314[au](1): boolean)
  PickupObject{
   State: (id_318[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_338[au](0): boolean)
   StartCondition: (id_340[au](1): boolean)
   EndCondition: (id_519[au](0): ((id_515[au](0): interruptibleCommandHandleValues((id_512[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_517[au](0): ((id_513[au](1): isknown((id_512[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_503[au](0): ((id_505[au](10): int) == (id_368[au](-1): int)))))
   InvariantCondition: (id_344[au](1): boolean)
   PreCondition: (id_346[au](1): boolean)
   PostCondition: (id_506[au](1): (id_509[au](1): ((id_321[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_508[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: (id_350[au](0): boolean)
   AncestorInvariantCondition: (id_486[au](1): (TransparentWrapper(id_482[auT]{1}((id_300[au](1): boolean)) && TransparentWrapper(id_484[auT]{1}((id_292[au](1): boolean)))
   AncestorEndCondition: (id_492[iu](UNKNOWN): (TransparentWrapper(id_488[iuT]{0}((id_302[au](0): boolean)) || TransparentWrapper(id_490[iuT]{0}((id_479[au](0): childrenFinished(2:3))))
   ParentExecutingCondition: (id_495[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_494[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_358[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_511[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_498[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_497[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_501[iu](UNKNOWN): ((id_266[au](EXECUTING): state(EXECUTING)) == (id_500[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_523[au](1): ((id_521[au](1): allCommandHandleValues((id_512[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_366[au](1): boolean))
   Command handle: (id_321[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   priority10: (id_369[au](10): int)
   returnValue: (id_368[au](-1): int)
  }
  ProcessImage{
   State: (id_372[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_373[au](FAILURE):  outcome)
   Failure type: (id_374[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_375[au](COMMAND_DENIED):  command_handle)
   priority30: (id_422[au](30): int)
  }
  TakePicture{
   State: (id_425[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_426[au](SUCCESS):  outcome)
   Command handle: (id_428[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   v_priority: (id_475[au](10): int)
  }
}

[Test:testOutput]Sending command result pickup_object(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 13
[PlexilExec:step][4:0] State change queue: PickupObject 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:step][4:0:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 14
[PlexilExec:step][4:1] State change queue: PickupObject 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:step][4:1:0] Transitioning node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'PickupObject' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 15
[PlexilExec:step][4:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 16
[PlexilExec:step][4:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 17
[PlexilExec:step][4:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: (id_266[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_267[au](SUCCESS):  outcome)
  PickupObject{
   State: (id_318[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_319[au](SUCCESS):  outcome)
   Command handle: (id_321[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   priority10: (id_369[au](10): int)
   returnValue: (id_368[iu](10): int)
  }
  ProcessImage{
   State: (id_372[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_373[au](FAILURE):  outcome)
   Failure type: (id_374[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_375[au](COMMAND_DENIED):  command_handle)
   priority30: (id_422[au](30): int)
  }
  TakePicture{
   State: (id_425[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_426[au](SUCCESS):  outcome)
   Command handle: (id_428[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   v_priority: (id_475[au](10): int)
  }
}

