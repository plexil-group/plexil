[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: SimpleTask (id_65[au](INACTIVE): state) (inf)
  PickupObject{
   State: PickupObject (id_120[au](INACTIVE): state) (inf)
  }
  ProcessImage{
   State: ProcessImage (id_166[au](INACTIVE): state) (inf)
  }
  TakePicture{
   State: TakePicture (id_210[au](INACTIVE): state) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask from WAITING to EXECUTING
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: PickupObject ProcessImage TakePicture 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][1:2:0] Transitioning node PickupObject from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:step][1:2:1] Transitioning node ProcessImage from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:step][1:2:2] Transitioning node TakePicture from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: PickupObject ProcessImage TakePicture 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][1:3:0] Transitioning node PickupObject from WAITING to EXECUTING
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:handleNeedsExecution]Storing action for node 'PickupObject' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node ProcessImage from WAITING to EXECUTING
[PlexilExec:handleNeedsExecution]Storing action for node 'ProcessImage' of type 'Command' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:step][1:3:2] Transitioning node TakePicture from WAITING to EXECUTING
[PlexilExec:handleNeedsExecution]Storing action for node 'TakePicture' of type 'Command' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[Test:testOutput]Executing pickup_object(20) into returnValue (id_161[au](-1): int) with ack PickupObject command_handle (id_280[au](UNKNOWN): command_handle)
[Test:testOutput]Permission to execute process_image has been denied by the resource arbiter.
[Test:testOutput]Executing take_picture() into noId with ack TakePicture command_handle (id_339[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_65[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_103[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_103[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_105[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_105[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_103[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_103[au](0): boolean)
 SkipCondition: Boolean constant false (id_103[au](0): boolean)
 StartCondition: Boolean constant true (id_105[au](1): boolean)
 EndCondition: (id_260[au](0): childrenFinished(0:3))
 ExitCondition: Boolean constant false (id_103[au](0): boolean)
 InvariantCondition: Boolean constant true (id_105[au](1): boolean)
 PreCondition: Boolean constant true (id_105[au](1): boolean)
 PostCondition: Boolean constant true (id_105[au](1): boolean)
 RepeatCondition: Boolean constant false (id_103[au](0): boolean)
 ActionCompleteCondition: (id_253[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  PickupObject{
   State: PickupObject (id_120[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_260[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_103[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_105[au](1): boolean)
   ParentExecutingCondition: (id_109[au](1): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_107[au](EXECUTING): state)))
   ParentFinishedCondition: (id_113[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_111[au](FINISHED): state)))
   ParentWaitingCondition: (id_117[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_115[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_103[au](0): boolean)
   StartCondition: Boolean constant true (id_105[au](1): boolean)
   EndCondition: (id_305[au](0): ((id_303[au](0): interruptibleCommandHandleValues(PickupObject command_handle (id_280[au](UNKNOWN): command_handle))) || (id_292[au](0): (IntegerValue (id_294[au](10): int) == returnValue (id_161[au](-1): int)))))
   ExitCondition: Boolean constant false (id_103[au](0): boolean)
   InvariantCondition: Boolean constant true (id_105[au](1): boolean)
   PreCondition: Boolean constant true (id_105[au](1): boolean)
   PostCondition: (id_297[iu](UNKNOWN): (id_301[iu](UNKNOWN): (PickupObject command_handle (id_280[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_299[iu](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_103[au](0): boolean)
   ActionCompleteCondition: (id_284[iu](UNKNOWN): isknown(PickupObject command_handle (id_280[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: PickupObject abortComplete (id_282[au](UNKNOWN): boolean)
   Command handle: PickupObject command_handle (id_280[au](UNKNOWN): command_handle)
   priority10: priority10 (id_163[au](10): int)
   returnValue: returnValue (id_161[au](-1): int)
  }
  ProcessImage{
   State: ProcessImage (id_166[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_260[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_103[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_105[au](1): boolean)
   ParentExecutingCondition: (id_109[au](1): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_107[au](EXECUTING): state)))
   ParentFinishedCondition: (id_113[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_111[au](FINISHED): state)))
   ParentWaitingCondition: (id_117[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_115[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_103[au](0): boolean)
   StartCondition: Boolean constant true (id_105[au](1): boolean)
   EndCondition: Boolean constant true (id_105[au](1): boolean)
   ExitCondition: Boolean constant false (id_103[au](0): boolean)
   InvariantCondition: Boolean constant true (id_105[au](1): boolean)
   PreCondition: Boolean constant true (id_105[au](1): boolean)
   PostCondition: (id_328[iu](UNKNOWN): (id_332[iu](UNKNOWN): (ProcessImage command_handle (id_316[au](COMMAND_DENIED): command_handle) == NodeCommandHandleValue (id_330[iu](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_103[au](0): boolean)
   ActionCompleteCondition: (id_320[iu](UNKNOWN): isknown(ProcessImage command_handle (id_316[au](COMMAND_DENIED): command_handle)))
   AbortCompleteCondition: ProcessImage abortComplete (id_318[au](UNKNOWN): boolean)
   Command handle: ProcessImage command_handle (id_316[au](COMMAND_DENIED): command_handle)
   priority30: priority30 (id_207[au](30): int)
  }
  TakePicture{
   State: TakePicture (id_210[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_260[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_103[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_105[au](1): boolean)
   ParentExecutingCondition: (id_109[au](1): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_107[au](EXECUTING): state)))
   ParentFinishedCondition: (id_113[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_111[au](FINISHED): state)))
   ParentWaitingCondition: (id_117[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_115[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_103[au](0): boolean)
   StartCondition: Boolean constant true (id_105[au](1): boolean)
   EndCondition: Boolean constant true (id_105[au](1): boolean)
   ExitCondition: Boolean constant false (id_103[au](0): boolean)
   InvariantCondition: Boolean constant true (id_105[au](1): boolean)
   PreCondition: Boolean constant true (id_105[au](1): boolean)
   PostCondition: (id_351[iu](UNKNOWN): (id_355[iu](UNKNOWN): (TakePicture command_handle (id_339[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_353[iu](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_103[au](0): boolean)
   ActionCompleteCondition: (id_343[iu](UNKNOWN): isknown(TakePicture command_handle (id_339[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: TakePicture abortComplete (id_341[au](UNKNOWN): boolean)
   Command handle: TakePicture command_handle (id_339[au](UNKNOWN): command_handle)
   v_priority: v_priority (id_251[au](10): int)
  }
}

[Test:testOutput]Sending command ACK pickup_object(20) = (string)COMMAND_SENT_TO_SYSTEM
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'PickupObject' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 9
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 10
[PlexilExec:step][2:0] State change queue: ProcessImage TakePicture 
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][2:0:0] Transitioning node ProcessImage from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:step][2:0:1] Transitioning node TakePicture from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 11
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'TakePicture' was previously eligible to transition but isn't now.
[PlexilExec:step][2:1] State change queue: ProcessImage 
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][2:1:0] Transitioning node ProcessImage from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'ProcessImage' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'ProcessImage' on the state change queue in position 12
[PlexilExec:step][2:2] State change queue: ProcessImage 
[PlexilExec:lock]Locking node ProcessImage
[PlexilExec:step][2:2:0] Transitioning node ProcessImage from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node ProcessImage
[PlexilExec:unlock]Unlocking node ProcessImage
[PlexilExec:handleConditionsChanged]Node ProcessImage had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'ProcessImage' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_65[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_103[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_103[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_105[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_105[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_103[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_103[au](0): boolean)
 SkipCondition: Boolean constant false (id_103[au](0): boolean)
 StartCondition: Boolean constant true (id_105[au](1): boolean)
 EndCondition: (id_260[au](0): childrenFinished(1:3))
 ExitCondition: Boolean constant false (id_103[au](0): boolean)
 InvariantCondition: Boolean constant true (id_105[au](1): boolean)
 PreCondition: Boolean constant true (id_105[au](1): boolean)
 PostCondition: Boolean constant true (id_105[au](1): boolean)
 RepeatCondition: Boolean constant false (id_103[au](0): boolean)
 ActionCompleteCondition: (id_253[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  PickupObject{
   State: PickupObject (id_120[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_260[au](0): childrenFinished(1:3))
   AncestorExitCondition: Boolean constant false (id_103[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_105[au](1): boolean)
   ParentExecutingCondition: (id_109[au](1): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_107[au](EXECUTING): state)))
   ParentFinishedCondition: (id_113[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_111[au](FINISHED): state)))
   ParentWaitingCondition: (id_117[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_115[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_103[au](0): boolean)
   StartCondition: Boolean constant true (id_105[au](1): boolean)
   EndCondition: (id_305[au](0): ((id_303[au](0): interruptibleCommandHandleValues(PickupObject command_handle (id_280[au](COMMAND_SENT_TO_SYSTEM): command_handle))) || (id_292[au](0): (IntegerValue (id_294[au](10): int) == returnValue (id_161[au](-1): int)))))
   ExitCondition: Boolean constant false (id_103[au](0): boolean)
   InvariantCondition: Boolean constant true (id_105[au](1): boolean)
   PreCondition: Boolean constant true (id_105[au](1): boolean)
   PostCondition: (id_297[iu](UNKNOWN): (id_301[iu](UNKNOWN): (PickupObject command_handle (id_280[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_299[iu](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_103[au](0): boolean)
   ActionCompleteCondition: (id_284[iu](UNKNOWN): isknown(PickupObject command_handle (id_280[au](COMMAND_SENT_TO_SYSTEM): command_handle)))
   AbortCompleteCondition: PickupObject abortComplete (id_282[au](UNKNOWN): boolean)
   Command handle: PickupObject command_handle (id_280[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   priority10: priority10 (id_163[au](10): int)
   returnValue: returnValue (id_161[au](-1): int)
  }
  ProcessImage{
   State: ProcessImage (id_166[au](FINISHED): state) (0)
   Outcome: ProcessImage (id_168[au](FAILURE): outcome)
   Failure type: ProcessImage (id_170[au](POST_CONDITION_FAILED): failure)
   Command handle: ProcessImage command_handle (id_316[iu](COMMAND_DENIED): command_handle)
   priority30: priority30 (id_207[au](30): int)
  }
  TakePicture{
   State: TakePicture (id_210[au](FINISHING): state) (0)
   AncestorEndCondition: (id_260[au](0): childrenFinished(1:3))
   AncestorExitCondition: Boolean constant false (id_103[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_105[au](1): boolean)
   ParentExecutingCondition: (id_109[au](1): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_107[au](EXECUTING): state)))
   ParentFinishedCondition: (id_113[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_111[au](FINISHED): state)))
   ParentWaitingCondition: (id_117[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_115[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_103[au](0): boolean)
   StartCondition: Boolean constant true (id_105[au](1): boolean)
   EndCondition: Boolean constant true (id_105[au](1): boolean)
   ExitCondition: Boolean constant false (id_103[au](0): boolean)
   InvariantCondition: Boolean constant true (id_105[au](1): boolean)
   PreCondition: Boolean constant true (id_105[au](1): boolean)
   PostCondition: (id_351[au](UNKNOWN): (id_355[au](UNKNOWN): (TakePicture command_handle (id_339[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_353[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_103[au](0): boolean)
   ActionCompleteCondition: (id_343[au](0): isknown(TakePicture command_handle (id_339[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: TakePicture abortComplete (id_341[au](UNKNOWN): boolean)
   Command handle: TakePicture command_handle (id_339[au](UNKNOWN): command_handle)
   v_priority: v_priority (id_251[au](10): int)
  }
}

[Test:testOutput]Sending command ACK take_picture() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 13
[PlexilExec:step][3:0] State change queue: TakePicture 
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][3:0:0] Transitioning node TakePicture from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TakePicture' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TakePicture' on the state change queue in position 14
[PlexilExec:step][3:1] State change queue: TakePicture 
[PlexilExec:lock]Locking node TakePicture
[PlexilExec:step][3:1:0] Transitioning node TakePicture from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node TakePicture
[PlexilExec:unlock]Unlocking node TakePicture
[PlexilExec:handleConditionsChanged]Node TakePicture had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'TakePicture' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_65[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_103[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_103[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_105[au](1): boolean)
 ParentExecutingCondition: Boolean constant true (id_105[au](1): boolean)
 ParentFinishedCondition: Boolean constant false (id_103[au](0): boolean)
 ParentWaitingCondition: Boolean constant false (id_103[au](0): boolean)
 SkipCondition: Boolean constant false (id_103[au](0): boolean)
 StartCondition: Boolean constant true (id_105[au](1): boolean)
 EndCondition: (id_260[au](0): childrenFinished(2:3))
 ExitCondition: Boolean constant false (id_103[au](0): boolean)
 InvariantCondition: Boolean constant true (id_105[au](1): boolean)
 PreCondition: Boolean constant true (id_105[au](1): boolean)
 PostCondition: Boolean constant true (id_105[au](1): boolean)
 RepeatCondition: Boolean constant false (id_103[au](0): boolean)
 ActionCompleteCondition: (id_253[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
  PickupObject{
   State: PickupObject (id_120[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_260[au](0): childrenFinished(2:3))
   AncestorExitCondition: Boolean constant false (id_103[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_105[au](1): boolean)
   ParentExecutingCondition: (id_109[au](1): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_107[au](EXECUTING): state)))
   ParentFinishedCondition: (id_113[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_111[au](FINISHED): state)))
   ParentWaitingCondition: (id_117[au](0): (SimpleTask (id_65[au](EXECUTING): state) == anonymous (id_115[au](WAITING): state)))
   SkipCondition: Boolean constant false (id_103[au](0): boolean)
   StartCondition: Boolean constant true (id_105[au](1): boolean)
   EndCondition: (id_305[au](0): ((id_303[au](0): interruptibleCommandHandleValues(PickupObject command_handle (id_280[au](COMMAND_SENT_TO_SYSTEM): command_handle))) || (id_292[au](0): (IntegerValue (id_294[au](10): int) == returnValue (id_161[au](-1): int)))))
   ExitCondition: Boolean constant false (id_103[au](0): boolean)
   InvariantCondition: Boolean constant true (id_105[au](1): boolean)
   PreCondition: Boolean constant true (id_105[au](1): boolean)
   PostCondition: (id_297[iu](UNKNOWN): (id_301[iu](UNKNOWN): (PickupObject command_handle (id_280[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_299[iu](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_103[au](0): boolean)
   ActionCompleteCondition: (id_284[iu](UNKNOWN): isknown(PickupObject command_handle (id_280[au](COMMAND_SENT_TO_SYSTEM): command_handle)))
   AbortCompleteCondition: PickupObject abortComplete (id_282[au](UNKNOWN): boolean)
   Command handle: PickupObject command_handle (id_280[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   priority10: priority10 (id_163[au](10): int)
   returnValue: returnValue (id_161[au](-1): int)
  }
  ProcessImage{
   State: ProcessImage (id_166[au](FINISHED): state) (0)
   Outcome: ProcessImage (id_168[au](FAILURE): outcome)
   Failure type: ProcessImage (id_170[au](POST_CONDITION_FAILED): failure)
   Command handle: ProcessImage command_handle (id_316[iu](COMMAND_DENIED): command_handle)
   priority30: priority30 (id_207[au](30): int)
  }
  TakePicture{
   State: TakePicture (id_210[au](FINISHED): state) (0)
   Outcome: TakePicture (id_212[au](SUCCESS): outcome)
   Command handle: TakePicture command_handle (id_339[iu](COMMAND_SENT_TO_SYSTEM): command_handle)
   v_priority: v_priority (id_251[au](10): int)
  }
}

[Test:testOutput]Sending command result pickup_object(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 15
[PlexilExec:step][4:0] State change queue: PickupObject 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:step][4:0:0] Transitioning node PickupObject from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 16
[PlexilExec:step][4:1] State change queue: PickupObject 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:step][4:1:0] Transitioning node PickupObject from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'PickupObject' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'PickupObject' on the state change queue in position 17
[PlexilExec:step][4:2] State change queue: PickupObject 
[PlexilExec:lock]Locking node PickupObject
[PlexilExec:step][4:2:0] Transitioning node PickupObject from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node PickupObject
[PlexilExec:unlock]Unlocking node PickupObject
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:handleConditionsChanged]Node PickupObject had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'PickupObject' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 18
[PlexilExec:step][4:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:3:0] Transitioning node SimpleTask from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 19
[PlexilExec:step][4:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:4:0] Transitioning node SimpleTask from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 20
[PlexilExec:step][4:5] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][4:5:0] Transitioning node SimpleTask from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_65[au](FINISHED): state) (0)
 Outcome: SimpleTask (id_67[au](SUCCESS): outcome)
  PickupObject{
   State: PickupObject (id_120[au](FINISHED): state) (0)
   Outcome: PickupObject (id_122[au](SUCCESS): outcome)
   Command handle: PickupObject command_handle (id_280[iu](COMMAND_SENT_TO_SYSTEM): command_handle)
   priority10: priority10 (id_163[au](10): int)
   returnValue: returnValue (id_161[iu](10): int)
  }
  ProcessImage{
   State: ProcessImage (id_166[au](FINISHED): state) (0)
   Outcome: ProcessImage (id_168[au](FAILURE): outcome)
   Failure type: ProcessImage (id_170[au](POST_CONDITION_FAILED): failure)
   Command handle: ProcessImage command_handle (id_316[iu](COMMAND_DENIED): command_handle)
   priority30: priority30 (id_207[au](30): int)
  }
  TakePicture{
   State: TakePicture (id_210[au](FINISHED): state) (0)
   Outcome: TakePicture (id_212[au](SUCCESS): outcome)
   Command handle: TakePicture command_handle (id_339[iu](COMMAND_SENT_TO_SYSTEM): command_handle)
   v_priority: v_priority (id_251[au](10): int)
  }
}

