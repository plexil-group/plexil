[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleDrive{
 State: (id_228[au](INACTIVE): state(INACTIVE)) (inf)
  Drive{
   State: (id_291[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleDrive 
[PlexilExec:lock]Locking node SimpleDrive
[PlexilExec:step][1:0:0] Transitioning node SimpleDrive
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleDrive 
[PlexilExec:lock]Locking node SimpleDrive
[PlexilExec:step][1:1:0] Transitioning node SimpleDrive
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleDrive' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node SimpleDrive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleDrive' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: Drive 
[PlexilExec:lock]Locking node Drive
[PlexilExec:step][1:2:0] Transitioning node Drive
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:unlock]Unlocking node Drive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 4
[PlexilExec:step][1:3] State change queue: Drive 
[PlexilExec:lock]Locking node Drive
[PlexilExec:step][1:3:0] Transitioning node Drive
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:handleNeedsExecution]Storing action for node 'Drive' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node Drive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Drive' was previously eligible to transition but isn't now.
[Test:testOutput]Executing drive() into retTestFunction (id_288[au](-1): int) with ack anonymous (id_389[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleDrive{
 State: (id_228[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_282[au](0): boolean)
 StartCondition: Boolean constant true (id_284[au](1): boolean)
 EndCondition: (id_361[au](0): childrenFinished(0:1))
 InvariantCondition: Boolean constant true (id_284[au](1): boolean)
 PreCondition: Boolean constant true (id_284[au](1): boolean)
 PostCondition: Boolean constant true (id_284[au](1): boolean)
 RepeatCondition: Boolean constant false (id_282[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_284[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_282[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_284[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_282[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_282[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_358[iu](UNKNOWN): childrenWaitingOrFinished(0:1))
 AbortCompleteCondition: Boolean constant unknown (id_286[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_284[au](1): boolean)
 retTestFunction: retTestFunction (id_288[au](-1): int)
  Drive{
   State: (id_291[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_282[au](0): boolean)
   StartCondition: Boolean constant true (id_284[au](1): boolean)
   EndCondition: (id_396[au](0): ((id_390[au](0): interruptibleCommandHandleValues(anonymous (id_389[au](UNKNOWN): string))) || (id_394[au](0): ((id_392[au](0): isknown(anonymous (id_389[au](UNKNOWN): string))) && (id_376[au](0): (IntegerValue (id_379[au](10): int) == retTestFunction (id_288[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_284[au](1): boolean)
   PreCondition: Boolean constant true (id_284[au](1): boolean)
   PostCondition: (id_380[au](UNKNOWN): (id_384[au](UNKNOWN): ((id_297[au](UNKNOWN):  command_handle) == (id_382[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_282[au](0): boolean)
   AncestorInvariantCondition: (id_368[au](1): (TransparentWrapper(id_364[auT]{1}(Boolean constant true (id_284[au](1): boolean)) && TransparentWrapper(id_366[auT]{1}(Boolean constant true (id_284[au](1): boolean)))
   AncestorEndCondition: (id_374[iu](UNKNOWN): (TransparentWrapper(id_370[iuT]{0}(Boolean constant false (id_282[au](0): boolean)) || TransparentWrapper(id_372[iuT]{0}((id_361[au](0): childrenFinished(0:1))))
   ParentExecutingCondition: (id_348[iu](UNKNOWN): ((id_228[au](EXECUTING): state(EXECUTING)) == (id_346[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_352[iu](UNKNOWN): ((id_228[au](EXECUTING): state(EXECUTING)) == (id_350[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_356[iu](UNKNOWN): ((id_228[au](EXECUTING): state(EXECUTING)) == (id_354[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_286[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_387[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_398[au](0): allCommandHandleValues(anonymous (id_389[au](UNKNOWN): string)))
   Command handle: (id_297[au](UNKNOWN):  command_handle)
   retTestFunction: retTestFunction (id_288[au](-1): int)
  }
}

[Test:testOutput]Sending command ACK drive() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node Drive
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleDrive{
 State: (id_228[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_282[au](0): boolean)
 StartCondition: Boolean constant true (id_284[au](1): boolean)
 EndCondition: (id_361[au](0): childrenFinished(0:1))
 InvariantCondition: Boolean constant true (id_284[au](1): boolean)
 PreCondition: Boolean constant true (id_284[au](1): boolean)
 PostCondition: Boolean constant true (id_284[au](1): boolean)
 RepeatCondition: Boolean constant false (id_282[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_284[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_282[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_284[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_282[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_282[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_358[iu](UNKNOWN): childrenWaitingOrFinished(0:1))
 AbortCompleteCondition: Boolean constant unknown (id_286[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_284[au](1): boolean)
 retTestFunction: retTestFunction (id_288[au](-1): int)
  Drive{
   State: (id_291[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_282[au](0): boolean)
   StartCondition: Boolean constant true (id_284[au](1): boolean)
   EndCondition: (id_396[au](0): ((id_390[au](0): interruptibleCommandHandleValues(anonymous (id_389[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_394[au](0): ((id_392[au](1): isknown(anonymous (id_389[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_376[au](0): (IntegerValue (id_379[au](10): int) == retTestFunction (id_288[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_284[au](1): boolean)
   PreCondition: Boolean constant true (id_284[au](1): boolean)
   PostCondition: (id_380[au](1): (id_384[au](1): ((id_297[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_382[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_282[au](0): boolean)
   AncestorInvariantCondition: (id_368[au](1): (TransparentWrapper(id_364[auT]{1}(Boolean constant true (id_284[au](1): boolean)) && TransparentWrapper(id_366[auT]{1}(Boolean constant true (id_284[au](1): boolean)))
   AncestorEndCondition: (id_374[iu](UNKNOWN): (TransparentWrapper(id_370[iuT]{0}(Boolean constant false (id_282[au](0): boolean)) || TransparentWrapper(id_372[iuT]{0}((id_361[au](0): childrenFinished(0:1))))
   ParentExecutingCondition: (id_348[iu](UNKNOWN): ((id_228[au](EXECUTING): state(EXECUTING)) == (id_346[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_352[iu](UNKNOWN): ((id_228[au](EXECUTING): state(EXECUTING)) == (id_350[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_356[iu](UNKNOWN): ((id_228[au](EXECUTING): state(EXECUTING)) == (id_354[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_286[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_387[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_398[au](1): allCommandHandleValues(anonymous (id_389[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: (id_297[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   retTestFunction: retTestFunction (id_288[au](-1): int)
  }
}

[Test:testOutput]Sending command result drive() = 10
[PlexilExec:notifyNodeConditionChanged] for node Drive
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 5
[PlexilExec:step][3:0] State change queue: Drive 
[PlexilExec:lock]Locking node Drive
[PlexilExec:step][3:0:0] Transitioning node Drive
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:unlock]Unlocking node Drive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 6
[PlexilExec:step][3:1] State change queue: Drive 
[PlexilExec:lock]Locking node Drive
[PlexilExec:step][3:1:0] Transitioning node Drive
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node Drive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Drive' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 7
[PlexilExec:step][3:2] State change queue: SimpleDrive 
[PlexilExec:lock]Locking node SimpleDrive
[PlexilExec:step][3:2:0] Transitioning node SimpleDrive
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 8
[PlexilExec:step][3:3] State change queue: SimpleDrive 
[PlexilExec:lock]Locking node SimpleDrive
[PlexilExec:step][3:3:0] Transitioning node SimpleDrive
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 9
[PlexilExec:step][3:4] State change queue: SimpleDrive 
[PlexilExec:lock]Locking node SimpleDrive
[PlexilExec:step][3:4:0] Transitioning node SimpleDrive
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:unlock]Unlocking node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleDrive' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleDrive{
 State: (id_228[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_230[au](SUCCESS):  outcome)
 retTestFunction: retTestFunction (id_288[iu](10): int)
  Drive{
   State: (id_291[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_293[au](SUCCESS):  outcome)
   Command handle: (id_297[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   retTestFunction: retTestFunction (id_288[iu](10): int)
  }
}

