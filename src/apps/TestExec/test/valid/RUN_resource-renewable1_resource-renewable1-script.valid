[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: (id_289[au](INACTIVE): state(INACTIVE)) (inf)
  C1{
   State: (id_350[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C2{
   State: (id_423[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C3{
   State: (id_488[au](INACTIVE): state(INACTIVE)) (inf)
  }
  C4{
   State: (id_553[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C4' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C4' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 C4 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:lock]Locking node C4
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:step][1:2:3] Transitioning node C4
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:unlock]Unlocking node C4
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C4' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C4' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C4 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C4
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C4
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:handleNeedsExecution]Storing action for node 'C4' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C4
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C4' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c1(20) into returnValue (id_418[au](-1): int) with ack anonymous (id_647[au](UNKNOWN): string)
[Test:testOutput]Permission to execute c4 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: (id_289[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_343[au](0): boolean)
 StartCondition: Boolean constant true (id_345[au](1): boolean)
 EndCondition: (id_619[au](0): childrenFinished(0:4))
 InvariantCondition: Boolean constant true (id_345[au](1): boolean)
 PreCondition: Boolean constant true (id_345[au](1): boolean)
 PostCondition: Boolean constant true (id_345[au](1): boolean)
 RepeatCondition: Boolean constant false (id_343[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_345[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_343[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_345[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_343[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_343[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_616[iu](UNKNOWN): childrenWaitingOrFinished(0:4))
 AbortCompleteCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_345[au](1): boolean)
  C1{
   State: (id_350[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_343[au](0): boolean)
   StartCondition: Boolean constant true (id_345[au](1): boolean)
   EndCondition: (id_654[au](0): ((id_648[au](0): interruptibleCommandHandleValues(anonymous (id_647[au](UNKNOWN): string))) || (id_652[au](0): ((id_650[au](0): isknown(anonymous (id_647[au](UNKNOWN): string))) && (id_634[au](0): (IntegerValue (id_637[au](10): int) == returnValue (id_418[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_345[au](1): boolean)
   PreCondition: Boolean constant true (id_345[au](1): boolean)
   PostCondition: (id_638[au](UNKNOWN): (id_642[au](UNKNOWN): ((id_356[au](UNKNOWN):  command_handle) == (id_640[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_343[au](0): boolean)
   AncestorInvariantCondition: (id_626[au](1): (TransparentWrapper(id_622[auT]{1}(Boolean constant true (id_345[au](1): boolean)) && TransparentWrapper(id_624[auT]{1}(Boolean constant true (id_345[au](1): boolean)))
   AncestorEndCondition: (id_632[iu](UNKNOWN): (TransparentWrapper(id_628[iuT]{0}(Boolean constant false (id_343[au](0): boolean)) || TransparentWrapper(id_630[iuT]{0}((id_619[au](0): childrenFinished(0:4))))
   ParentExecutingCondition: (id_407[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_405[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_411[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_409[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_415[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_413[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_645[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_656[au](0): allCommandHandleValues(anonymous (id_647[au](UNKNOWN): string)))
   Command handle: (id_356[au](UNKNOWN):  command_handle)
   head_priority: head_priority (id_420[au](20): int)
   returnValue: returnValue (id_418[au](-1): int)
  }
  C2{
   State: (id_423[au](WAITING): state(WAITING)) (0)
   SkipCondition: Boolean constant false (id_343[au](0): boolean)
   StartCondition: (id_685[au](UNKNOWN): (id_689[au](UNKNOWN): ((id_490[au](UNKNOWN):  outcome) == (id_687[au](SUCCESS):  outcome))))
   EndCondition: (id_701[iu](UNKNOWN): ((id_695[iu](UNKNOWN): interruptibleCommandHandleValues(anonymous (id_694[iu](UNKNOWN): string))) || (id_699[iu](UNKNOWN): ((id_697[iu](UNKNOWN): isknown(anonymous (id_694[iu](UNKNOWN): string))) && Boolean constant true (id_345[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_345[au](1): boolean)
   PreCondition: Boolean constant true (id_345[au](1): boolean)
   PostCondition: (id_679[iu](UNKNOWN): (id_683[iu](UNKNOWN): ((id_429[au](UNKNOWN):  command_handle) == (id_681[iu](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_343[au](0): boolean)
   AncestorInvariantCondition: (id_671[au](1): (TransparentWrapper(id_667[auT]{1}(Boolean constant true (id_345[au](1): boolean)) && TransparentWrapper(id_669[auT]{1}(Boolean constant true (id_345[au](1): boolean)))
   AncestorEndCondition: (id_677[au](0): (TransparentWrapper(id_673[auT]{0}(Boolean constant false (id_343[au](0): boolean)) || TransparentWrapper(id_675[auT]{0}((id_619[au](0): childrenFinished(0:4))))
   ParentExecutingCondition: (id_478[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_405[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_480[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_409[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_482[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_413[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_692[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_703[iu](UNKNOWN): allCommandHandleValues(anonymous (id_694[iu](UNKNOWN): string)))
   Command handle: (id_429[au](UNKNOWN):  command_handle)
   v_priority2: v_priority2 (id_485[iu](25): int)
  }
  C3{
   State: (id_488[au](WAITING): state(WAITING)) (0)
   SkipCondition: Boolean constant false (id_343[au](0): boolean)
   StartCondition: (id_732[au](UNKNOWN): (id_736[au](UNKNOWN): ((id_352[au](UNKNOWN):  outcome) == (id_734[au](SUCCESS):  outcome))))
   EndCondition: (id_748[iu](UNKNOWN): ((id_742[iu](UNKNOWN): interruptibleCommandHandleValues(anonymous (id_741[iu](UNKNOWN): string))) || (id_746[iu](UNKNOWN): ((id_744[iu](UNKNOWN): isknown(anonymous (id_741[iu](UNKNOWN): string))) && Boolean constant true (id_345[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_345[au](1): boolean)
   PreCondition: Boolean constant true (id_345[au](1): boolean)
   PostCondition: (id_726[iu](UNKNOWN): (id_730[iu](UNKNOWN): ((id_494[au](UNKNOWN):  command_handle) == (id_728[iu](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_343[au](0): boolean)
   AncestorInvariantCondition: (id_718[au](1): (TransparentWrapper(id_714[auT]{1}(Boolean constant true (id_345[au](1): boolean)) && TransparentWrapper(id_716[auT]{1}(Boolean constant true (id_345[au](1): boolean)))
   AncestorEndCondition: (id_724[au](0): (TransparentWrapper(id_720[auT]{0}(Boolean constant false (id_343[au](0): boolean)) || TransparentWrapper(id_722[auT]{0}((id_619[au](0): childrenFinished(0:4))))
   ParentExecutingCondition: (id_543[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_405[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_545[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_409[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_547[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_413[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_739[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_750[iu](UNKNOWN): allCommandHandleValues(anonymous (id_741[iu](UNKNOWN): string)))
   Command handle: (id_494[au](UNKNOWN):  command_handle)
   mem_priority2: mem_priority2 (id_550[iu](30): int)
  }
  C4{
   State: (id_553[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_343[au](0): boolean)
   StartCondition: Boolean constant true (id_345[au](1): boolean)
   EndCondition: (id_791[au](1): ((id_785[au](1): interruptibleCommandHandleValues(anonymous (id_784[au](COMMAND_DENIED): string))) || (id_789[au](1): ((id_787[au](1): isknown(anonymous (id_784[au](COMMAND_DENIED): string))) && Boolean constant true (id_345[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_345[au](1): boolean)
   PreCondition: Boolean constant true (id_345[au](1): boolean)
   PostCondition: (id_775[au](UNKNOWN): (id_779[au](UNKNOWN): ((id_559[au](UNKNOWN):  command_handle) == (id_777[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_343[au](0): boolean)
   AncestorInvariantCondition: (id_767[au](1): (TransparentWrapper(id_763[auT]{1}(Boolean constant true (id_345[au](1): boolean)) && TransparentWrapper(id_765[auT]{1}(Boolean constant true (id_345[au](1): boolean)))
   AncestorEndCondition: (id_773[iu](UNKNOWN): (TransparentWrapper(id_769[iuT]{0}(Boolean constant false (id_343[au](0): boolean)) || TransparentWrapper(id_771[iuT]{0}((id_619[au](0): childrenFinished(0:4))))
   ParentExecutingCondition: (id_608[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_405[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_610[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_409[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_612[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_413[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_782[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_793[au](1): allCommandHandleValues(anonymous (id_784[au](COMMAND_DENIED): string)))
   Command handle: (id_559[au](UNKNOWN):  command_handle)
   mem_priority2: mem_priority2 (id_615[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c1(20) = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C4' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C4' on the state change queue in position 9
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:0] State change queue: C4 
[PlexilExec:lock]Locking node C4
[PlexilExec:step][2:0:0] Transitioning node C4
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:unlock]Unlocking node C4
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C4' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C4' on the state change queue in position 10
[PlexilExec:step][2:1] State change queue: C4 
[PlexilExec:lock]Locking node C4
[PlexilExec:step][2:1:0] Transitioning node C4
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:unlock]Unlocking node C4
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C4' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: (id_289[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_343[au](0): boolean)
 StartCondition: Boolean constant true (id_345[au](1): boolean)
 EndCondition: (id_619[au](0): childrenFinished(1:4))
 InvariantCondition: Boolean constant true (id_345[au](1): boolean)
 PreCondition: Boolean constant true (id_345[au](1): boolean)
 PostCondition: Boolean constant true (id_345[au](1): boolean)
 RepeatCondition: Boolean constant false (id_343[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_345[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_343[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_345[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_343[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_343[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_616[iu](UNKNOWN): childrenWaitingOrFinished(0:4))
 AbortCompleteCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_345[au](1): boolean)
  C1{
   State: (id_350[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_343[au](0): boolean)
   StartCondition: Boolean constant true (id_345[au](1): boolean)
   EndCondition: (id_654[au](0): ((id_648[au](0): interruptibleCommandHandleValues(anonymous (id_647[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_652[au](0): ((id_650[au](1): isknown(anonymous (id_647[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_634[au](0): (IntegerValue (id_637[au](10): int) == returnValue (id_418[au](-1): int)))))
   InvariantCondition: Boolean constant true (id_345[au](1): boolean)
   PreCondition: Boolean constant true (id_345[au](1): boolean)
   PostCondition: (id_638[au](1): (id_642[au](1): ((id_356[au](COMMAND_SENT_TO_SYSTEM):  command_handle) == (id_640[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_343[au](0): boolean)
   AncestorInvariantCondition: (id_626[au](1): (TransparentWrapper(id_622[auT]{1}(Boolean constant true (id_345[au](1): boolean)) && TransparentWrapper(id_624[auT]{1}(Boolean constant true (id_345[au](1): boolean)))
   AncestorEndCondition: (id_632[iu](UNKNOWN): (TransparentWrapper(id_628[iuT]{0}(Boolean constant false (id_343[au](0): boolean)) || TransparentWrapper(id_630[iuT]{0}((id_619[au](0): childrenFinished(1:4))))
   ParentExecutingCondition: (id_407[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_405[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_411[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_409[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_415[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_413[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_645[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_656[au](1): allCommandHandleValues(anonymous (id_647[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: (id_356[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: head_priority (id_420[au](20): int)
   returnValue: returnValue (id_418[au](-1): int)
  }
  C2{
   State: (id_423[au](WAITING): state(WAITING)) (0)
   SkipCondition: Boolean constant false (id_343[au](0): boolean)
   StartCondition: (id_685[au](UNKNOWN): (id_689[au](UNKNOWN): ((id_490[au](UNKNOWN):  outcome) == (id_687[au](SUCCESS):  outcome))))
   EndCondition: (id_701[iu](UNKNOWN): ((id_695[iu](UNKNOWN): interruptibleCommandHandleValues(anonymous (id_694[iu](UNKNOWN): string))) || (id_699[iu](UNKNOWN): ((id_697[iu](UNKNOWN): isknown(anonymous (id_694[iu](UNKNOWN): string))) && Boolean constant true (id_345[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_345[au](1): boolean)
   PreCondition: Boolean constant true (id_345[au](1): boolean)
   PostCondition: (id_679[iu](UNKNOWN): (id_683[iu](UNKNOWN): ((id_429[au](UNKNOWN):  command_handle) == (id_681[iu](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_343[au](0): boolean)
   AncestorInvariantCondition: (id_671[au](1): (TransparentWrapper(id_667[auT]{1}(Boolean constant true (id_345[au](1): boolean)) && TransparentWrapper(id_669[auT]{1}(Boolean constant true (id_345[au](1): boolean)))
   AncestorEndCondition: (id_677[au](0): (TransparentWrapper(id_673[auT]{0}(Boolean constant false (id_343[au](0): boolean)) || TransparentWrapper(id_675[auT]{0}((id_619[au](0): childrenFinished(1:4))))
   ParentExecutingCondition: (id_478[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_405[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_480[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_409[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_482[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_413[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_692[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_703[iu](UNKNOWN): allCommandHandleValues(anonymous (id_694[iu](UNKNOWN): string)))
   Command handle: (id_429[au](UNKNOWN):  command_handle)
   v_priority2: v_priority2 (id_485[iu](25): int)
  }
  C3{
   State: (id_488[au](WAITING): state(WAITING)) (0)
   SkipCondition: Boolean constant false (id_343[au](0): boolean)
   StartCondition: (id_732[au](UNKNOWN): (id_736[au](UNKNOWN): ((id_352[au](UNKNOWN):  outcome) == (id_734[au](SUCCESS):  outcome))))
   EndCondition: (id_748[iu](UNKNOWN): ((id_742[iu](UNKNOWN): interruptibleCommandHandleValues(anonymous (id_741[iu](UNKNOWN): string))) || (id_746[iu](UNKNOWN): ((id_744[iu](UNKNOWN): isknown(anonymous (id_741[iu](UNKNOWN): string))) && Boolean constant true (id_345[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_345[au](1): boolean)
   PreCondition: Boolean constant true (id_345[au](1): boolean)
   PostCondition: (id_726[iu](UNKNOWN): (id_730[iu](UNKNOWN): ((id_494[au](UNKNOWN):  command_handle) == (id_728[iu](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_343[au](0): boolean)
   AncestorInvariantCondition: (id_718[au](1): (TransparentWrapper(id_714[auT]{1}(Boolean constant true (id_345[au](1): boolean)) && TransparentWrapper(id_716[auT]{1}(Boolean constant true (id_345[au](1): boolean)))
   AncestorEndCondition: (id_724[au](0): (TransparentWrapper(id_720[auT]{0}(Boolean constant false (id_343[au](0): boolean)) || TransparentWrapper(id_722[auT]{0}((id_619[au](0): childrenFinished(1:4))))
   ParentExecutingCondition: (id_543[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_405[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_545[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_409[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_547[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_413[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_739[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_750[iu](UNKNOWN): allCommandHandleValues(anonymous (id_741[iu](UNKNOWN): string)))
   Command handle: (id_494[au](UNKNOWN):  command_handle)
   mem_priority2: mem_priority2 (id_550[iu](30): int)
  }
  C4{
   State: (id_553[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_555[au](FAILURE):  outcome)
   Failure type: (id_557[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_559[au](COMMAND_DENIED):  command_handle)
   mem_priority2: mem_priority2 (id_615[au](30): int)
  }
}

[Test:testOutput]Sending command result c1(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 11
[PlexilExec:step][3:0] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][3:0:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 12
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 13
[PlexilExec:step][3:1] State change queue: C3 C1 
[PlexilExec:lock]Locking node C3
[PlexilExec:lock]Locking node C1
[PlexilExec:step][3:1:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:step][3:1:1] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c3() into noId with ack anonymous (id_741[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: (id_289[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_343[au](0): boolean)
 StartCondition: Boolean constant true (id_345[au](1): boolean)
 EndCondition: (id_619[au](0): childrenFinished(2:4))
 InvariantCondition: Boolean constant true (id_345[au](1): boolean)
 PreCondition: Boolean constant true (id_345[au](1): boolean)
 PostCondition: Boolean constant true (id_345[au](1): boolean)
 RepeatCondition: Boolean constant false (id_343[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_345[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_343[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_345[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_343[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_343[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_616[iu](UNKNOWN): childrenWaitingOrFinished(0:4))
 AbortCompleteCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_345[au](1): boolean)
  C1{
   State: (id_350[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_352[au](SUCCESS):  outcome)
   Command handle: (id_356[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: head_priority (id_420[au](20): int)
   returnValue: returnValue (id_418[iu](10): int)
  }
  C2{
   State: (id_423[au](WAITING): state(WAITING)) (0)
   SkipCondition: Boolean constant false (id_343[au](0): boolean)
   StartCondition: (id_685[au](UNKNOWN): (id_689[au](UNKNOWN): ((id_490[au](UNKNOWN):  outcome) == (id_687[au](SUCCESS):  outcome))))
   EndCondition: (id_701[iu](UNKNOWN): ((id_695[iu](UNKNOWN): interruptibleCommandHandleValues(anonymous (id_694[iu](UNKNOWN): string))) || (id_699[iu](UNKNOWN): ((id_697[iu](UNKNOWN): isknown(anonymous (id_694[iu](UNKNOWN): string))) && Boolean constant true (id_345[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_345[au](1): boolean)
   PreCondition: Boolean constant true (id_345[au](1): boolean)
   PostCondition: (id_679[iu](UNKNOWN): (id_683[iu](UNKNOWN): ((id_429[au](UNKNOWN):  command_handle) == (id_681[iu](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_343[au](0): boolean)
   AncestorInvariantCondition: (id_671[au](1): (TransparentWrapper(id_667[auT]{1}(Boolean constant true (id_345[au](1): boolean)) && TransparentWrapper(id_669[auT]{1}(Boolean constant true (id_345[au](1): boolean)))
   AncestorEndCondition: (id_677[au](0): (TransparentWrapper(id_673[auT]{0}(Boolean constant false (id_343[au](0): boolean)) || TransparentWrapper(id_675[auT]{0}((id_619[au](0): childrenFinished(2:4))))
   ParentExecutingCondition: (id_478[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_405[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_480[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_409[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_482[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_413[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_692[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_703[iu](UNKNOWN): allCommandHandleValues(anonymous (id_694[iu](UNKNOWN): string)))
   Command handle: (id_429[au](UNKNOWN):  command_handle)
   v_priority2: v_priority2 (id_485[iu](25): int)
  }
  C3{
   State: (id_488[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_343[au](0): boolean)
   StartCondition: (id_732[iu](UNKNOWN): (id_736[iu](UNKNOWN): ((id_352[au](SUCCESS):  outcome) == (id_734[iu](SUCCESS):  outcome))))
   EndCondition: (id_748[au](0): ((id_742[au](0): interruptibleCommandHandleValues(anonymous (id_741[au](UNKNOWN): string))) || (id_746[au](0): ((id_744[au](0): isknown(anonymous (id_741[au](UNKNOWN): string))) && Boolean constant true (id_345[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_345[au](1): boolean)
   PreCondition: Boolean constant true (id_345[au](1): boolean)
   PostCondition: (id_726[au](UNKNOWN): (id_730[au](UNKNOWN): ((id_494[au](UNKNOWN):  command_handle) == (id_728[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_343[au](0): boolean)
   AncestorInvariantCondition: (id_718[au](1): (TransparentWrapper(id_714[auT]{1}(Boolean constant true (id_345[au](1): boolean)) && TransparentWrapper(id_716[auT]{1}(Boolean constant true (id_345[au](1): boolean)))
   AncestorEndCondition: (id_724[iu](UNKNOWN): (TransparentWrapper(id_720[iuT]{0}(Boolean constant false (id_343[au](0): boolean)) || TransparentWrapper(id_722[iuT]{0}((id_619[au](0): childrenFinished(2:4))))
   ParentExecutingCondition: (id_543[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_405[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_545[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_409[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_547[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_413[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_739[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_750[au](0): allCommandHandleValues(anonymous (id_741[au](UNKNOWN): string)))
   Command handle: (id_494[au](UNKNOWN):  command_handle)
   mem_priority2: mem_priority2 (id_550[au](30): int)
  }
  C4{
   State: (id_553[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_555[au](FAILURE):  outcome)
   Failure type: (id_557[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_559[au](COMMAND_DENIED):  command_handle)
   mem_priority2: mem_priority2 (id_615[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 14
[PlexilExec:step][4:0] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][4:0:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 15
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 16
[PlexilExec:step][4:1] State change queue: C2 C3 
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][4:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:step][4:1:1] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c2() into noId with ack anonymous (id_694[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: (id_289[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: Boolean constant false (id_343[au](0): boolean)
 StartCondition: Boolean constant true (id_345[au](1): boolean)
 EndCondition: (id_619[au](0): childrenFinished(3:4))
 InvariantCondition: Boolean constant true (id_345[au](1): boolean)
 PreCondition: Boolean constant true (id_345[au](1): boolean)
 PostCondition: Boolean constant true (id_345[au](1): boolean)
 RepeatCondition: Boolean constant false (id_343[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_345[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_343[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_345[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_343[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_343[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_616[iu](UNKNOWN): childrenWaitingOrFinished(0:4))
 AbortCompleteCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
 CommandHandleReceivedCondition: Boolean constant true (id_345[au](1): boolean)
  C1{
   State: (id_350[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_352[au](SUCCESS):  outcome)
   Command handle: (id_356[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: head_priority (id_420[au](20): int)
   returnValue: returnValue (id_418[iu](10): int)
  }
  C2{
   State: (id_423[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: Boolean constant false (id_343[au](0): boolean)
   StartCondition: (id_685[iu](UNKNOWN): (id_689[iu](UNKNOWN): ((id_490[au](SUCCESS):  outcome) == (id_687[iu](SUCCESS):  outcome))))
   EndCondition: (id_701[au](0): ((id_695[au](0): interruptibleCommandHandleValues(anonymous (id_694[au](UNKNOWN): string))) || (id_699[au](0): ((id_697[au](0): isknown(anonymous (id_694[au](UNKNOWN): string))) && Boolean constant true (id_345[au](1): boolean)))
   InvariantCondition: Boolean constant true (id_345[au](1): boolean)
   PreCondition: Boolean constant true (id_345[au](1): boolean)
   PostCondition: (id_679[au](UNKNOWN): (id_683[au](UNKNOWN): ((id_429[au](UNKNOWN):  command_handle) == (id_681[au](COMMAND_SENT_TO_SYSTEM):  command_handle))))
   RepeatCondition: Boolean constant false (id_343[au](0): boolean)
   AncestorInvariantCondition: (id_671[au](1): (TransparentWrapper(id_667[auT]{1}(Boolean constant true (id_345[au](1): boolean)) && TransparentWrapper(id_669[auT]{1}(Boolean constant true (id_345[au](1): boolean)))
   AncestorEndCondition: (id_677[iu](UNKNOWN): (TransparentWrapper(id_673[iuT]{0}(Boolean constant false (id_343[au](0): boolean)) || TransparentWrapper(id_675[iuT]{0}((id_619[au](0): childrenFinished(3:4))))
   ParentExecutingCondition: (id_478[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_405[au](EXECUTING): state(EXECUTING))))
   ParentWaitingCondition: (id_480[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_409[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_482[iu](UNKNOWN): ((id_289[au](EXECUTING): state(EXECUTING)) == (id_413[au](FINISHED): state(FINISHED))))
   AllChildrenWaitingOrFinishedCondition: Boolean constant unknown (id_347[au](UNKNOWN): boolean)
   AbortCompleteCondition: anonymous (id_692[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_703[au](0): allCommandHandleValues(anonymous (id_694[au](UNKNOWN): string)))
   Command handle: (id_429[au](UNKNOWN):  command_handle)
   v_priority2: v_priority2 (id_485[au](25): int)
  }
  C3{
   State: (id_488[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_490[au](SUCCESS):  outcome)
   Command handle: (id_494[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority2: mem_priority2 (id_550[au](30): int)
  }
  C4{
   State: (id_553[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_555[au](FAILURE):  outcome)
   Failure type: (id_557[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_559[au](COMMAND_DENIED):  command_handle)
   mem_priority2: mem_priority2 (id_615[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c2() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 17
[PlexilExec:step][5:0] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][5:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 18
[PlexilExec:step][5:1] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][5:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 19
[PlexilExec:step][5:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][5:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 20
[PlexilExec:step][5:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][5:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 21
[PlexilExec:step][5:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][5:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
SimpleTask{
 State: (id_289[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_291[au](SUCCESS):  outcome)
  C1{
   State: (id_350[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_352[au](SUCCESS):  outcome)
   Command handle: (id_356[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   head_priority: head_priority (id_420[au](20): int)
   returnValue: returnValue (id_418[iu](10): int)
  }
  C2{
   State: (id_423[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_425[au](SUCCESS):  outcome)
   Command handle: (id_429[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   v_priority2: v_priority2 (id_485[au](25): int)
  }
  C3{
   State: (id_488[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_490[au](SUCCESS):  outcome)
   Command handle: (id_494[au](COMMAND_SENT_TO_SYSTEM):  command_handle)
   mem_priority2: mem_priority2 (id_550[au](30): int)
  }
  C4{
   State: (id_553[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_555[au](FAILURE):  outcome)
   Failure type: (id_557[au](POST_CONDITION_FAILED):  failure)
   Command handle: (id_559[au](COMMAND_DENIED):  command_handle)
   mem_priority2: mem_priority2 (id_615[au](30): int)
  }
}

