[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleTask{
 State: SimpleTask (id_86[au](INACTIVE): state) (inf)
  C1{
   State: C1 (id_141[au](INACTIVE): state) (inf)
  }
  C2{
   State: C2 (id_212[au](INACTIVE): state) (inf)
  }
  C3{
   State: C3 (id_275[au](INACTIVE): state) (inf)
  }
  C4{
   State: C4 (id_338[au](INACTIVE): state) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:0:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][1:1:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleTask' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C4' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C4' on the state change queue in position 6
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: C1 C2 C3 C4 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:lock]Locking node C4
[PlexilExec:step][1:2:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][1:2:1] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:step][1:2:2] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:step][1:2:3] Transitioning node C4
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:unlock]Unlocking node C4
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C4' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C4' on the state change queue in position 8
[PlexilExec:step][1:3] State change queue: C1 C4 
[PlexilExec:lock]Locking node C1
[PlexilExec:lock]Locking node C4
[PlexilExec:step][1:3:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:handleNeedsExecution]Storing action for node 'C1' of type 'Command' to be executed.
[PlexilExec:step][1:3:1] Transitioning node C4
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:handleNeedsExecution]Storing action for node 'C4' of type 'Command' to be executed.
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:unlock]Unlocking node C4
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C4' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c1(20) into returnValue (id_203[au](-1): int) with ack C1 ack (id_207[au](UNKNOWN): string)
[Test:testOutput]Permission to execute c4 has been denied by the resource arbiter.
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_86[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_136[au](0): boolean)
 StartCondition: Boolean constant true (id_138[au](1): boolean)
 EndCondition: (id_408[au](0): childrenFinished(0:4))
 InvariantCondition: Boolean constant true (id_138[au](1): boolean)
 PreCondition: Boolean constant true (id_138[au](1): boolean)
 PostCondition: Boolean constant true (id_138[au](1): boolean)
 RepeatCondition: Boolean constant false (id_136[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_138[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_136[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_138[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_136[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_136[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_400[iu](UNKNOWN): childrenWaitingOrFinished(0:4))
  C1{
   State: C1 (id_141[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_136[au](0): boolean)
   StartCondition: Boolean constant true (id_138[au](1): boolean)
   EndCondition: (id_441[au](0): ((id_435[au](0): interruptibleCommandHandleValues(C1 ack (id_207[au](UNKNOWN): string))) || (id_439[au](0): ((id_437[au](0): isknown(C1 ack (id_207[au](UNKNOWN): string))) && (id_425[au](0): (IntegerValue (id_427[au](10): int) == returnValue (id_203[au](-1): int)))))))
   InvariantCondition: Boolean constant true (id_138[au](1): boolean)
   PreCondition: Boolean constant true (id_138[au](1): boolean)
   PostCondition: (id_429[au](UNKNOWN): (id_433[au](UNKNOWN): (C1 (id_209[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_431[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_136[au](0): boolean)
   AncestorInvariantCondition: (id_415[au](1): (Boolean constant true (id_138[au](1): boolean)))Boolean constant true (id_138[au](1): boolean)))
   AncestorEndCondition: (id_417[iu](UNKNOWN): (Boolean constant false (id_136[au](0): boolean) || (id_408[au](0): childrenFinished(0:4))))
   ParentExecutingCondition: (id_193[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_191[au](EXECUTING): state)))
   ParentWaitingCondition: (id_197[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_195[au](WAITING): state)))
   ParentFinishedCondition: (id_201[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_199[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_419[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_422[au](0): allCommandHandleValues(C1 ack (id_207[au](UNKNOWN): string)))
   Command handle: C1 (id_209[au](UNKNOWN): command_handle)
   head_priority: head_priority (id_205[au](20): int)
   returnValue: returnValue (id_203[au](-1): int)
  }
  C2{
   State: C2 (id_212[au](WAITING): state) (0)
   SkipCondition: Boolean constant false (id_136[au](0): boolean)
   StartCondition: (id_468[au](UNKNOWN): (id_472[au](UNKNOWN): (C3 (id_277[au](UNKNOWN): outcome) == NodeOutcomeValue (id_470[au](SUCCESS): outcome))))
   EndCondition: (id_480[iu](UNKNOWN): ((id_474[iu](UNKNOWN): interruptibleCommandHandleValues(C2 ack (id_270[iu](UNKNOWN): string))) || (id_478[iu](UNKNOWN): ((id_476[iu](UNKNOWN): isknown(C2 ack (id_270[iu](UNKNOWN): string))) && Boolean constant true (id_138[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_138[au](1): boolean)
   PreCondition: Boolean constant true (id_138[au](1): boolean)
   PostCondition: (id_462[iu](UNKNOWN): (id_466[iu](UNKNOWN): (C2 (id_272[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_464[iu](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_136[au](0): boolean)
   AncestorInvariantCondition: (id_452[au](1): (Boolean constant true (id_138[au](1): boolean)))Boolean constant true (id_138[au](1): boolean)))
   AncestorEndCondition: (id_454[au](0): (Boolean constant false (id_136[au](0): boolean) || (id_408[au](0): childrenFinished(0:4))))
   ParentExecutingCondition: (id_262[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_191[au](EXECUTING): state)))
   ParentWaitingCondition: (id_264[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_195[au](WAITING): state)))
   ParentFinishedCondition: (id_266[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_199[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_456[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_459[iu](UNKNOWN): allCommandHandleValues(C2 ack (id_270[iu](UNKNOWN): string)))
   Command handle: C2 (id_272[au](UNKNOWN): command_handle)
   v_priority2: v_priority2 (id_268[iu](25): int)
  }
  C3{
   State: C3 (id_275[au](WAITING): state) (0)
   SkipCondition: Boolean constant false (id_136[au](0): boolean)
   StartCondition: (id_507[au](UNKNOWN): (id_511[au](UNKNOWN): (C1 (id_143[au](UNKNOWN): outcome) == NodeOutcomeValue (id_509[au](SUCCESS): outcome))))
   EndCondition: (id_519[iu](UNKNOWN): ((id_513[iu](UNKNOWN): interruptibleCommandHandleValues(C3 ack (id_333[iu](UNKNOWN): string))) || (id_517[iu](UNKNOWN): ((id_515[iu](UNKNOWN): isknown(C3 ack (id_333[iu](UNKNOWN): string))) && Boolean constant true (id_138[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_138[au](1): boolean)
   PreCondition: Boolean constant true (id_138[au](1): boolean)
   PostCondition: (id_501[iu](UNKNOWN): (id_505[iu](UNKNOWN): (C3 (id_335[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_503[iu](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_136[au](0): boolean)
   AncestorInvariantCondition: (id_491[au](1): (Boolean constant true (id_138[au](1): boolean)))Boolean constant true (id_138[au](1): boolean)))
   AncestorEndCondition: (id_493[au](0): (Boolean constant false (id_136[au](0): boolean) || (id_408[au](0): childrenFinished(0:4))))
   ParentExecutingCondition: (id_325[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_191[au](EXECUTING): state)))
   ParentWaitingCondition: (id_327[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_195[au](WAITING): state)))
   ParentFinishedCondition: (id_329[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_199[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_495[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_498[iu](UNKNOWN): allCommandHandleValues(C3 ack (id_333[iu](UNKNOWN): string)))
   Command handle: C3 (id_335[au](UNKNOWN): command_handle)
   mem_priority2: mem_priority2 (id_331[iu](30): int)
  }
  C4{
   State: C4 (id_338[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_136[au](0): boolean)
   StartCondition: Boolean constant true (id_138[au](1): boolean)
   EndCondition: (id_554[au](1): ((id_548[au](1): interruptibleCommandHandleValues(C4 ack (id_396[au](COMMAND_DENIED): string))) || (id_552[au](1): ((id_550[au](1): isknown(C4 ack (id_396[au](COMMAND_DENIED): string))) && Boolean constant true (id_138[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_138[au](1): boolean)
   PreCondition: Boolean constant true (id_138[au](1): boolean)
   PostCondition: (id_542[au](UNKNOWN): (id_546[au](UNKNOWN): (C4 (id_398[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_544[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_136[au](0): boolean)
   AncestorInvariantCondition: (id_532[au](1): (Boolean constant true (id_138[au](1): boolean)))Boolean constant true (id_138[au](1): boolean)))
   AncestorEndCondition: (id_534[iu](UNKNOWN): (Boolean constant false (id_136[au](0): boolean) || (id_408[au](0): childrenFinished(0:4))))
   ParentExecutingCondition: (id_388[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_191[au](EXECUTING): state)))
   ParentWaitingCondition: (id_390[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_195[au](WAITING): state)))
   ParentFinishedCondition: (id_392[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_199[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_536[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_539[au](1): allCommandHandleValues(C4 ack (id_396[au](COMMAND_DENIED): string)))
   Command handle: C4 (id_398[au](UNKNOWN): command_handle)
   mem_priority2: mem_priority2 (id_394[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c1(20) = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C4' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C4' on the state change queue in position 9
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:step][2:0] State change queue: C4 
[PlexilExec:lock]Locking node C4
[PlexilExec:step][2:0:0] Transitioning node C4
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:unlock]Unlocking node C4
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C4' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C4' on the state change queue in position 10
[PlexilExec:step][2:1] State change queue: C4 
[PlexilExec:lock]Locking node C4
[PlexilExec:step][2:1:0] Transitioning node C4
[PlexilExec:notifyNodeConditionChanged] for node C4
[PlexilExec:unlock]Unlocking node C4
[PlexilExec:handleConditionsChanged]Node C4 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C4' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_86[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_136[au](0): boolean)
 StartCondition: Boolean constant true (id_138[au](1): boolean)
 EndCondition: (id_408[au](0): childrenFinished(1:4))
 InvariantCondition: Boolean constant true (id_138[au](1): boolean)
 PreCondition: Boolean constant true (id_138[au](1): boolean)
 PostCondition: Boolean constant true (id_138[au](1): boolean)
 RepeatCondition: Boolean constant false (id_136[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_138[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_136[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_138[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_136[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_136[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_400[iu](UNKNOWN): childrenWaitingOrFinished(0:4))
  C1{
   State: C1 (id_141[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_136[au](0): boolean)
   StartCondition: Boolean constant true (id_138[au](1): boolean)
   EndCondition: (id_441[au](0): ((id_435[au](0): interruptibleCommandHandleValues(C1 ack (id_207[au](COMMAND_SENT_TO_SYSTEM): string))) || (id_439[au](0): ((id_437[au](1): isknown(C1 ack (id_207[au](COMMAND_SENT_TO_SYSTEM): string))) && (id_425[au](0): (IntegerValue (id_427[au](10): int) == returnValue (id_203[au](-1): int)))))))
   InvariantCondition: Boolean constant true (id_138[au](1): boolean)
   PreCondition: Boolean constant true (id_138[au](1): boolean)
   PostCondition: (id_429[au](1): (id_433[au](1): (C1 (id_209[au](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_431[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_136[au](0): boolean)
   AncestorInvariantCondition: (id_415[au](1): (Boolean constant true (id_138[au](1): boolean)))Boolean constant true (id_138[au](1): boolean)))
   AncestorEndCondition: (id_417[iu](UNKNOWN): (Boolean constant false (id_136[au](0): boolean) || (id_408[au](0): childrenFinished(1:4))))
   ParentExecutingCondition: (id_193[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_191[au](EXECUTING): state)))
   ParentWaitingCondition: (id_197[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_195[au](WAITING): state)))
   ParentFinishedCondition: (id_201[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_199[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_419[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_422[au](1): allCommandHandleValues(C1 ack (id_207[au](COMMAND_SENT_TO_SYSTEM): string)))
   Command handle: C1 (id_209[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   head_priority: head_priority (id_205[au](20): int)
   returnValue: returnValue (id_203[au](-1): int)
  }
  C2{
   State: C2 (id_212[au](WAITING): state) (0)
   SkipCondition: Boolean constant false (id_136[au](0): boolean)
   StartCondition: (id_468[au](UNKNOWN): (id_472[au](UNKNOWN): (C3 (id_277[au](UNKNOWN): outcome) == NodeOutcomeValue (id_470[au](SUCCESS): outcome))))
   EndCondition: (id_480[iu](UNKNOWN): ((id_474[iu](UNKNOWN): interruptibleCommandHandleValues(C2 ack (id_270[iu](UNKNOWN): string))) || (id_478[iu](UNKNOWN): ((id_476[iu](UNKNOWN): isknown(C2 ack (id_270[iu](UNKNOWN): string))) && Boolean constant true (id_138[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_138[au](1): boolean)
   PreCondition: Boolean constant true (id_138[au](1): boolean)
   PostCondition: (id_462[iu](UNKNOWN): (id_466[iu](UNKNOWN): (C2 (id_272[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_464[iu](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_136[au](0): boolean)
   AncestorInvariantCondition: (id_452[au](1): (Boolean constant true (id_138[au](1): boolean)))Boolean constant true (id_138[au](1): boolean)))
   AncestorEndCondition: (id_454[au](0): (Boolean constant false (id_136[au](0): boolean) || (id_408[au](0): childrenFinished(1:4))))
   ParentExecutingCondition: (id_262[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_191[au](EXECUTING): state)))
   ParentWaitingCondition: (id_264[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_195[au](WAITING): state)))
   ParentFinishedCondition: (id_266[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_199[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_456[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_459[iu](UNKNOWN): allCommandHandleValues(C2 ack (id_270[iu](UNKNOWN): string)))
   Command handle: C2 (id_272[au](UNKNOWN): command_handle)
   v_priority2: v_priority2 (id_268[iu](25): int)
  }
  C3{
   State: C3 (id_275[au](WAITING): state) (0)
   SkipCondition: Boolean constant false (id_136[au](0): boolean)
   StartCondition: (id_507[au](UNKNOWN): (id_511[au](UNKNOWN): (C1 (id_143[au](UNKNOWN): outcome) == NodeOutcomeValue (id_509[au](SUCCESS): outcome))))
   EndCondition: (id_519[iu](UNKNOWN): ((id_513[iu](UNKNOWN): interruptibleCommandHandleValues(C3 ack (id_333[iu](UNKNOWN): string))) || (id_517[iu](UNKNOWN): ((id_515[iu](UNKNOWN): isknown(C3 ack (id_333[iu](UNKNOWN): string))) && Boolean constant true (id_138[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_138[au](1): boolean)
   PreCondition: Boolean constant true (id_138[au](1): boolean)
   PostCondition: (id_501[iu](UNKNOWN): (id_505[iu](UNKNOWN): (C3 (id_335[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_503[iu](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_136[au](0): boolean)
   AncestorInvariantCondition: (id_491[au](1): (Boolean constant true (id_138[au](1): boolean)))Boolean constant true (id_138[au](1): boolean)))
   AncestorEndCondition: (id_493[au](0): (Boolean constant false (id_136[au](0): boolean) || (id_408[au](0): childrenFinished(1:4))))
   ParentExecutingCondition: (id_325[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_191[au](EXECUTING): state)))
   ParentWaitingCondition: (id_327[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_195[au](WAITING): state)))
   ParentFinishedCondition: (id_329[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_199[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_495[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_498[iu](UNKNOWN): allCommandHandleValues(C3 ack (id_333[iu](UNKNOWN): string)))
   Command handle: C3 (id_335[au](UNKNOWN): command_handle)
   mem_priority2: mem_priority2 (id_331[iu](30): int)
  }
  C4{
   State: C4 (id_338[au](FINISHED): state) (0)
   Outcome: C4 (id_340[au](FAILURE): outcome)
   Failure type: C4 (id_342[au](POST_CONDITION_FAILED): failure)
   Command handle: C4 (id_398[au](COMMAND_DENIED): command_handle)
   mem_priority2: mem_priority2 (id_394[au](30): int)
  }
}

[Test:testOutput]Sending command result c1(20) = 10
[PlexilExec:notifyNodeConditionChanged] for node C1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 11
[PlexilExec:step][3:0] State change queue: C1 
[PlexilExec:lock]Locking node C1
[PlexilExec:step][3:0:0] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 12
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C1' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C1' on the state change queue in position 13
[PlexilExec:step][3:1] State change queue: C3 C1 
[PlexilExec:lock]Locking node C3
[PlexilExec:lock]Locking node C1
[PlexilExec:step][3:1:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleNeedsExecution]Storing action for node 'C3' of type 'Command' to be executed.
[PlexilExec:step][3:1:1] Transitioning node C1
[PlexilExec:notifyNodeConditionChanged] for node C1
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:unlock]Unlocking node C1
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C1 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C1' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c3() into noId with ack C3 ack (id_333[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_86[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_136[au](0): boolean)
 StartCondition: Boolean constant true (id_138[au](1): boolean)
 EndCondition: (id_408[au](0): childrenFinished(2:4))
 InvariantCondition: Boolean constant true (id_138[au](1): boolean)
 PreCondition: Boolean constant true (id_138[au](1): boolean)
 PostCondition: Boolean constant true (id_138[au](1): boolean)
 RepeatCondition: Boolean constant false (id_136[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_138[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_136[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_138[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_136[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_136[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_400[iu](UNKNOWN): childrenWaitingOrFinished(0:4))
  C1{
   State: C1 (id_141[au](FINISHED): state) (0)
   Outcome: C1 (id_143[au](SUCCESS): outcome)
   Command handle: C1 (id_209[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   head_priority: head_priority (id_205[au](20): int)
   returnValue: returnValue (id_203[iu](10): int)
  }
  C2{
   State: C2 (id_212[au](WAITING): state) (0)
   SkipCondition: Boolean constant false (id_136[au](0): boolean)
   StartCondition: (id_468[au](UNKNOWN): (id_472[au](UNKNOWN): (C3 (id_277[au](UNKNOWN): outcome) == NodeOutcomeValue (id_470[au](SUCCESS): outcome))))
   EndCondition: (id_480[iu](UNKNOWN): ((id_474[iu](UNKNOWN): interruptibleCommandHandleValues(C2 ack (id_270[iu](UNKNOWN): string))) || (id_478[iu](UNKNOWN): ((id_476[iu](UNKNOWN): isknown(C2 ack (id_270[iu](UNKNOWN): string))) && Boolean constant true (id_138[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_138[au](1): boolean)
   PreCondition: Boolean constant true (id_138[au](1): boolean)
   PostCondition: (id_462[iu](UNKNOWN): (id_466[iu](UNKNOWN): (C2 (id_272[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_464[iu](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_136[au](0): boolean)
   AncestorInvariantCondition: (id_452[au](1): (Boolean constant true (id_138[au](1): boolean)))Boolean constant true (id_138[au](1): boolean)))
   AncestorEndCondition: (id_454[au](0): (Boolean constant false (id_136[au](0): boolean) || (id_408[au](0): childrenFinished(2:4))))
   ParentExecutingCondition: (id_262[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_191[au](EXECUTING): state)))
   ParentWaitingCondition: (id_264[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_195[au](WAITING): state)))
   ParentFinishedCondition: (id_266[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_199[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_456[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_459[iu](UNKNOWN): allCommandHandleValues(C2 ack (id_270[iu](UNKNOWN): string)))
   Command handle: C2 (id_272[au](UNKNOWN): command_handle)
   v_priority2: v_priority2 (id_268[iu](25): int)
  }
  C3{
   State: C3 (id_275[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_136[au](0): boolean)
   StartCondition: (id_507[iu](UNKNOWN): (id_511[iu](UNKNOWN): (C1 (id_143[au](SUCCESS): outcome) == NodeOutcomeValue (id_509[au](SUCCESS): outcome))))
   EndCondition: (id_519[au](0): ((id_513[au](0): interruptibleCommandHandleValues(C3 ack (id_333[au](UNKNOWN): string))) || (id_517[au](0): ((id_515[au](0): isknown(C3 ack (id_333[au](UNKNOWN): string))) && Boolean constant true (id_138[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_138[au](1): boolean)
   PreCondition: Boolean constant true (id_138[au](1): boolean)
   PostCondition: (id_501[au](UNKNOWN): (id_505[au](UNKNOWN): (C3 (id_335[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_503[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_136[au](0): boolean)
   AncestorInvariantCondition: (id_491[au](1): (Boolean constant true (id_138[au](1): boolean)))Boolean constant true (id_138[au](1): boolean)))
   AncestorEndCondition: (id_493[iu](UNKNOWN): (Boolean constant false (id_136[au](0): boolean) || (id_408[au](0): childrenFinished(2:4))))
   ParentExecutingCondition: (id_325[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_191[au](EXECUTING): state)))
   ParentWaitingCondition: (id_327[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_195[au](WAITING): state)))
   ParentFinishedCondition: (id_329[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_199[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_495[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_498[au](0): allCommandHandleValues(C3 ack (id_333[au](UNKNOWN): string)))
   Command handle: C3 (id_335[au](UNKNOWN): command_handle)
   mem_priority2: mem_priority2 (id_331[au](30): int)
  }
  C4{
   State: C4 (id_338[au](FINISHED): state) (0)
   Outcome: C4 (id_340[au](FAILURE): outcome)
   Failure type: C4 (id_342[au](POST_CONDITION_FAILED): failure)
   Command handle: C4 (id_398[au](COMMAND_DENIED): command_handle)
   mem_priority2: mem_priority2 (id_394[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c3() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 14
[PlexilExec:step][4:0] State change queue: C3 
[PlexilExec:lock]Locking node C3
[PlexilExec:step][4:0:0] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 15
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C3' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C3' on the state change queue in position 16
[PlexilExec:step][4:1] State change queue: C2 C3 
[PlexilExec:lock]Locking node C2
[PlexilExec:lock]Locking node C3
[PlexilExec:step][4:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleNeedsExecution]Storing action for node 'C2' of type 'Command' to be executed.
[PlexilExec:step][4:1:1] Transitioning node C3
[PlexilExec:notifyNodeConditionChanged] for node C3
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:unlock]Unlocking node C3
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node C3 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C3' was previously eligible to transition but isn't now.
[Test:testOutput]Executing c2() into noId with ack C2 ack (id_270[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_86[au](EXECUTING): state) (0)
 SkipCondition: Boolean constant false (id_136[au](0): boolean)
 StartCondition: Boolean constant true (id_138[au](1): boolean)
 EndCondition: (id_408[au](0): childrenFinished(3:4))
 InvariantCondition: Boolean constant true (id_138[au](1): boolean)
 PreCondition: Boolean constant true (id_138[au](1): boolean)
 PostCondition: Boolean constant true (id_138[au](1): boolean)
 RepeatCondition: Boolean constant false (id_136[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_138[au](1): boolean)
 AncestorEndCondition: Boolean constant false (id_136[au](0): boolean)
 ParentExecutingCondition: Boolean constant true (id_138[au](1): boolean)
 ParentWaitingCondition: Boolean constant false (id_136[au](0): boolean)
 ParentFinishedCondition: Boolean constant false (id_136[au](0): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_400[iu](UNKNOWN): childrenWaitingOrFinished(0:4))
  C1{
   State: C1 (id_141[au](FINISHED): state) (0)
   Outcome: C1 (id_143[au](SUCCESS): outcome)
   Command handle: C1 (id_209[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   head_priority: head_priority (id_205[au](20): int)
   returnValue: returnValue (id_203[iu](10): int)
  }
  C2{
   State: C2 (id_212[au](EXECUTING): state) (0)
   SkipCondition: Boolean constant false (id_136[au](0): boolean)
   StartCondition: (id_468[iu](UNKNOWN): (id_472[iu](UNKNOWN): (C3 (id_277[au](SUCCESS): outcome) == NodeOutcomeValue (id_470[au](SUCCESS): outcome))))
   EndCondition: (id_480[au](0): ((id_474[au](0): interruptibleCommandHandleValues(C2 ack (id_270[au](UNKNOWN): string))) || (id_478[au](0): ((id_476[au](0): isknown(C2 ack (id_270[au](UNKNOWN): string))) && Boolean constant true (id_138[au](1): boolean)))))
   InvariantCondition: Boolean constant true (id_138[au](1): boolean)
   PreCondition: Boolean constant true (id_138[au](1): boolean)
   PostCondition: (id_462[au](UNKNOWN): (id_466[au](UNKNOWN): (C2 (id_272[au](UNKNOWN): command_handle) == NodeCommandHandleValue (id_464[au](COMMAND_SENT_TO_SYSTEM): command_handle))))
   RepeatCondition: Boolean constant false (id_136[au](0): boolean)
   AncestorInvariantCondition: (id_452[au](1): (Boolean constant true (id_138[au](1): boolean)))Boolean constant true (id_138[au](1): boolean)))
   AncestorEndCondition: (id_454[iu](UNKNOWN): (Boolean constant false (id_136[au](0): boolean) || (id_408[au](0): childrenFinished(3:4))))
   ParentExecutingCondition: (id_262[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_191[au](EXECUTING): state)))
   ParentWaitingCondition: (id_264[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_195[au](WAITING): state)))
   ParentFinishedCondition: (id_266[iu](UNKNOWN): (SimpleTask (id_86[au](EXECUTING): state) == anonymous (id_199[au](FINISHED): state)))
   AbortCompleteCondition: anonymous (id_456[iu](UNKNOWN): boolean)
   CommandHandleReceivedCondition: (id_459[au](0): allCommandHandleValues(C2 ack (id_270[au](UNKNOWN): string)))
   Command handle: C2 (id_272[au](UNKNOWN): command_handle)
   v_priority2: v_priority2 (id_268[au](25): int)
  }
  C3{
   State: C3 (id_275[au](FINISHED): state) (0)
   Outcome: C3 (id_277[au](SUCCESS): outcome)
   Command handle: C3 (id_335[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   mem_priority2: mem_priority2 (id_331[au](30): int)
  }
  C4{
   State: C4 (id_338[au](FINISHED): state) (0)
   Outcome: C4 (id_340[au](FAILURE): outcome)
   Failure type: C4 (id_342[au](POST_CONDITION_FAILED): failure)
   Command handle: C4 (id_398[au](COMMAND_DENIED): command_handle)
   mem_priority2: mem_priority2 (id_394[au](30): int)
  }
}

[Test:testOutput]Sending command ACK c2() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node C2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 17
[PlexilExec:step][5:0] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][5:0:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'C2' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'C2' on the state change queue in position 18
[PlexilExec:step][5:1] State change queue: C2 
[PlexilExec:lock]Locking node C2
[PlexilExec:step][5:1:0] Transitioning node C2
[PlexilExec:notifyNodeConditionChanged] for node C2
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node C2
[PlexilExec:handleConditionsChanged]Node C2 had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'C2' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 19
[PlexilExec:step][5:2] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][5:2:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 20
[PlexilExec:step][5:3] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][5:3:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleTask' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleTask' on the state change queue in position 21
[PlexilExec:step][5:4] State change queue: SimpleTask 
[PlexilExec:lock]Locking node SimpleTask
[PlexilExec:step][5:4:0] Transitioning node SimpleTask
[PlexilExec:notifyNodeConditionChanged] for node SimpleTask
[PlexilExec:unlock]Unlocking node SimpleTask
[PlexilExec:handleConditionsChanged]Node SimpleTask had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleTask' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
SimpleTask{
 State: SimpleTask (id_86[au](FINISHED): state) (0)
 Outcome: SimpleTask (id_88[au](SUCCESS): outcome)
  C1{
   State: C1 (id_141[au](FINISHED): state) (0)
   Outcome: C1 (id_143[au](SUCCESS): outcome)
   Command handle: C1 (id_209[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   head_priority: head_priority (id_205[au](20): int)
   returnValue: returnValue (id_203[iu](10): int)
  }
  C2{
   State: C2 (id_212[au](FINISHED): state) (0)
   Outcome: C2 (id_214[au](SUCCESS): outcome)
   Command handle: C2 (id_272[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   v_priority2: v_priority2 (id_268[au](25): int)
  }
  C3{
   State: C3 (id_275[au](FINISHED): state) (0)
   Outcome: C3 (id_277[au](SUCCESS): outcome)
   Command handle: C3 (id_335[au](COMMAND_SENT_TO_SYSTEM): command_handle)
   mem_priority2: mem_priority2 (id_331[au](30): int)
  }
  C4{
   State: C4 (id_338[au](FINISHED): state) (0)
   Outcome: C4 (id_340[au](FAILURE): outcome)
   Failure type: C4 (id_342[au](POST_CONDITION_FAILED): failure)
   Command handle: C4 (id_398[au](COMMAND_DENIED): command_handle)
   mem_priority2: mem_priority2 (id_394[au](30): int)
  }
}

