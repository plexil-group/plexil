#! /bin/bash

# Copyright (c) 2006-2008, Universities Space Research Association (USRA).
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Universities Space Research Association nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

checkWarn()
{
  if [ "$summary" = 1 ]
    then
    echo $1
  fi
    exit 1
}

#Validate file
valid()
{
  if [ ! -e $1 ] && [ $summary = 1 ]
    then
      echo "ERROR: $1 does not exist"
      warning=1
  fi
  return
}

portscan()
{
for((j=65400;j<=65420;++j))
do
if [ "$platform" = "Darwin"  ]
  then
    tport=`netstat -a | grep $j`
  else
    tport=`netstat -l | grep $j`
fi
    if [ "${tport:-FALSE}" = FALSE ] && [ ! -f /tmp/Luv_$j ] ; then
    	echo "-n $j"
	return
    fi    
done
return
}

skip=
warning=
DEFAULT_HOST=127.0.0.1

usage="Usage: run-te [-s] [-v [-h <hostname>] [-n <portnumber>] -b] [-d <debug file>] \
                     [-eprompt] [-wprompt] [-log <log file>] [-check] \
                     <plan> [<script>] [-l <library>]*"

# Convenient though stylized script for running exec-test-runner_g_rt.
# Requires environment variable UE_HOME to be set to desired Exec/test directory.
# An optional environment variable UE_EXECUTABLE names an alternate executable.
# Other options:
#
#  -s suppresses a leading printed summary.
#  -v requests that plan state be transmitted to the UE viewer.
#  -h hostname of viewer
#  -n portnumber of viewer
#  -b enables breakpoints in viewer (recommended)
#  -d debug file (default is Debug.cfg)
#  -check enables Java checker program
#  -l  specifies a plan library (.plx file)
#  -a used only for viewer acquire PID

# Unless simulation script file is specified, it defaults to (in order
# of existence):
#        PLAN-script.plx
#        PLAN_script.plx
#        script-PLAN.plx
#        script_PLAN.plx
# located either in the current directory, or in a 'scripts'
# subdirectory, where PLAN is the basename of the plan argument.  The
# plan and script files are schecked for existence (but not the libraries).  If
# none of these script files exist, the empty script is used:
#        $PLEXIL_HOME/src/apps/TestExec/test/scripts/empty-script.plx

. $PLEXIL_HOME/bin/plexil-setup.sh

# Determine executable - the mode is determined by what you indicate the the VariantRules files located in 
#1) apps/TestExec, 
#2) app-framework, 
#3) universal-exec, and 
#4) interfaces
if [ $UE_EXECUTABLE ]
then
    prog=$UE_EXECUTABLE
elif [ -f $PLEXIL_HOME/bin/TestExec ]
then
    prog=$PLEXIL_HOME/bin/TestExec
elif [ -f $PLEXIL_HOME/src/apps/TestExec/TestExec ]
then
    prog=$PLEXIL_HOME/src/apps/TestExec/TestExec
else
    checkWarn "UE executable not found, aborting"
fi

$PLEXIL_HOME/bin/plexil-check-prog $prog

# Check for summary suppression
if [ '-s' = "$1" ]
  then
    summary=0
    shift
  else
    summary=1
fi

# Check for viewer request
if [ '-v' = "$1" ]
  then
    viewer=-v
    shift
  else
    viewer=
fi

# Check for viewer host name
if [ '-h' = "$1" ]
  then
    host="-h $2"
    shift
    shift
  else
    host=
fi

# Check for viewer port number
if [ '-n' = "$1" ]
  then
    port="-n $2"
    skip=1
    shift
    shift
  else
    port=
fi

# Check for viewer should block
if [ '-b' = "$1" ]
  then
    block="-b"
    shift
  else
    block=
fi

# Check for LUV automation
if [ '-a' = "$1" ]
  then
    automate="true"
    shift
  else
    automate=
fi

# Check for specified debug file
if [ '-d' = "$1" ]
  then
    shift
    valid $1
    debug_file="$1"
    shift
  else
    debug_file="Debug.cfg"
fi

# Check for error prompt requested
if [ '-eprompt' = "$1" ]
  then
    eprompt="$1"
    shift
  else
    eprompt=
fi

# Check for warning prompt requested
if [ '-wprompt' = "$1" ]
  then
    wprompt="$1"
    shift
  else
    wprompt=
fi

# Check for specified log file
if [ '-log' = "$1" ]
  then 
    shift
    log_file="-log $1"
    shift
  else
    log_file=
fi

# Flag no check
if [ '-check' = "$1" ]
  then 
    shift
    check="true"
  else
    check="false"
fi

# Any more arguments?
if [ $# -eq 0 ]
  then
    checkWarn $usage
fi

# Process first argument, which is the plan.
plan=$1
shift

# Check the plan's existence
if [ ! -e $plan ]
  then
    checkWarn "Error: Plan $plan does not exist."
fi


# Check plan for errors
if [ $check = "true" ] && [ -f $PLEXIL_HOME/bin/checkDecls ]
  then $PLEXIL_HOME/bin/checkDecls $plan
       if [ $? -gt 0 ]
         then
           exit 1
	fi
    elif [ ! -f $PLEXIL_HOME/bin/checkDecls ]
      then
	echo Error: $PLEXIL_HOME/bin/checkDecls not found.	
fi

# Default simulation script
script=$PLEXIL_HOME/src/apps/TestExec/test/scripts/empty-script.plx

# The plan file's extension, used to compute guessed script name.
ext=".`echo $plan | awk -F. '{print $2}'`"

# Alternate script candidates
script1=`basename $plan $ext`-script.plx
script2=`basename $plan $ext`_script.plx
script3=script-`basename $plan $ext`.plx
script4=script_`basename $plan $ext`.plx

# If no more arguments, or next argument -l, check for candidate scripts.
# Otherwise, next argument must be script.
if [ $# -eq 0 ]
  then
    guess_script=1
  elif [ $1 = '-l' ]
    then
      guess_script=1
    else
      guess_script=0
      script=$1
      shift
      if [ ! -e $script ]
        then
          checkWarn "Error: Script $script does not exist."
      fi
fi

if [ $guess_script -eq 1 ]
  then
    for s in $script1 $script2 $script3 $script4
      do
        if [ -e $s ]
          then
            script=$s
            break
          elif [ -e scripts/$s ]
            then
              script=scripts/$s
              break
        fi
    done
fi

# The only valid next argument left is "-l", which precedes each library
if [ $# -gt 0 ]
  then
    if [ '-l' = $1 ] 
      then
        libraries=$*
        while [ $# -gt 0 ] ; do
	  if [ '-l' = $1 ] ; then
	    valid $2
	    shift
	    shift
	  else
	    shift
	  fi
	done
	if [ "$warning" = 1 ] ; then
	  checkWarn "Library files missing, aborting"
	fi
      else
        echo Error: expected -l at this point
        checkWarn $usage
    fi
fi

# Check for port number
if [ "$viewer" = "-v" ] ; then
  host=${host:="-h $DEFAULT_HOST"}
  port=${port:=`portscan`}
    if [ "$port" = "" ] ; then
      checkWarn "Exceeds Maximum number of allowable viewer instances.  Please close
      an instance prior to execution"      
    fi
  if [ "$skip" = "" ] ; then
    luv ${port//[^0-9]/}
    until [ -f /tmp/Luv_${port//[^0-9]/} ]
      do
	:
    done    
    if [ "$platform" = "Darwin" ] ; then
      sleep 1
    else    
      usleep 500
    fi
  fi    
fi

# Print summary if desired
if [ $summary -eq 1 ] 
  then
    echo Running UE from $PLEXIL_HOME
    echo "  Plan:      $plan"
    echo "  Script:    $script"
    echo "  Port: 	${port//[^0-9]/}"        
    echo "  Libraries: $libraries"
    echo
fi

if [ "$automate" = "true" ]
  then
    $prog -p $plan -s $script -d $debug_file $libraries $eprompt $wprompt $log_file $viewer $host $port $block &
    echo "RUN_TE_PID$!"
    trap "{ kill $!; }" SIGINT
  else
    $prog -p $plan -s $script -d $debug_file $libraries $eprompt $wprompt $log_file $viewer $host $port $block
fi
