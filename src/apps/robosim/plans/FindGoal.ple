Integer Command MoveUp (String robotName);
Integer Command MoveDown (String robotName);
Integer Command MoveRight (String robotName);
Integer Command MoveLeft (String robotName);
Integer Command Move (String robotName, Integer holder);
Real[5] Command QueryEnergySensor (String robotName);
Real[5] Command QueryGoalSensor (String robotName);
Real[3] Command QueryRobotState (String robotName);
Integer[4] Command QueryVisibilitySensor (String robotName);

RootNode:
{
    String RobotName = "RobotYellow";

    Robot:
    {
        //Arrays
        Real energy[5] = #(-999.0 0.0 0.0 0.0);
        Real goal[5] = #(-999.0 0.0 0.0 0.0 0.0);
        Integer visible[4] = #(-999 0 0 0);
        Real rstate[3] = #(-999.0 0.0 1.0);
        Real moveList[10] = #(0 0 0 0 0 0 0 0 0 0);
    
        //Array assignments
        Real currEnergy = 1.0;
        Real sLocR = 0.0;
        Real sLocC = 0.0;
    
        //Energy Sensor
        Real eSenL = 0.0;
        Real eSenR = 0.0;
        Real eSenU = 0.0;
        Real eSenD = 0.0;
        Real eCheckD = 0.0;
    
        //Goal Sensor
        Real gSenL = 0.0;
        Real gSenR = 0.0;
        Real gSenU = 0.0;
        Real gSenD = 0.0;
        Real gCheckD = 0.0;    
    
        //Visibility Sensor
        Integer vSenL = 0;
        Integer vSenR = 0;
        Integer vSenU = 0;
        Integer vSenD = 0;            
    
        //Persistence
        Integer res = -999; 
        Integer lastRes = 3;       
        Real lastLocR = 0.0;
        Real lastLocC = 0.0;
        Real lastGoalL = 0.0;
        Real lastGoalR = 0.0;    
        Real lastGoalU = 0.0;
        Real lastGoalD = 0.0;
    
        //Comparison
        Integer counter = 1;
        Real walker = 0;
        Integer holder = -1;
        Integer holder2 = -1;
        Integer arrayGimp = 0; //used since arrays are preloaded and don't like -1
        Integer blocked = 0;
        Integer status = 0;
        Integer clock = 0;  //for counting every other sequence in lieu of modulus
    
        while (counter < 120 && currEnergy > 0 && status == 0)
            NodeWrapper:
            {      
                //Required to syncronize sensors to assignment
                PrimeArrays: Concurrence
                    {
                        ToEnergyZero: energy[0] = -999.0;
                        ToGoalZero: goal[0] = -999.0;
                        ToVisZero: visible[0] = -999;
                        ToLocationZero: rstate[0] = -999.0;
                    }
                EnergySensor:
                {
                    EndCondition energy[0] != -999;
                    PostCondition isKnown(energy);
                    energy = QueryEnergySensor(RobotName);
                }	    
                GoalSensor:
                {
                    EndCondition goal[0] != -999;
                    PostCondition  isKnown(goal);
                    goal = QueryGoalSensor(RobotName);
                }
                VisibilitySensor:
                {
                    EndCondition visible[0] != -999;	    
                    PostCondition isKnown(visible);	   
                    visible = QueryVisibilitySensor(RobotName);
                }
                LocationSensor:
                {
                    EndCondition rstate[0] != -999;
                    PostCondition  isKnown(rstate);      
                    rstate = QueryRobotState(RobotName);
                }
            }//end of Nodewrapper  

        ComparisonTrackers: Concurrence
            {	  
                //Assign primary tracker values
                ToCurrEnergy: currEnergy = rstate[2];
                ToCurrRow: sLocR = rstate[0]; 
                ToCurrCol: sLocC = rstate[1];
                SetWalker: walker = 0;
                SetHolder: holder = -1;
                ResetRes: res = -999;
            }  //end of status concurrence						

	ResetClock:
	{
	    SkipCondition clock != 5;
	    clock = 0;
	}
	IncrementClock: clock = clock + 1;
	ArrayIndexes: Concurrence
            {
                //Assign values from array to be viewed in MoveRobot Node
                //SkipCondition sLocR == lastLocR && sLocC == lastLocC;
                ToEnergyLeft: eSenL = energy[3];
                ToEnergyRight:eSenR = energy[1];
                ToEnergyUp: eSenU = energy[0];
                ToEnergyDown: eSenD = energy[2];
                ToEnergyCheck: eCheckD = energy[4];
                ToGoalUp: gSenU = goal[0];
                ToGoalRight: gSenR = goal[1];
                ToGoalDown: gSenD = goal[2];
                ToGoalLeft: gSenL = goal[3];
                ToGoalCheck: gCheckD = goal[4];
                ToVisUp: vSenU = visible[0];
                ToVisRight: vSenR = visible[1];
                ToVisDown: vSenD = visible[2];
                ToVisLeft: vSenL = visible[3];
            }//end of Assignments		
	
	//Stores Previous Moves in array
	RecordMovements:
	{
            Check1:
            {
                SkipCondition clock != 1;
                AssignFirstMoveR: moveList[0] = sLocR;
                AssignFirstMoveC: moveList[1] = sLocC;
            }
            Check2:
            {
                SkipCondition  clock != 2;	     
                AssignSecondMoveR: moveList[2] = sLocR;
                AssignSecondMoveC: moveList[3] = sLocC;	 
            }
            Check3:
            {
                SkipCondition  clock != 3;	     
                AssignThirdMoveR: moveList[4] = sLocR;
                AssignThirdMoveC: moveList[5] = sLocC;	 
            }
            Check4:
            {
                SkipCondition  clock != 4;	     
                AssignFourthMoveR: moveList[6] = sLocR;
                AssignFourthMoveC: moveList[7] = sLocC;
            }
            Check5:
            {
                SkipCondition  clock != 5;	     
                AssignFifthMoveR: moveList[8] = sLocR;
                AssignFifthMoveC: moveList[9] = sLocC;
            }
            IdentifyStop:
            {
                if ( moveList[0] == moveList[2] &&
                     moveList[1] == moveList[3] &&
                     lastRes == 0 ) blocked = 1;
                else blocked = 0;
                endif;
            }
	   
	}	
		
	//Decision model for energy, obstacles, goal, or default
	Tactics: Try	  
            {
                //Model for determining energy direction
                //TODO: incorporate workaround incase run into obstacle
                //while trying to get energy.
                //PostCondition res == 1;
                SkipCondition goal[4] == 1;
                DecideEnergy: {
                    StartCondition currEnergy < 0.75; 
                    SkipCondition currEnergy > 0.74 || MoveEnergy.outcome == SKIPPED;
                    PostCondition MoveEnergy.outcome == SUCCESS;
                    EndCondition MoveEnergy.outcome == SUCCESS || MoveEnergy.outcome == SKIPPED;
                
                    MoveEnergy: Try
                        {
                            SkipCondition (EngGoUp.outcome == SKIPPED &&
                                           EngGoRight.outcome == SKIPPED &&
                                           EngGoDown.outcome == SKIPPED &&
                                           EngGoLeft.outcome == SKIPPED);
                    
                            EngGoUp: {
                                StartCondition energy[0] == 1;
                                SkipCondition energy[0] == 0;
                                //PostCondition res == 1;
                                EndCondition res != -999;
                                res = MoveUp(RobotName);
                            }
                            EngGoRight:
                            {
                                StartCondition energy[1] == 1;
                                SkipCondition energy[1] == 0;
                                //PostCondition res == 1;
                                EndCondition res != -999;
                                res = MoveRight(RobotName);
                            }
                            EngGoDown:
                            {
                                StartCondition energy[2] == 1;
                                SkipCondition energy[2] == 0;
                                //PostCondition res == 1;
                                EndCondition res != -999;
                                res = MoveDown(RobotName);
                            }	       	       
                            EngGoLeft:
                            {
                                StartCondition energy[3] == 1;
                                SkipCondition energy[3] == 0;
                                //PostCondition res == 1;
                                EndCondition res != -999;
                                res = MoveLeft(RobotName);
                            }	       
                        }	         
                }	
                //Model for determining workaround against obstacles	
                DecideObstacle:
                {
                    SkipCondition (vSenL == 1 && vSenR == 1 &&
                                   vSenU == 1 && vSenD == 1 && blocked == 0);
                    MoveObstacle: Try
                        {
                            ObsGoLeft:
                            {
                                StartCondition vSenL == 1;
                                SkipCondition vSenL == 0 || vSenL == -1;
                                //PostCondition res == 1;
                                EndCondition res != -999;
                                res = MoveLeft(RobotName);
                            }
                            ObsGoDown:
                            {
                                StartCondition vSenD == 1;
                                SkipCondition vSenD == 0 || vSenD == -1;
                                //PostCondition res == 1;
                                EndCondition res != -999;
                                res = MoveDown(RobotName);
                            }
                            ObsGoRight:
                            {
                                StartCondition vSenR == 1;	       
                                SkipCondition vSenR == 0 || vSenR == -1;
                                //PostCondition res == 1;
                                EndCondition res != -999;
                                res = MoveRight(RobotName);
                            }	       	       	       	       
                            ObsGoUp:
                            {
                                StartCondition vSenU == 1;	       
                                SkipCondition vSenU == 0 || vSenU == -1;
                                //PostCondition res == 1;
                                EndCondition res != -999;
                                res = MoveUp(RobotName);
                            }
                            Succession:
                            {	       
                            }
                        }
	       
                }
		
                //Model for determining direction towards goal center	    
                GoalManuever:
                {
                    Integer testSimpGoal = 0;
                    StartCondition (goal[0] > 0 || goal[1] > 0 ||
                                    goal[2] > 0 || goal[3] > 0);
                    SkipCondition (goal[0] == 0 && goal[1] == 0 &&
                                   goal[2] == 0 && goal[3] == 0);
                    EndCondition (testSimpGoal == 1 ||
                                  DecideGoal.outcome == SKIPPED || goal[4] == 1);

                    DecideGoal:
                    {		   
                        SkipCondition (goal[0] == 0 && goal[1] == 0 &&
                                       goal[2] == 0 && goal[3] == 0);
                        PostCondition DefineDoneGoal.outcome == SUCCESS;
                        EndCondition testSimpGoal == 1;
                        TestOptions:
                        {
	   		    for ( Integer i = 0; i < 4; i + 1 )
	     			PickWinner:
	     			{
                                    if ( goal[0] >= walker )
                                        {
                                            IssueUp:  walker = goal[0];
                                            HoldPlaceUp2: {
                                                SkipCondition  holder2 >= holder;
                                                holder2 = holder;
                                            }
                                            HoldPlaceUp:  holder = 0;
                                        }
                                    endif;

                                    if ( goal[1] >= walker ) 
                                        {
                                            IssueRight:  walker = goal[1];
                                            HoldPlaceRight2:
                                            {
                                                SkipCondition  holder2 >= holder;
                                                holder2 = holder;
                                            }						 
                                            HoldPlaceRight:  holder = 1;
                                        }
                                    endif;

                                    if ( goal[2] >= walker ) 
                                        {
                                            IssueDown:  walker = goal[2];
                                            HoldPlaceDown2:
                                            {
                                                SkipCondition  holder2 >= holder;
                                                holder2 = holder;
                                            }
                                            HoldPlaceDown:  holder = 2; 
                                        }
                                    endif;

                                    if ( goal[3] >= walker ) 
                                        {
                                            IssueLeft:  walker = goal[3];
                                            HoldPlaceLeft2: {
                                                SkipCondition  holder2 >= holder;
                                                holder2 = holder;
                                            }
                                            HoldPlaceLeft: holder = 3;
                                        }
                                    endif;

                                }//end of PickWinner
                        }//end of TestOptions	   
	      	   	GoalGoUp:
	      	   	{
                            StartCondition holder == 0;
                            SkipCondition goal[0] == 0 || holder != 0 || gSenU < lastGoalU;
                            //PostCondition res == 1;
                            EndCondition res != -999;
                            res = MoveUp(RobotName);
	    	        }
	    	        GoalGoRight:
	    	        {
                            StartCondition holder == 1;
                            SkipCondition goal[1] == 0 || holder != 1 || gSenR < lastGoalR;
                            //PostCondition res == 1;
                            EndCondition res != -999;
                            res = MoveRight(RobotName);
	      	        }
	      	        GoalGoDown:
	      	        {
                            StartCondition holder == 2;
                            SkipCondition goal[2] == 0 || holder != 2 || gSenD < lastGoalD;
                            //PostCondition res == 1;
                            EndCondition res != -999;
                            res = MoveDown(RobotName);
	      	        }	       	       
	      	        GoalGoLeft:
	      	        {
                            StartCondition holder == 3;
                            SkipCondition goal[3] == 0 || holder != 3 || gSenL < lastGoalL;
                            //PostCondition res == 1;
                            EndCondition res != -999;
                            res = MoveLeft(RobotName);
	      	        }
			AssignGimp:
			{
			    if ( holder2 == -1 ) 
                                arrayGimp = holder;
                            else
                                arrayGimp = holder2;
                            endif;
			}
			Pick2ndPlace:
			{
			    SkipCondition (GoalGoUp.outcome != SKIPPED ||
                                           GoalGoRight.outcome != SKIPPED ||
                                           GoalGoDown.outcome != SKIPPED ||
                                           GoalGoLeft.outcome != SKIPPED);
			    if ( goal[arrayGimp] != 0 ) 
                                //should actually be holder2 although array is picky
                                {
                                    UseAlternative:
                                    {
                                        //PostCondition res == 1;
                                        EndCondition res != -999;
                                        res = Move(RobotName, holder2);
                                    }
                                }
                            endif;
			}      
	      	        DefineSkipGoal:
	      	        {
                            SkipCondition (GoalGoUp.outcome == SUCCESS ||
                                           GoalGoRight.outcome == SUCCESS ||
                                           GoalGoDown.outcome == SUCCESS ||
                                           GoalGoLeft.outcome == SUCCESS);
                            StartCondition (GoalGoUp.outcome == SKIPPED &&
                                            GoalGoRight.outcome == SKIPPED &&
                                            GoalGoDown.outcome == SKIPPED &&
                                            GoalGoLeft.outcome == SKIPPED);
                            testSimpGoal = 1;
                        }
	      	        DefineDoneGoal:
	      	        {
                            SkipCondition (GoalGoUp.outcome == SKIPPED &&
                                           GoalGoRight.outcome == SKIPPED &&
                                           GoalGoDown.outcome == SKIPPED &&
                                           GoalGoLeft.outcome == SKIPPED);
                            StartCondition (GoalGoUp.outcome == SUCCESS ||
                                            GoalGoRight.outcome == SUCCESS ||
                                            GoalGoDown.outcome == SUCCESS ||
                                            GoalGoLeft.outcome == SUCCESS);
                            testSimpGoal = 1;
	      	        }
			DefineElse:
			{
                            StartCondition (DefineSkipGoal.outcome == SKIPPED &&
                                            DefineDoneGoal.outcome == SKIPPED);
                            testSimpGoal = 1;
			}	       	       
                    }//End of DecideGoal	
                }//End of GoalManuever
                Move:
                {		
                    //PostCondition res == 1;
                    EndCondition res != -999;
                    res = MoveDown(RobotName);
                }
            }//End of Tactics
	//Model for persisting data between moves, comparison values for obstacle comparisons
        Persistence: Concurrence
            {
                ToRes: res = res;
                ToLastRow: lastLocR = sLocR;
                ToLastCol: lastLocC = sLocC;
                ToLastRes: lastRes = res;
                ToLastGoalUp: lastGoalU = gSenU;
                ToLastGoalRight: lastGoalR = gSenR;
                ToLastGoalDown: lastGoalD = gSenD;
                ToLastGoalLeft: lastGoalL = gSenL;
                ToCounter: counter = counter + 1;
                CheckStatus: if (goal[4] == 1) status = 1; endif;
            }
    }
}


