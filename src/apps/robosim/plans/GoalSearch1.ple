// -*- Mode: Java -*-
// This is a Plexil plan for the RoboSim application.  It has the robot
// find the "goal".  NOTE: For some reason, the robot circles a while
// before landing on the goal spot.

// Contributed by Sudhanshu Vias of Iowa State University.

// Copyright (c) 2006-2010, Universities Space Research Association (USRA).
//  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Universities Space Research Association nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
// OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
// TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Real[5] Command QueryGoalSensor(String name);
Integer[4] Command QueryVisibilitySensor(String name);
Integer Command Move(String name, Integer direction);


GoalSearch:
{
	String RobotName = "RobotYellow";
	Integer Direction;
	Real RobotGoal[5];
	Real HighestSensorVal;
	Integer RobotVisibility[4];
	while ((! isKnown(RobotGoal[4])) || RobotGoal[4] != 1) {
		ReadGoalSensors:
		{
			// Exit node only after sensor data is registered
			EndCondition isKnown(RobotGoal[0]); 
			RobotGoal = QueryGoalSensor(RobotName);
		}

		ReadVisibility: // Check if anything is blocking the path
		{
			EndCondition isKnown(RobotVisibility[0]);
			RobotVisibility = QueryVisibilitySensor(RobotName);
		}

		InitReadSensor:
		{
			ReadUp:
            // Set value to start a comparison
			HighestSensorVal = RobotGoal[0];

			ResetDir:
			// Set direction to an invalid value. In 'Move' stage if the 
			// value remains -1 the robot will not move.
			Direction = -1;
		}

		CompareSensors:
		{
			// Compare each Sensor value.
			// If higher than previous store and change direction.
			for (Integer i = 1; i < 4; i + 1) {
				if (HighestSensorVal < RobotGoal[i]) {
					SetVal:
					HighestSensorVal = RobotGoal[i];
					ChangeDir:
					Direction = i;
				}
				endif
			} // For
		} // CompareSensors

		Move:
		{
			Integer Result;
			EndCondition isKnown(Result);
			if (Direction == -1)
				if (HighestSensorVal == 0) 
					//If direction invalid(-1)  do not move
					Result = 0;
				else 
					MoveUp:
					{
						EndCondition isKnown(Result);
						Result = Move(RobotName,0);
					}
			    endif
				elseif (RobotVisibility[Direction] == 0) {
				// Obstacle handling logic
				TurnOne:
				// Turn 90 degrees clockwise
				Direction = Direction + 1; 

				checkbound:
				if (Direction > 3)
					// Correct direction value if beyond 3,
					// e.g. if previously moving left (3)and then turn 90
					// degrees we must change the 4 to a 0 for up
					Direction = Direction - 4; 
				endif

				MakeTurnOne:
				{
					Integer move_turn1;
					EndCondition isKnown(move_turn1);
					for (Integer j = 0; j < 2; j + 1)
						//move two paces in the new direction
						move_turn1 = Move(RobotName,Direction);
				}
				DecideTurnTwo:
				Direction = Direction + 1;             
				checkturn: // Note should make as function or callable Node
				if (Direction > 3)
					Direction = Direction - 4;
				endif

				TaketurnTwo:
				{
					// Using Result and not local variable to 
					// satisfy Move Node's EndCondition.
					EndCondition isKnown(Result);
					for (Integer i = 0; i < 2; i + 1)
						Result = Move(RobotName,Direction);
				}

			} // End of obstacle handling logic
			else
				// No static obstacle
				Result = Move(RobotName,Direction);
			endif
		} // End Move
	} // End Loop
}

