/* Copyright (c) 2006-2008, Universities Space Research Association (USRA).
*  All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Universities Space Research Association nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
* TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "SSWGClient.hh"
#include "SSWGCallbackHandler.hh"
#include <unistd.h>
#include <sstream>

std::string createAString();

class ClientMessageHandler : public SSWGCallbackHandler
{
public:
	ClientMessageHandler(const std::string& name) : m_Name(name){}
	~ClientMessageHandler(){}
	virtual void receivedMessage (const std::string& sender,
                                      const std::string& msg)
	{
	  static int count2=0;
          std::cout << m_Name << ": In callback Msg received: " << msg << std::endl;
          std::cout << "Message count: " << count2++ << std::endl;
          //          sleep(1);
	}
private:
	const std::string m_Name;
};

int main()
{
  ClientMessageHandler cmh1("Client1");
  SSWGClient client;
  client.connectToServer("Client1", "127.0.0.1", 6164, &cmh1);
  //  client.connectToServer("Client1", "10.0.100.4", 6164, &cmh1); // server on devboard
  //  client.connectToServer("Client1", "10.0.100.1", 6164, &cmh1); // client on devboard
  //client.connectToServer("Client1", "143.232.66.72", 6165, &cmh1); // alder
  std::string base = "Count at Client1: ";
  //std::string base = createAString(); // A big string
  int count = 1;

  while(1)
    {
      std::ostringstream strout;
      strout << base << count;
      client.sendMessage(strout.str(), "Client2");
      //usleep(1000000);
      sleep(1);
      ++count;
    }

  return 0;
}

std::string createAString()
{
  std::string base = "A0B0C0D0E0F0G0H0I0J0K0L0M0N0O0P0Q0R0S0T0U0V0W0X0Y0Z0";
  base += "A1B1C1D1E1F1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z1";
  base += "A2B2C2D2E2F2G2H2I2J2K2L2M2N2O2P2Q2R2S2T2U2V2W2X2Y2Z2";
  base += "A3B3C3D3E3F3G3H3I3J3K3L3M3N3O3P3Q3R3S3T3U3V3W3X3Y3Z3";
  base += "A4B4C4D4E4F4G4H4I4J4K4L4M4N4O4P4Q4R4S4T4U4V4W4X4Y4Z4";
  base += "A5B5C5D5E5F5G5H5I5J5K5L5M5N5O5P5Q5R5S5T5U5V5W5X5Y5Z5";
  base += "A6B6C6D6E6F6G6H6I6J6K6L6M6N6O6P6Q6R6S6T6U6V6W6X6Y6Z6";
  base += "A7B7C7D7E7F7G7H7I7J7K7L7M7N7O7P7Q7R7S7T7U7V7W7X7Y7Z7";
  base += "A8B8C8D8E8F8G8H8I8J8K8L8M8N8O8P8Q8R8S8T8U8V8W8X8Y8Z8";
  base += "A9B9C9D9E9F9G9H9I9J9K9L9M9N9O9P9Q9R9S9T9U9V9W9X9Y9Z9";
  base += "A10B10C10D10E10F10G10H10I10J10K10L10M10N10O10P10Q10R10S10T10U10V10W10X10Y10Z10";
  base += "A11B11C11D11E11F11G11H11I11J11K11L11M11N11O11P11Q11R11S11T11U11V11W11X11Y11Z11";
  base += "A12B12C12D12E12F12G12H12I12J12K12L12M12N12O12P12Q12R12S12T12U12V12W12X12Y12Z12";
  base += "A13B13C13D13E13F13G13H13I13J13K13L13M13N13O13P13Q13R13S13T13U13V13W13X13Y13Z13";
  base += "A14B14C14D14E14F14G14H14I14J14K14L14M14N14O14P14Q14R14S14T14U14V14W14X14Y14Z14";
  base += "A15B15C15D15E15F15G15H15I15J15K15L15M15N15O15P15Q15R15S15T15U15V15W15X15Y15Z15";
  base += "A16B16C16D16E16F16G16H16I16J16K16L16M16N16O16P16Q16R16S16T16U16V16W16X16Y16Z16";
  base += "A17B17C17D17E17F17G17H17I17J17K17L17M17N17O17P17Q17R17S17T17U17V17W17X17Y17Z17";
  base += "A18B18C18D18E18F18G18H18I18J18K18L18M18N18O18P18Q18R18S18T18U18V18W18X18Y18Z18";
  base += "A19B19C19D19E19F19G19H19I19J19K19L19M19N19O19P19Q19R19S19T19U19V19W19X19Y19Z19";
  base += "A20B20C20D20E20F20G20H20I20J20K20L20M20N20O20P20Q20R20S20T20U20V20W20X20Y20Z20";
  base += "A21B21C21D21E21F21G21H21I21J21K21L21M21N21O21P21Q21R21S21T21U21V21W21X21Y21Z21";
  base += "A22B22C22D22E22F22G22H22I22J22K22L22M22N22O22P22Q22R22S22T22U22V22W22X22Y22Z22";
  base += "A23B23C23D23E23F23G23H23I23J23K23L23M23N23O23P23Q23R23S23T23U23V23W23X23Y23Z23";
  base += "A24B24C24D24E24F24G24H24I24J24K24L24M24N24O24P24Q24R24S24T24U24V24W24X24Y24Z24";
  base += "A25B25C25D25E25F25G25H25I25J25K25L25M25N25O25P25Q25R25S25T25U25V25W25X25Y25Z25";
  base += "A26B26C26D26E26F26G26H26I26J26K26L26M26N26O26P26Q26R26S26T26U26V26W26X26Y26Z26";
  base += "A27B27C27D27E27F27G27H27I27J27K27L27M27N27O27P27Q27R27S27T27U27V27W27X27Y27Z27";
  base += "A28B28C28D28E28F28G28H28I28J28K28L28M28N28O28P28Q28R28S28T28U28V28W28X28Y28Z28";
  base += "A29B29C29D29E29F29G29H29I29J29K29L29M29N29O29P29Q29R29S29T29U29V29W29X29Y29Z29";
  base += "A30B30C30D30E30F30G30H30I30J30K30L30M30N30O30P30Q30R30S30T30U30V30W30X30Y30Z30";
  base += "A31B31C31D31E31F31G31H31I31J31K31L31M31N31O31P31Q31R31S31T31U31V31W31X31Y31Z31";
  base += "A32B32C32D32E32F32G32H32I32J32K32L32M32N32O32P32Q32R32S32T32U32V32W32X32Y32Z32";
  base += "A33B33C33D33E33F33G33H33I33J33K33L33M33N33O33P33Q33R33S33T33U33V33W33X33Y33Z33";
  base += "A34B34C34D34E34F34G34H34I34J34K34L34M34N34O34P34Q34R34S34T34U34V34W34X34Y34Z34";
  base += "A35B35C35D35E35F35G35H35I35J35K35L35M35N35O35P35Q35R35S35T35U35V35W35X35Y35Z35";
  base += "A36B36C36D36E36F36G36H36I36J36K36L36M36N36O36P36Q36R36S36T36U36V36W36X36Y36Z36";
  base += "A37B37C37D37E37F37G37H37I37J37K37L37M37N37O37P37Q37R37S37T37U37V37W37X37Y37Z37";
  base += "A38B38C38D38E38F38G38H38I38J38K38L38M38N38O38P38Q38R38S38T38U38V38W38X38Y38Z38";
  base += "A39B39C39D39E39F39G39H39I39J39K39L39M39N39O39P39Q39R39S39T39U39V39W39X39Y39Z39";
  return base;
}


