%language=C++
%define class-name ExpressionMap
%define lookup-function-name getFactory
%struct-type
%enum
%pic
%{
/* Copyright (c) 2006-2020, Universities Space Research Association (USRA).
*  All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Universities Space Research Association nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
* TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Eliminate 'register storage class specifier is deprecated' warnings */
#define register

%}
struct ExpressionEntry {int name; ExpressionFactory const *factory; }; 
%%
ABS, REGISTER_ONE_ARG_ARITHMETIC_OPERATION(ABS, AbsoluteValue)
ADD, REGISTER_ARITHMETIC_OPERATION(ADD, Addition)
ALL_KNOWN, REGISTER_ARRAY_QUERY_OPERATION(ALL_KNOWN, AllElementsKnown, BOOLEAN_TYPE)
AND, REGISTER_BOOLEAN_OPERATION(AND, BooleanAnd)
ANY_KNOWN, REGISTER_ARRAY_QUERY_OPERATION(ANY_KNOWN, AnyElementsKnown, BOOLEAN_TYPE)
ArraySize, REGISTER_ARRAY_QUERY_OPERATION(ArraySize, ArraySize, INTEGER_TYPE)
ArrayMaxSize, REGISTER_ARRAY_QUERY_OPERATION(ArrayMaxSize, ArrayMaxSize, INTEGER_TYPE)
ArrayElement, REGISTER_EXPRESSION(ArrayReference, ArrayElement)
ArrayValue, makeArrayLiteralFactory("ArrayValue")
ArrayVariable, makeArrayVariableReferenceFactory("ArrayVariable")
BooleanValue, REGISTER_EXPRESSION(BooleanConstant, BooleanValue)
BooleanVariable, makeVariableReferenceFactory("BooleanVariable", BOOLEAN_TYPE)
CEIL, REGISTER_ARITHMETIC_CONVERSION_OPERATION(CEIL, Ceiling)
Concat, REGISTER_CACHED_SIMPLE_OPERATION(Concat, StringConcat, STRING_TYPE, STRING_TYPE)
DIV, REGISTER_ARITHMETIC_OPERATION(DIV, Division)
DeclareArray, REGISTER_EXPRESSION(ArrayVariable, DeclareArray)
DeclareVariable, makeUserVariableFactory("DeclareVariable")
EQArray, REGISTER_EQUALITY_OPERATION(EQArray, Equal)
EQBoolean, REGISTER_EQUALITY_OPERATION(EQBoolean, Equal)
EQInternal, REGISTER_EQUALITY_OPERATION(EQInternal, Equal)
EQNumeric, REGISTER_EQUALITY_OPERATION(EQNumeric, Equal)
EQString, REGISTER_EQUALITY_OPERATION(EQString, Equal)
Executing, REGISTER_NODE_FUNCTION(NodeExecuting, Executing)
Failed, REGISTER_NODE_FUNCTION(NodeFailed, Failed)
Finished, REGISTER_NODE_FUNCTION(NodeFinished, Finished)
FLOOR, REGISTER_ARITHMETIC_CONVERSION_OPERATION(FLOOR, Floor)
GE, REGISTER_COMPARISON_OPERATION(GE, GreaterEqual)
GT, REGISTER_COMPARISON_OPERATION(GT, GreaterThan)
Inactive, REGISTER_NODE_FUNCTION(NodeInactive, Inactive)
IntegerValue, REGISTER_EXPRESSION(IntegerConstant, IntegerValue)
IntegerVariable, makeVariableReferenceFactory("IntegerVariable", INTEGER_TYPE)
IterationEnded, REGISTER_NODE_FUNCTION(NodeIterationEnded, IterationEnded)
IsKnown, REGISTER_ANY_ARG_PREDICATE(IsKnown, IsKnown)
LE, REGISTER_COMPARISON_OPERATION(LE, LessEqual)
LT, REGISTER_COMPARISON_OPERATION(LT, LessThan)
LookupNow, REGISTER_EXPRESSION(Lookup, LookupNow)
LookupOnChange, REGISTER_EXPRESSION(Lookup, LookupOnChange)
MAX, REGISTER_ARITHMETIC_OPERATION(MAX, Maximum)
MIN, REGISTER_ARITHMETIC_OPERATION(MIN, Minimum)
MOD, REGISTER_TWO_ARG_ARITHMETIC_OPERATION(MOD, Modulo)
MUL, REGISTER_ARITHMETIC_OPERATION(MUL, Multiplication)
NEArray, REGISTER_EQUALITY_OPERATION(NEArray, NotEqual)
NEBoolean, REGISTER_EQUALITY_OPERATION(NEBoolean, NotEqual)
NEInternal, REGISTER_EQUALITY_OPERATION(NEInternal, NotEqual)
NENumeric, REGISTER_EQUALITY_OPERATION(NENumeric, NotEqual)
NEString, REGISTER_EQUALITY_OPERATION(NEString, NotEqual)
NOT, REGISTER_ONE_ARG_OPERATION(NOT, BooleanNot, BOOLEAN_TYPE, BOOLEAN_TYPE)
NodeCommandHandleValue, REGISTER_EXPRESSION(CommandHandleConstant, NodeCommandHandleValue)
NodeCommandHandleVariable, REGISTER_EXPRESSION(CommandHandleVariable, NodeCommandHandleVariable)
NodeFailureValue, REGISTER_EXPRESSION(FailureTypeConstant, NodeFailureValue)
NodeFailureVariable, REGISTER_EXPRESSION(FailureVariable, NodeFailureVariable)
NodeOutcomeValue, REGISTER_EXPRESSION(NodeOutcomeConstant, NodeOutcomeValue)
NodeOutcomeVariable, REGISTER_EXPRESSION(OutcomeVariable, NodeOutcomeVariable)
NodeStateValue, REGISTER_EXPRESSION(NodeStateConstant, NodeStateValue)
NodeStateVariable, REGISTER_EXPRESSION(StateVariable, NodeStateVariable)
NodeTimepointValue, REGISTER_EXPRESSION(NodeTimepointValue, NodeTimepointValue)
NoChildFailed, REGISTER_NODE_FUNCTION(NodeNoChildFailed, NoChildFailed)
OR, REGISTER_BOOLEAN_OPERATION(OR, BooleanOr)
PostconditionFailed, REGISTER_NODE_FUNCTION(NodePostconditionFailed, PostconditionFailed)
REAL_TO_INT, REGISTER_SPECIAL_ARITHMETIC_OPERATION(REAL_TO_INT, RealToInteger, INTEGER_TYPE)
ROUND, REGISTER_ARITHMETIC_CONVERSION_OPERATION(ROUND, Round)
RealValue, REGISTER_EXPRESSION(RealConstant, RealValue)
RealVariable, makeVariableReferenceFactory("RealVariable", REAL_TYPE)
SQRT, REGISTER_SPECIAL_ARITHMETIC_OPERATION(SQRT, SquareRoot<Real>, REAL_TYPE)
STRLEN, REGISTER_ONE_ARG_OPERATION(STRLEN, StringLength, STRING_TYPE, INTEGER_TYPE)
SUB, REGISTER_ARITHMETIC_OPERATION(SUB, Subtraction)
Skipped, REGISTER_NODE_FUNCTION(NodeSkipped, Skipped)
StringValue, REGISTER_EXPRESSION(StringConstant, StringValue)
StringVariable, makeVariableReferenceFactory("StringVariable", STRING_TYPE)
Succeeded, REGISTER_NODE_FUNCTION(NodeSucceeded, Succeeded)
TRUNC, REGISTER_ARITHMETIC_CONVERSION_OPERATION(TRUNC, Truncate)
Waiting, REGISTER_NODE_FUNCTION(NodeWaiting, Waiting)
XOR, REGISTER_BOOLEAN_OPERATION(XOR, BooleanXor)
