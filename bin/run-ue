#! /bin/sh

# Copyright (c) 2006-2008, Universities Space Research Association (USRA).
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Universities Space Research Association nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#Validate file
valid()
{
  if [ ! -e $1 ] && [ $quiet = 0 ]
    then
      echo "WARNING: $1 does not exist"
  fi
  return
}

usage="Usage: $0 -p <plan> [-s] [-v [-h <hostname>] [-n <portnumber>] [-b]] [-d <debug file>] \
                     [-k] [-x] [-q] [-c <interface config>] [-l <library>]*"

# An optional environment variable UE_EXECUTABLE names an alternate executable.
# Other options:
#
#  -s suppresses a leading printed summary.
#  -v requests that plan state be transmitted to the UE viewer.
#  -h hostname of viewer
#  -n portnumber of viewer
#  -d debug file (default is Debug.cfg)
#  -k enables Java checker program
#  -x no-plan mode, runs UE which expects plan from external source
#  -q quiet mode "no warnings from script"

. $PLEXIL_HOME/bin/plexil-setup.sh

#separate command-line from run-ue output
echo

if [ $UE_EXECUTABLE ]
then
    prog=$UE_EXECUTABLE
elif [ -f $PLEXIL_HOME/bin/universalExec ]
then
    prog=$PLEXIL_HOME/bin/universalExec
else
    echo "Error: UE executable not found, aborting"
    exit 1
fi

$PLEXIL_HOME/bin/plexil-check-prog $prog

no_plan=0 #assume plan required
summary=1 #summary default
plan_nm="" #plan name
plan_cmd="" #plan command
config_nm="" #interface config name
config_cmd="" #interface config command
libraries="" #library files
debug_file="" #debug file
check="false" #run static checker
quiet=1 #quiet by default

#use -u to make sure arguments are not quoted (single quote breaks directory referrences)
set -- `getopt -a -u sp:c:l:d:vh:n:bkvxq $*`

if [ "$*" = "--" ]
  then
    echo "Error: Not enough arguments" 
    echo $usage
    exit 1
fi

while [ $1 != -- ]
do
    case $1 in    	
        -s ) summary=1;;	
	-p ) plan_nm="$2"
	plan_cmd="-p $2"
	shift;;	
	-c ) config_nm="$2"
	config_cmd="-c $2"
	shift;;	
	-l ) valid $2
	libraries="$libraries -l $2"
	shift;;	
	-d ) valid $2
	debug_file="-d $2"
	shift;;	
	-v ) viewer="-v";;	#luv listener enabled	
	-h ) host="-h $2"	#luv host name
	shift;;	
	-n ) port="-n $2"	#luv port
	shift;;	
	-b ) block="-b";;	#enable luv break point	
	-k ) check="true";;	
	-x ) no_plan=1;;
	-q ) quiet=0;;
    esac
    shift
done
shift

# Check the plan's existence
if [ "$plan_nm" = "" ] || [ ! -e $plan_nm ]
  then
    if [ $no_plan = 0 ]
      then
        echo Error: No plan defined or Plan: $plan_nm, does not exist.
        exit 1
    fi    
fi

default_config="interface-config.xml"

# Check the config's existence
if [ ! -e $config_nm ] || [ "$config_nm" = "" ]
  then  
  if [ $no_plan = 1 ] && [ -e $default_config ]
    then
    config_nm=$default_config
    config_cmd="-c $default_config"
  elif [ $no_plan = 1 ]
    then
    echo Error: No config defined or Config: $config_nm, does not exist.
    echo $usage
    exit 1
  fi
fi

# Run default debug
if [ "$debug_file" = "" ] && [ $quiet = 0 ]
  then
    debug_file="-d Debug.cfg"
fi

# Check plan for errors
if [ "$check" = "true" ] && [ -f $PLEXIL_HOME/bin/checkDecls ]
  then $PLEXIL_HOME/bin/checkDecls $plan_nm
       if [ ! -e $plan_nm ] && [ $? -gt 0 ]
         then
	   echo Error: $plan_nm, contains runtime error
           exit 1
	fi
    elif [ ! -f $PLEXIL_HOME/bin/checkDecls ]
      then
	echo Error: $PLEXIL_HOME/bin/checkDecls not found.	
	exit 1
fi  

# Print summary if desired
if [ $summary -eq 1 ] 
  then
    echo Running UE from $PLEXIL_HOME
    echo "  Plan:      $plan_nm"
    echo "  Configuration:    $config_nm"
    echo "  Libraries: $libraries"
    echo
fi

$prog $plan_cmd $config_cmd $debug_file $viewer $host $port $block $libraries
