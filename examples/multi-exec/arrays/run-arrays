#! /bin/sh -e
# Simple script to run the arrays example

# Copyright (c) 2006-2021, Universities Space Research Association (USRA).
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Universities Space Research Association nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

usage()
{
    cat <<EOF
Usage: $(basename "$0") (numeric|string)
EOF
}

guess_plexil_home()
{
    # This script file is expected to be in $PLEXIL_HOME/examples/multi-exec/arrays
    cd "$(dirname "$(command -v "$0")")/../../.." && pwd -P
}

if [ -z "$PLEXIL_HOME" ]
then
    PLEXIL_HOME="$(guess_plexil_home)"
    export PLEXIL_HOME
    echo "Defaulting PLEXIL_HOME to $PLEXIL_HOME"
fi

if [ ! -r "$PLEXIL_HOME/scripts/plexil-setup.sh" ]
then
    echo "$(basename "$0"): Environment variable PLEXIL_HOME is set incorrectly." >&2
    echo 'Please set it to the full pathname of the PLEXIL source directory' >&2
    exit 1
fi

export PLEXIL_HOME
# shellcheck source=./plexil-setup.sh
. "$PLEXIL_HOME"/scripts/plexil-setup.sh

# Check parameter
if [ $# -lt 1 ]
then
    echo "$(basename "$0"): Missing required parameter" >&2
    usage >&2
    exit 2
fi

case "$1" in
    -h | -help | --help )
        usage
        exit 0
        ;;
    numeric | string )
        ;;
    * )
        echo "$(basename "$0"): Unrecognized argument \"$1\"" >&2
        usage >&2
        exit 2
esac

COMMAND_PLE="command-$1-arrays-test.ple"
SIMULATOR_PLE="simulator-$1-arrays-test.ple"

for f in "$COMMAND_PLE" "$SIMULATOR_PLE"
do
    PLX="$(echo "$f" | sed -e 's/ple$/plx/')"
    if [ ! -r "$PLX" ]
    then
        plexilc "$f"
    fi
done

IPC_PID=
SIM_PID=

# Trap handler
cleanup()
{
    trap - EXIT INT QUIT HUP TERM
    echo 'Cleaning up'
    if test -n "$SIM_PID" && ps $SIM_PID > /dev/null
    then
        kill -INT $SIM_PID
        sleep 1
        if test -n "$SIM_PID" && ps $SIM_PID > /dev/null
        then
            kill -KILL $SIM_PID
            sleep 1
        fi
    fi
    if test -n "$IPC_PID" && ps $IPC_PID > /dev/null
    then
        kill -INT $IPC_PID
        sleep 1
        if test -n "$IPC_PID" && ps $IPC_PID > /dev/null
        then
            kill -KILL $IPC_PID
        fi
    fi
}

central -u -s &
IPC_PID=$!

# Give IPC a chance to start up
sleep 1

# Handle interrupts and errors beyond this point
trap cleanup EXIT INT QUIT HUP TERM

# Start the simulator
universalExec -d simulator.debug -p "simulator-$1-arrays-test.plx" -c simulator-arrays-config.xml &
SIM_PID=$!

# Give it a chance to start up too
sleep 1

# Start the demo executive
plexilexec -d command.debug -p "command-$1-arrays-test.plx" -c command-arrays-config.xml

# Cleanup on exit
cleanup
