#!/bin/bash
# File: $SVNROOT/examples/multi-exec/agents/tests/run-agents
# Note: Script to run two Plexil agent systems

function usage ()
{
cat <<EOF

Usage:      `basename $0` <agent1> <agent2> [options]

Options:    -v -viewer  := start the Plexil Viewer
            -x -xterms  := run the execs in xterms (if your system has them)

Examples:   `basename $0` t1-cmd t1-sim -v
            `basename $0` t2-cmd.pli t1-sim.pli
            `basename $0` sim cmd -v -x

Notes:      <agent1> and <agent2> are the "base names" of the plans, e.g., "cmd" for cmd.pli
            or "t1-sim" for t1-sim.pli.

            The communications configuration files will be guessed at based on the given
            "base names", e.g., given "t1-cmd" as the base name, "t1-cmd.xml" and "cmd.xml"
            will be tried.

EOF
exit
}

# Check for something like the right parameters and/or a "help" request
if [ $# -lt 2 ] || [ $# -gt 4 ] ; then usage ; fi

# Check for xterms and IPC/central
has_xterm=`which xterm`
use_xterm=no
ipc_running=`ps aux | egrep "ipc|central" | grep -v grep`

# Allow for either base names or names including extensions
agent1_raw=$1
agent1=`echo $1 | awk '{ split($0, arr, "."); print(arr[1]) }'` ; shift
agent2_raw=$1
agent2=`echo $1 | awk '{ split($0, arr, "."); print(arr[1]) }'` ; shift
use_viewer=no

# Show the usage message and/or set up the "mode" to run in
until [ -z $1 ] ;
do
    if [ "$1" = "-h" ] || [ "$1" = "-help" ] ; then usage ; fi
    if [ "$1" = "-v" ] || [ "$1" = "-viewer" ] ; then use_viewer=yes ; shift ;
    elif [ "$1" = "-x" ] || [ "$1" = "-xterm" ] || [ "$1" = "-xterms" ] ; then use_xterm=yes ; shift ;
    elif [ "$1" = "-vx" ] || [ "$1" = "-xv" ] ; then use_xterm=yes ; use_viewer=yes ; shift ;
    else usage ; fi
done

# Guess at what the communications configurations might be for these agents
# t1-cmd = cmd.xml or t1-cmd.xml = cmd-t1; cmd = cmd.xml
if [ -e $agent1.xml ] ;
then
    com1=$agent1.xml ;
elif [ -e `echo $agent1 | awk '{ split($0, arr, "-"); print(arr[1]) }'`.xml ] ;
then
    com1=`echo $agent1 | awk '{ split($0, arr, "-"); print(arr[1]) }'`.xml
elif [ -e `echo $agent1 | awk '{ split($0, arr, "-"); print(arr[2]) }'`.xml ] ;
then
    com1=`echo $agent1 | awk '{ split($0, arr, "-"); print(arr[2]) }'`.xml
else
    echo "No communications configuration file found for base name $agent1"
    exit
fi

# And now for agent2
if [ -e $agent2.xml ] ;
then
    com2=$agent2.xml ;
elif [ -e `echo $agent2 | awk '{ split($0, arr, "-"); print(arr[1]) }'`.xml ] ;
then
    com2=`echo $agent2 | awk '{ split($0, arr, "-"); print(arr[1]) }'`.xml
elif [ -e `echo $agent2 | awk '{ split($0, arr, "-"); print(arr[2]) }'`.xml ] ;
then
    com2=`echo $agent2 | awk '{ split($0, arr, "-"); print(arr[2]) }'`.xml
else
    echo "No communications configuration file found for base name $agent2"
    exit
fi

# Keep the plans up-to-date if possible...
make $agent1_raw.plx $agent2_raw.plx
make_status=$?
# bail if things don't compile properly
if [ $make_status != 0 ] ;
then
    echo "make exited with error status $make_status"
    exit $make_status
fi

# Set up the command line
if [ "$use_viewer" = "yes" ] ;
then
    cmd1="plexilexec -v -b -p $agent1.plx -c $com1"
    cmd2="plexilexec -v -b -p $agent2.plx -c $com2"
    sleep_time=15
else
    cmd1="plexilexec -p $agent1.plx -c $com1"
    cmd2="plexilexec -p $agent2.plx -c $com2"
    sleep_time=1
fi

# Either start IPC/central in an xterm, or make sure it is already running
if [ "$has_xterm" = "" ] ;
then
    echo " "
    if [ "$ipc_running" = "" ] ;
    then
        echo "ipc (central) must already be running for this script to work without xterm..."
        echo " "
        exit
    else
        echo "xterm not found: both agents will be run in the background..."
        echo " "
    fi
fi

# start IPC/central in an xterm if necessary
if [ "$ipc_running" = "" ] ;
then
    echo "Starting IPC..."
    xterm ipc &
    sleep 2;
else
    echo "IPC already running..."
fi

# Start the agents
echo "$cmd1..."
if [ "$use_xterm" = "no" ] ;
then
    $cmd1 &
else
    xterm -e $cmd1 &
fi

sleep $sleep_time

echo "$cmd2..."
if [ "$use_xterm" = "no" ] ;
then
    $cmd2
else
    xterm -e $cmd2
fi

# EOF
