;; File: examples/multi-exec/agents/timed-iteration.pli

(plexil-plan
  (sequence "timed-iteration"
    (variables (date "run-start-time")
               (date "earliest-start" "2011-06-07T14:05:00.000")
               (date "latest-start")
               (duration "period" "PT0.5S")
               (duration "elapsed-time" "PT0.0S")
               (duration "start-delta")
               (duration "run-length" "PT15.0S")
               (duration "tolerance" "PT0.01S")
               (boolean "continue" true))
    (assignment-node "record-run-start-time"
      (assignment (datevar "run-start-time") (lookup-now "time")))
    (assignment-node "find-plan-start-time"
      (assignment (durvar "start-delta") (- (datevar "earliest-start") (datevar "run-start-time"))))
    (assignment-node "find-latest-start-time"
      (assignment (durvar "latest-start") (+ (datevar "earliest-start") (durval "PT5.0S"))))
    (assignment-node "find-plan-end-time"
      (assignment (durvar "run-length") (+ (durvar "run-length") (durvar "start-delta"))))
    (command-node "report-plan-start-time"
      (command "pprint" "Earliest start time is" (durvar "start-delta") "seconds from now..."))
    (sequence "wait-for-start-time"
      (start-condition (< (datevar "earliest-start") (lookup-on-change-with-tolerance "time" (durvar "tolerance"))))
      (invariant-condition (< (lookup-now "time") (datevar "latest-start")))
      (command-node "report-plan-start"
        (command "pprint" "Plan starting...")))
    (sequence "periodic-iteration"
      (variables (real "iteration-start-time"))
      (repeat-condition (boolvar "continue"))
      ;; ((now - run-start-time) % period) < (2 * tolerance)
      (start-condition (< (mod (- (lookup-on-change-with-tolerance "time" (durvar "tolerance"))
                                  (datevar "run-start-time"))
                               (durvar "period"))
                           (* 2 (durvar "tolerance"))))
      (assignment-node "record-interation-start-time"
        (assignment (realvar "iteration-start-time") (lookup-now "time")))
      (assignment-node "record-elapsed-time"
        (assignment (durvar "elapsed-time") (- (realvar "iteration-start-time") (datevar "run-start-time"))))
      (command-node "print-elapsed-time"
        (command "pprint" "elapsed-time: " (durvar "elapsed-time")))
      (wait-with-tolerance (* 2 (durvar "tolerance")) (durvar "tolerance") "wait-a-bit")
      (sequence "conditionally-end-iteration"
        (skip-condition (<= (durvar "elapsed-time") (durvar "run-length")))
        (assignment-node "signal-end-of-iteration"
          (assignment (boolvar "continue") false))
        (command-node "notify-end-of-iteration"
          (command "pprint" "Ending periodic iteration"))))))
