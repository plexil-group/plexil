;; File: $SVNROOT/examples/multi-exec/agents/dock.pli

(plexil-plan
  ;; The "dock" sits and waits for requests to dock from particular rovers,
  ;; and can handle multiple rovers (4 bays?, more?)
  ;;    request := rover-id dock-type urgency
  ;;   response := rover-id dock-no dist(ft) h-error(deg) v-error(deg) speed(ft/s)
  ;; A "rover" requests docking information periodically until the dock responds,
  ;; after which the dock periodically broadcasts the telemetry (response) to the
  ;; rover (which it is expected follow as closely as it can).
  ;; After the rover has docked, both the rover and dock execute their own post
  ;; docking procedures, exchanging docking done message, and opening their inner
  ;; hatches.
  ;;
  ;; The dock has N bays.  If one or more have been requested, then we loop through
  ;; the bays sending "sensed" telemetry related to the rover assigned to the bay
  ;; in question (i.e., dist, angle, speed).  Telemetry is pushed until docking is
  ;; achieved, then post-docking procedures/checks are run, finally the dock hatch
  ;; is opened.
  ;;
  (sequence "dock"
    (variables (string "name" "dock")     ;agent name
               (integer "period" 2)       ;polling period
               (integer "run-length" 10)  ;seconds
               (real-array "actual" 4 100 0 1 0) ;dist(ft) alt(ft) speed(ft/s) angle(deg)
               (real "start-time"))
    ;; Record the start time of the run...
    (assignment (realvar "start-time") (lookup-now "time"))
    ;; Announce that we are up and running
    (command "print" "\n\n[" (stringvar "name") "] is up and running...\n\n")
    ;; Poll for the current state and react accordingly
    (for (integer "i" 0) (>= (intvar "run-length") (intvar "i")) (+ (intvar "i") (intvar "period"))
      (sequence "send-telemetry"
        (variables (real "elapsed-time"))
        ;; ( ) Get the current time and print it for debugging/continuity
        (assignment (realvar "elapsed-time") (- (lookup-now "time") (realvar "start-time")))
        ;; Update the array before printing and sending it.
        (assignment (array-element "actual" 1) (intvar "i"))
        (command "print" "\n[" (stringvar "name") "] elapsed-time: " (intvar "i") " (" (realvar "elapsed-time") ")\n")
        ;; ( ) Get the current state from the simulator and print it
        (command "print" "[" (stringvar "name") "] send: " (arrayvar "actual") "\n")
        ;; ( ) Broadcast the current state
        (command "broadcast-telemetry" (arrayvar "actual"))
        ;; ( ) Sleep for a short while
        (wait-with-tolerance (- (intvar "period") (mod (lookup-now "time") 1)) .1 "Wait")))
    ;; Halt the system when done
    (action "Quit"
      (command "print" "\n[" (stringvar "name") "] sent: Quit (quitting)\n")
      (command "SendMessage" "Quit"))))

;; EOF
