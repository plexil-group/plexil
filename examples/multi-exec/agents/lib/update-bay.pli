;; File: $SVNROOT/examples/multi-exec/agents/lib/update-bay.pli

(plexil-plan
  ;;
  ;;
  (sequence "update-bay"
    (interface
	 (in (string "name")
		 (real-array "speeds" 3) ;initial(ft/sec)[0] intermediate(ft/sec)[1] final(ft-sec)[2]
		 (real-array "times" 3)) ;start-time(sec)[0] now(sec)[1] then(sec)[2]
	 (inout (real-array "bay" 6))) ;bay-id[0] rover-id[1] dist(ft)[2] speed(ft/sec)[3] action[4] time(sec)[5]
    (sequence "update-bay-internal"
      ;; Only update this bay if it has an assign rover docking
      (skip-condition (or (= 0 (array-element "bay" 1))  ;no rover assigned to this bay yet
                          (and (= 0 (array-element "bay" 2)) ;rover is already docked
                               (not (= 0 (array-element "bay" 4)))))) ;0=docking, 1=un-docking
      ;; record when this approach started
      (action "set-start-of-approach"
        (skip-condition (not (= 0 (array-element "bay" 5))))
        (assignment (array-element "bay" 5) (array-element "times" 1)))
      ;; Dock or un-dock as requested
      (try "dock-or-un-dock"
        ;; Docking means bringing the rover in at appropriate speeds for various distances
        (action "dock"
          (skip-condition (not (= 1 (array-element "bay" 4)))) ;docking action requested
          ;; bring the rover in at "initial-speed" ft/sec down to 30', then "intermediate-speed" to 10', etc.
          (try "set-speed-for-distance"
            (action "inital-approach"
              ;; dist < 30, skip
              (skip-condition (> 30 (array-element "bay" 2)))
              (assignment (array-element "bay" 3) (array-element "speeds" 0))) ;ft/sec
            (action "intermediate-approach"
              ;; if dist > 30 or dist < 10, skip
              (skip-condition (or (<= 30 (array-element "bay" 2))
                                  (>= 10 (array-element "bay" 2))))
              (assignment (array-element "bay" 3) (array-element "speeds" 1))) ;ft/sec
            (action "final-approach"
              ;; if dist > 10, skip
              (skip-condition (<= 10 (array-element "bay" 2)))
              (assignment (array-element "bay" 3) (array-element "speeds" 2)))) ;ft/sec
          ;; Set the updated distance based on the speed
          ;; dist = dist - speed * (- now then) (i.e., time-since-last-update)
          (sequence "calculate-dist"
            (variables (real "dist"))
            (assignment (realvar "dist") (- (array-element "bay" 2) ;dist
                                            (* (array-element "bay" 3) ;ft/sec
                                               (- (array-element "times" 1) (array-element "times" 2))))) ;seconds
            (if (<= 0 (realvar "dist"))   ;if dist < 0, use 0
                (assignment (array-element "bay" 2) (realvar "dist"))
              (assignment (array-element "bay" 2) 0)))) ;dist=0=docked
        ;; Un-docking means sending the rover out at appropriate speeds for various distances
        (action "un-dock"
          (skip-condition (not (= 0 (array-element "bay" 4)))) ;un-docking action requested
          ;; send the rover out at "initial-speed" ft/sec up to 10', then "intermediate-speed" to 20', etc.
          (try "set-speed-for-distance"
            ;; dist > 30', set speed "initial" (we're done)
            ;; dist <= 30 && > 10, set speed "intermediate"
            (action "initial-departure"
              ;; dist >= 10', set speed "final"
              (skip-condition (<= 10 (array-element "bay" 2)))
              (assignment (array-element "bay" 3) (array-element "speeds" 2))))
          ))
      ;; Send the new status out
      (command "bay-status" (arrayvar "bay"))
      (command "print" "\n[" (stringvar "name") " (bay " (array-element "bay" 0) ")] sent: " (arrayvar "bay")))))

;; EOF
