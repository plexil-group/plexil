//The actor in charge of performing movement commands
LibraryNode MoveLeftCommand;

Controller:
{
	Integer calls = 0;
	Boolean continue = true;
	Sequence
	//Check to see if a right move is required based on shared state
	CheckMoveLeftState:
	{
		Sequence
			SendRequest:
			{
				Command: SendMessage("GetShouldMoveLeft");
			}
			GetTrue:
			{
				StartCondition: MessageReceived("ShouldMoveLeft::true");
				SkipCondition: MessageReceived("ShouldMoveLeft::false");
					Sequence
					RecMoveLeftCall:
					{
						LibraryCall: MoveLeftCommand;
					}
					Increment:
					{
						Assignment: calls = calls + 1;
					}
					RespondMoveLeft:
					{
						Command: SendMessage("ResetMoveLeft");
					}
			}
	}
	Loop:
	{
		RepeatCondition: continue;
		EndCondition: RecUpdate.state == FINISHED || RecQuit.state == FINISHED;
		//Loops continually until a Quit message is received
		NodeList:
			RecUpdate:
			{
				StartCondition: MessageReceived("Update::ShouldMoveLeft::true");
				Sequence
					RecMoveLeftCall:
					{
						LibraryCall: MoveLeftCommand;
					}
					Increment:
					{
						Assignment: calls = calls + 1;
					}
					RespondMoveLeft:
					{
						Command: SendMessage("ResetMoveLeft");
					}
			}
			RecQuit:
			{
				StartCondition: MessageReceived("Quit");
				Assignment: continue = false;
			}
	}
}
