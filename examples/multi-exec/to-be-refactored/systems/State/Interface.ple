//Defines the interface from the server to this robot system
//Also contains the global state of the system in the form of shouldMoveLeft and shouldMoveRight
LibraryNode MoveLeftCommand;
LibraryNode MoveRightCommand;

Interface:
{
	Boolean shouldMoveLeft = false;
	Boolean shouldMoveRight = false;
	Integer calls = 0;
	Boolean continue = true;
	NodeList:
	Loop:
	{
		RepeatCondition: continue;
		//Structure that waits on each node until one completes and proceeds to reset
		EndCondition: RecMoveLeft.state == FINISHED || RecMoveRight.state == FINISHED || RecQuit.state == FINISHED ||
			RecMoveLeftReset.state == FINISHED || RecMoveRightReset.state == FINISHED || GetCalls.state == FINISHED ||
			GetShouldMoveLeft.state == FINISHED || GetShouldMoveRight.state == FINISHED;
		NodeList:
			RecMoveLeft:
			{
				StartCondition: MessageReceived("MoveLeft");
				Sequence
					SetMoveLeft:
					{
						Assignment: shouldMoveLeft = true;
					}
					Increment:
					{
						Priority: 1;
						Assignment: calls = calls + 1;
					}
					RespondMoveLeft:
					{
						Command: SendMessage("Update::ShouldMoveLeft::true");
					}
			}
			RecMoveLeftReset:
			{
				StartCondition: MessageReceived("ResetMoveLeft");
				Sequence
					Increment:
					{
						Priority: 3;
						Assignment: calls = calls + 1;
					}
					ResetMoveLeft:
					{
						Assignment: shouldMoveLeft = false;
					}
					//Due to a bug in MessageReceived, a SendMessage command must always follow
					RespondResetMoveLeft:
					{
						Command: SendMessage("Update::ShouldMoveLeft::false");
					}
			}
			GetShouldMoveLeft:
			{
				StartCondition: MessageReceived("GetShouldMoveLeft");
				If (shouldMoveLeft)
				Then
					cmd:
					{
						Command: SendMessage("ShouldMoveLeft::true");
					}
				Else
					cmd:
					{
						Command: SendMessage("ShouldMoveLeft::false");
					}
			}
			RecMoveRight:
			{
				StartCondition: MessageReceived("MoveRight");
				Sequence
					SetMoveRight:
					{
						Assignment: shouldMoveRight = true;
					}
					Increment:
					{
						Priority: 2;
						Assignment: calls = calls + 1;
					}
					RespondMoveRight:
					{
						Command: SendMessage("Update::ShouldMoveRight::true");
					}
			}
			RecMoveRightReset:
			{
				StartCondition: MessageReceived("ResetMoveRight");
				Sequence
					Increment:
					{
						Priority: 4;
						Assignment: calls = calls + 1;
					}
					ResetMoveRight:
					{
						Assignment: shouldMoveRight = false;
					}
					//Due to a bug in MessageReceived, a SendMessage command must always follow
					RespondResetMoveRight:
					{
						Command: SendMessage("Update::ShouldMoveRight::false");
					}
			}
			GetShouldMoveRight:
			{
				StartCondition: MessageReceived("GetShouldMoveRight");
				If (shouldMoveRight)
				Then
					cmd:
					{
						Command: SendMessage("ShouldMoveRight::true");
					}
				Else
					cmd:
					{
						Command: SendMessage("ShouldMoveRight::false");
					}
			}
			GetCalls:
			{
				StartCondition: MessageReceived("GetCalls");
				Command: SendMessage(calls);
			}
			RecQuit:
			{
				StartCondition: MessageReceived("Quit");
				Assignment: continue = false;
			}
	}
}
