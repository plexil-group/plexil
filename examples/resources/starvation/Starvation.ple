// This plan models several small operations with low priority that starve a high priority process
Integer Command GetTemperature();
String Command OrganizeFiles();
String Command TakePicture();
Command SendMessage(...);

String Command CalculateLanding();
Command pprint(...);

Starvation:
Concurrence
{
  Boolean continue = true;
  Integer temperature;
  Small1: {
    Integer returnValue;
    RepeatCondition continue;
    SkipCondition !continue;
    Retrieve: {
      EndCondition isKnown(returnValue);
      Resource Name = "sys_memory",UpperBound=4.0, Priority = 30;
      returnValue = GetTemperature();
    }
    AssignTemp: {
      temperature = returnValue;
    }
  }
  Small2: {
    String out;
    StartCondition isKnown(temperature);
    RepeatCondition continue;
    InvariantCondition continue;
    SkipCondition !continue;
    EndCondition isKnown(out);
    Resource Name = "sys_memory",UpperBound=4.0, Priority = 50;
    out = OrganizeFiles(); 
  }
  Small3: {
    String out;
    RepeatCondition continue;
    InvariantCondition continue;
    SkipCondition !continue;
    EndCondition isKnown(out);
    Resource Name = "sys_memory",UpperBound=4.0, Priority = 40;
    out = TakePicture(); 
    }
  
  Big: {
    Execute:{
      String out;
      StartCondition isKnown(temperature); // Don't immediately start
      EndCondition isKnown(out);
      RepeatCondition Self.command_handle == COMMAND_DENIED || Self.command_handle == COMMAND_FAILED;
      Resource Name = "sys_memory",UpperBound=10.0, Priority = 1;
      out = CalculateLanding();
    }
    QuitSimulator:
    {
      SendMessage("Quit");
      continue = false;
    }
  }
}
