Integer Command MoveUp (String robotName);
Integer Command MoveDown (String robotName);
Integer Command MoveRight (String robotName);
Integer Command MoveLeft (String robotName);
Integer Command Move (String robotName, Integer holder);
Real[5] Command QueryEnergySensor (String robotName);
Real[5] Command QueryGoalSensor (String robotName);
Real[3] Command QueryRobotState (String robotName);
Integer[4] Command QueryVisibilitySensor (String robotName);

//Command print (String message);
//Command pprint (String prefix, Real values[3]);
LibraryAction FindMaxIndex (In Real arr[5], InOut Integer index);

// Correct version
//LibraryAction FindMaxIndex (In Real arr[5], InOut Integer imax);

SeekGoalAndEnergy: { //RobotYellow and RobotBlue operate concurrently

	RobotYellow: {
		//define robot parameters (unchanging)
		String RobotName = "RobotYellow";
		Real SeekEnergyLimit = 0.30;	//value when energy source is sought
		
		//define telemetry values
		Real EnergyState[5];
		Real GoalState[5];
		Real RobotState[3];
		Integer VisibilityState[4];
		Boolean ReachedGoal = false;
		
		Integer DecidedMoveDirection;
		Integer EnergyDirection;
		Integer GoalDirection;
		
		MainLoop:Sequence { //main cycle with energy kill switch 
			//EndCondition ReachedGoal;
			RepeatCondition ReachedGoal == false;
				
			UpdateStates:{
				EnergyState = QueryEnergySensor(RobotName);
				GoalState = QueryGoalSensor(RobotName);
				RobotState = QueryRobotState(RobotName);
				VisibilityState = QueryVisibilitySensor(RobotName);
			}
			FindVectors:{
				PostCondition (EnergyDirection != -1 && GoalDirection != -1);
				LibraryCall FindMaxIndex(arr = EnergyState, imax = EnergyDirection);
				LibraryCall FindMaxIndex(arr = GoalState, imax = GoalDirection);
			}
			DecisionTree:if (GoalDirection == 5) {
				ReachedGoal = true;
				DecidedMoveDirection = 5; //stay put
			} elseif (RobotState[2] < SeekEnergyLimit) {
				//move towards energy
				DecidedMoveDirection = EnergyDirection;
			} else {
				//move towards goal
				DecidedMoveDirection = GoalDirection;
			} endif
			Test: MoveDown(RobotName);
			MakeMovement: {
				// skipped if plan is to stay put
				SkipCondition (DecidedMoveDirection == 5);
				Move(RobotName, DecidedMoveDirection);  
			}
		}
  }
}
