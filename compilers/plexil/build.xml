<?xml version="1.0" encoding="UTF-8"?>
<!--
* Copyright (c) 2006-2022, Universities Space Research Association (USRA).
*  All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Universities Space Research Association nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
* TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<project name="PlexilCompiler" default="install" basedir=".">

  <description>
    Build instructions for the Standard PLEXIL compiler.
  </description>

  <!-- Set this to true to debug -->
  <property name="plexil.debug" value="false"/>

  <!-- The root directory of the PLEXIL source tree -->
  <property name="dir.plexil_home" location="../.."/>

  <!-- Default to an in-tree build.
       Override these on the ant command line to build/install out of tree. -->
  <property name="dir.build" value="."/>
  <property name="dir.install" value="${dir.plexil_home}"/>

  <!-- Target Java 8 for compatibility -->
  <!-- TODO?: figure out portable way to provide bootclasspath -->
  <property name="ant.build.javac.source" value="1.8"/>
  <property name="ant.build.javac.target" value="1.8"/>

  <!-- Input file locations -->
  <property name="dir.source.grammars" location="antlr"/>
  <property name="dir.source.java"     location="java"/>
  <property name="dir.source.jars"     location="${dir.plexil_home}/jars"/>
  <property name="dir.source.scripts"  location="${dir.plexil_home}/scripts"/>

  <!-- Build directories -->
  <property name="dir.build.generated" location="${dir.build}/generated"/>
  <property name="dir.build.classes"   location="${dir.build}/classes"/>
  <property name="dir.build.jars"      location="${dir.build}/jars"/>

  <!-- Installation directories -->
  <property name="dir.install.jars"    location="${dir.install}/jars"/>
  <property name="dir.install.scripts" location="${dir.install}/bin" />
  <property name="dir.install.doc"     location="${dir.install}/doc" />

  <!-- Determine whether this is an in-tree or out-of-tree build and installation -->
  <condition property="plexil.build.in-tree">
    <equals arg1="${dir.build}" arg2="."/>
  </condition>

  <condition property="plexil.install.in-tree">
    <equals arg1="${dir.install}" arg2="${dir.plexil_home}"/>
  </condition>

  <!-- jar files on which the compiler depends -->
  <!-- These are properties rather than files because it's easier this way -->
  <property name="jar.antlr"
            location="${dir.source.jars}/antlr-3.5.3-complete-no-st3.jar"/>
  <property name="jar.saxon"
            location="${dir.source.jars}/saxon-he-11.4.jar"/>
  <property name="jar.xmlresolver"
            location="${dir.source.jars}/xmlresolver-4.4.3.jar"/>

  <path id="plexil.sourcepath">
    <pathelement location="${dir.source.java}"/>
  </path>

  <path id="plexil.compile.classpath">
    <file name="${jar.antlr}"/>
    <file name="${jar.saxon}"/>
    <pathelement location="${dir.build.classes}/plexil"/>
  </path>

  <!-- Explicit dependency checking, because ANTLR 3 doesn't provide an 'ant' task' -->
  <uptodate property="plexil-grammar.up-to-date"
            srcfile="${dir.source.grammars}/Plexil.g">
    <compositemapper>
      <globmapper from="${dir.source.grammars}/*.g"
                  to="${dir.build.generated}/plexil/*Lexer.java"/>
      <globmapper from="${dir.source.grammars}/*.g"
                  to="${dir.build.generated}/plexil/*Parser.java"/>
      <globmapper from="${dir.source.grammars}/*.g"
                  to="${dir.build.generated}/plexil/*.tokens"/>
    </compositemapper>
  </uptodate>

  <condition property="plexil-keywords.up-to-date">
    <and>
      <isset property="plexil-grammar.up-to-date"/>
      <uptodate srcfile="${dir.build.generated}/plexil/Plexil.tokens"
                targetfile="${dir.build.generated}/keywords.txt"/>
    </and>
  </condition>

  <uptodate property="plexil-tree-grammar.source.up-to-date"
            srcfile="${dir.source.grammars}/PlexilTreeTransforms.g">
    <compositemapper>
      <globmapper from="${dir.source.grammars}/*.g"
                  to="${dir.build.generated}/plexil/*.java"/>
      <globmapper from="${dir.source.grammars}/*.g"
                  to="${dir.build.generated}/plexil/*.tokens"/>
    </compositemapper>
  </uptodate>

  <condition property="plexil-tree-grammar.plexil-grammar.up-to-date">
    <and>
      <isset property="plexil-grammar.up-to-date"/>
      <uptodate>
        <srcfiles dir="${dir.build.generated}/plexil">
          <filename name="PlexilLexer.java"/>
          <filename name="PlexilParser.java"/>
          <filename name="Plexil.tokens"/>
        </srcfiles>
        <compositemapper>
          <mergemapper to="${dir.build.generated}/plexil/PlexilTreeTransforms.java"/>
          <mergemapper to="${dir.build.generated}/plexil/PlexilTreeTransforms.tokens"/>
        </compositemapper>
      </uptodate>
    </and>
  </condition>

  <condition property="plexil-tree-grammar.up-to-date">
    <and>
      <isset property="plexil-tree-grammar.source.up-to-date"/>
      <isset property="plexil-tree-grammar.plexil-grammar.up-to-date"/>
    </and>
  </condition>

  <!-- Capturing all the dependencies is pretty complex -->
  <!-- Omitting dependencies on Saxon jar -->
  <condition property="plexil-classes.up-to-date">
    <and>
      <isset property="plexil-grammar.up-to-date"/>
      <isset property="plexil-tree-grammar.up-to-date"/>
      <!-- Ensure the generated class files are up to date -->
      <uptodate> 
        <srcfiles dir="${dir.build.generated}/plexil">
          <include name="*.java"/>
        </srcfiles>
        <globmapper from="${dir.build.generated}/plexil/*.java"
                    to="${dir.build.classes}/plexil/*.class"/>
      </uptodate>
      <!-- Ensure the class files for the human-generated Java code are up to date -->
      <uptodate> 
        <srcfiles dir="${dir.source.java}/plexil">
          <include name="*.java"/>
        </srcfiles>
        <globmapper from="${dir.source.java}/plexil/*.java"
                    to="${dir.build.classes}/plexil/*.class"/>
      </uptodate>
      <uptodate> 
        <srcfiles dir="${dir.source.java}/plexil/xml">
          <include name="*.java"/>
        </srcfiles>
        <globmapper from="${dir.source.java}/plexil/xml/*.java"
                    to="${dir.build.classes}/plexil/xml/*.class"/>
      </uptodate>
      <!-- Ensure class files for human-generated compiler code are updated
           if any of the generated Java files have changed -->
      <uptodate> 
        <srcfiles dir="${dir.build.generated}/plexil">
          <include name="*.java"/>
        </srcfiles>
        <globmapper from="${dir.source.java}/plexil/*.java"
                    to="${dir.build.classes}/plexil/*.class"/>
      </uptodate>
    </and>
  </condition>

  <!-- Begin targets -->
  <target name="check-properties" if="${plexil.debug}">
    <echoproperties>
      <!-- <propertyset> -->
      <!--   <propertyref prefix="dir."/> -->
      <!--   <propertyref prefix="jar."/> -->
      <!--   <propertyref prefix="plexil."/> -->
      <!-- </propertyset> -->
    </echoproperties>
  </target>

  <target name="plexil-grammar"
          unless="plexil-grammar.up-to-date"
	      description="Generate Plexil parser code from .g file">
    <mkdir dir="${dir.build.generated}/plexil"/>
    <java jar="${jar.antlr}" fork="true" failonerror="true">
      <!-- <arg value="-report"/> -->
      <arg value="-fo"/>
      <arg path="${dir.build.generated}/plexil"/>
      <arg file="${dir.source.grammars}/Plexil.g"/>
    </java>
  </target>

  <target name="plexil-keywords"
          depends="plexil-grammar"
          unless="plexil-keywords.up-to-date"
          description="Generate list of Plexil keywords from Plexil.tokens">
    <exec executable="./keywords.sh">
      <arg value="${dir.build.generated}/plexil/Plexil.tokens"/>
      <arg value="${dir.build.generated}/keywords.txt"/>
    </exec>
  </target>

  <target name="plexil-tree-grammar"
	      depends="plexil-grammar"
          unless="plexil-tree-grammar.up-to-date"
	      description="Generate Plexil AST transformations from .g file">
    <java jar="${jar.antlr}" fork="true" failonerror="true">
      <!-- <arg value="-report"/> -->
      <arg value="-fo"/>
      <arg path="${dir.build.generated}/plexil"/>
      <arg file="${dir.source.grammars}/PlexilTreeTransforms.g"/>
    </java>
  </target>
  
  <target name="plexil-compile"
          depends="plexil-tree-grammar">
    <mkdir dir="${dir.build.classes}/plexil"/>
    <!-- debuglevel options are lines,vars,source -->
    <javac destdir="${dir.build.classes}"
           sourcepathref="plexil.sourcepath"
           debug="true"
           debuglevel="lines,source"
           includeantruntime="no"
           >
      <src path="${dir.build.generated}/plexil"/>
      <src path="${dir.source.java}/plexil"/>
      <classpath refid="plexil.compile.classpath"/>
    </javac>
  </target>

  <!-- TODO: integrate XSLT files into result jar
       See viewers/pv/build.xml -->
  <target name="compiler-jar" depends="plexil-compile">
    <mkdir dir="${dir.build.jars}"/>
    <jar destfile="${dir.build.jars}/PlexilCompiler.jar"
         update="false"
         basedir="${dir.build.classes}"
         >
      <manifest>
        <attribute name="Main-Class" value="plexil.Compiler"/>
      </manifest>
      <zipfileset src="${jar.antlr}"/>
      <zipfileset src="${jar.xmlresolver}"/>
      <!-- Must remove the signature from the Saxon HE jar -->
      <zipfileset src="${jar.saxon}"
                  excludes="META-INF/*.SF, META-INF/*.RSA"/>
    </jar>
  </target>

  <target name="install.out-of-tree" unless="plexil.install.in-tree">
    <copy file="${dir.source.scripts}/plexilc"
          todir="${dir.install.scripts}"
          preservelastmodified="true"/>
  </target>

  <target name="install" depends="compiler-jar,plexil-keywords,install.out-of-tree">
    <copy file="${dir.build.jars}/PlexilCompiler.jar"
	      todir="${dir.install.jars}"
	      preservelastmodified="true"/>
  </target>

  <target name="clean">
    <delete dir="${dir.build.classes}" failonerror="false"/>
    <delete dir="${dir.build.generated}" failonerror="false"/>
    <delete dir="${dir.build.jars}" failonerror="false"/>
  </target>

  <target name="uninstall.out-of-tree" unless="plexil.install.in-tree">
    <delete file="${dir.install.scripts}/plexilc"
            failonerror="false"/>
  </target>

  <target name="uninstall" depends="clean,uninstall.out-of-tree">
    <delete file="${dir.install.jars}/PlexilCompiler.jar"
            failonerror="false"/>
  </target>

</project>
