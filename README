This is the top level directory of the PLEXIL distribution.

See http://sourceforge.net/projects/plexil for information about this
software, including its user manuals.  There is more information in
the README files found in each subdirectory of this directory.

The Versions file describes previous releases of Plexil, as well as
the latest features not yet released in a binary distribution.

The CAVEATS file describes known problems and issues in this release.


Software requirements
---------------------

The complete PLEXIL suite should run on most recent versions of Linux
and Mac OS X. It builds on FreeBSD as well.

Building the PLEXIL tool suite requires the following software:

 * GNU Make
 * GNU Bash
 * GNU autotools (autotools-dev, autoconf, libtool packages in Linux)
 * GNU gperf
 * gcc/g++, clang/clang++, or other C99 and C++03 compliant compilers
 * Java 8 or newer JDK (openjdk-8-jdk)
 * Apache ant, including the antlr module

The robosim example program also requires the X11 libraries freeglut, libxi,
libxmu, and their header files.


How to build PLEXIL
-------------------

If you are starting from a fresh git clone:

1. Add the following lines to your shell init file (e.g. ~/.bashrc), using your
   actual location of 'plexil' in the first line.

   export PLEXIL_HOME=/home/joe/plexil
   source $PLEXIL_HOME/scripts/plexil-setup.sh

2. Source your shell init file, e.g.

   source ~/.bashrc

3. For the simplest, default build, perform this step and you're done.
   For a customized build, skip this step and go on to (4).

   cd $PLEXIL_HOME
	 make all

4. Create the configure script:

   cd $PLEXIL_HOME;
   make src/configure;
   cd src;

5. Configure the build. To get a listing of the various options, type:

   ./configure --help

   The example below includes all the optional PLEXIL components as built in the
   previous section, with binaries and libraries installed in the PLEXIL
   installation directory.  You can omit or change options as desired.

   ./configure --prefix=$PLEXIL_HOME --disable-static --enable-gantt --enable-ipc --enable-sas --enable-test-exec --enable-udp

   Please see the CAVEATS file in this directory for advice on options to
   'configure'.

6. Build it!

   cd $PLEXIL_HOME
   make

If you are starting from an updated but previously built git clone:

1. Try simply building:

   cd $PLEXIL_HOME
   make

2. If there are problems, rebuild:

   cd $PLEXIL_HOME
   make clean
   make squeaky-clean
   make

   The 'squeaky-clean' is sometimes needed when make/autotools files have changed.

To build the tool suite without the example applications:

   make tools

To specify a compiler other than gcc/g++, e.g. clang:

   make CC=clang CXX=clang++

On FreeBSD, ensure that GNU make is installed (typically named 'gmake' on this
OS):

   gmake CC=clang CXX=clang++


Advanced builds
---------------

The PLEXIL Executive uses the GNU autotools to allow for easy
customization and cross-compilation when the standard build (above) is
not appropriate for a specific application.

1. Change to the build directory.

   cd plexil/src

2. If you are building from a fresh git checkout, you will need to run the GNU
   autotools first. This step should be unnecessary if you downloaded a release
   tarball.

   mkdir -p m4
   autoreconf -fi

3. Configure the system (see steps 4-5 in the regular build instructions above).

4. Build and install the system:

   make install


Cross-compiling the PLEXIL Executive
------------------------------------

The use of the GNU autotools enables straightforward cross-compilation
of the PLEXIL Executive for embedded applications.

The file $PLEXIL_HOME/src/build-for-buildroot.sh is an example of
cross-compiling the PLEXIL Executive for use with the 'buildroot'
embedded Linux tool suite on an ARM processor.


Running PLEXIL
--------------

This is a brief overview.  See the documentation at plexil.sourceforge.net for
details.

* If you haven't already done so (e.g. you are using a prebuilt PLEXIL),
  perform steps 1-2 of the build instructions above.  This setup is also needed
  to run PLEXIL.

* The 'plexilc' script compiles a PLEXIL plan or Plexilscript simulation script,
  depending on the file extension, to the executable XML representation.

  plexilc my_plan.ple

* The 'plexilexec' and 'plexiltest' scripts run the executive on a plan.






