This is the top level directory of the PLEXIL distribution.

See http://plexil.sourceforge.net/ for information about this
software, including its user manuals.  There is more information in
the README files found in each subdirectory of this directory.

The Versions file describes previous releases of Plexil, as well as
the latest features not yet released in a binary distribution.

The CAVEATS file describes known problems and issues in this release.


Software requirements
---------------------

The complete PLEXIL suite should run on most recent versions of Linux
(including Microsoft Windows Subsystem for Linux) and Mac OS X. It
builds on FreeBSD as well, but is not actively supported on this
platform.

Building the PLEXIL tool suite from source requires the following
software:

 * GNU Make
 * GNU Bash
 * GNU autotools (autoconf, automake, libtool, m4)
 * GNU gperf
 * gcc/g++, clang/clang++, or other C99 and C++03 compliant compilers
 * Java 8 or newer JDK (e.g openjdk-8-jdk)
 * Apache ant, including the antlr module

The robosim example program also requires the X11 libraries freeglut, libxi,
libxmu, and their header files.


How to build PLEXIL - Simple version
------------------------------------

To build the PLEXIL distribution on Linux or macOS:

1. Change to this top level directory and type:

  make all


How to run PLEXIL - Simple version
----------------------------------

1. Add the following lines to your shell init file (e.g. ~/.bashrc).
   Set PLEXIL_HOME to the directory containing this README file.

  export PLEXIL_HOME='/where/i/cloned/plexil'
  . "$PLEXIL_HOME/scripts/plexil-setup.sh"

2. Source the init file you just edited:

  . ~/.bashrc

3. The 'plexilc' script compiles a PLEXIL plan or a Plexilscript
   simulation script to its XML representation:

  plexilc my-plan.ple
   produces the Core Plexil file my-plan.plx
   
  plexilc my-script.pst
   produces the Plexilscript file my-script.psx

4. The 'plexiltest' script runs the Test Executive on a plan and a
   Plexilscript.  This is the easiest way to get started learning the
   PLEXIL language.

  plexiltest -p my-plan.plx -s my-script.psx

5. The 'plexilexec' script runs the Universal Executive on a plan and
   requires an interface configuration file. See the Sourceforge
   documentation for more information.

  plexilexec -c interface-config.xml -p my-plan.plx

6. The 'examples' directory contains a number of examples, and is a
   good place to start exploring.


Advanced builds of the PLEXIL Executive
---------------------------------------

The PLEXIL Executive uses the GNU autotools to allow for easy
customization and cross-compilation when the simple build (above) is
not appropriate for a specific application.

1. Change to this directory and make the 'configure' script:

  cd '/where/i/cloned/plexil'
  make src/configure

2. Change to the 'src' directory and configure the build.

  cd src
  ./configure --prefix="/where/to/install" ... options ...

   As an example, the top level Makefile effectively does this:

  ./configure --prefix="$PLEXIL_HOME" --disable-static --enable-gantt --enable-ipc --enable-sas --enable-test-exec --enable-udp

   To get a complete list of configuration options:

  ./configure --help

3. Build and install the system:

   make install


Using CMake
-----------

The PLEXIL Executive can also be built with the CMake build system.
More documentation will be supplied soon.


Cross-compiling the PLEXIL Executive
------------------------------------

Cross-compilation of the PLEXIL Executive as a component of other
projects is straightforward, using either the GNU autotools or CMake.

The file $PLEXIL_HOME/src/build-for-buildroot.sh is an example of
cross-compiling the PLEXIL Executive for use with the 'buildroot'
embedded Linux tool suite on an ARM processor.  This example uses the
GNU autotools.

Similarly, by supplying an appropriate toolchain file with the
'-DCMAKE_TOOLCHAIN_FILE' option, CMake can build the PLEXIL Executive
for targets other than the host system.
