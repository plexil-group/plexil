This is the top level directory of the PLEXIL distribution.

See http://sourceforge.net/projects/plexil for information about this
software, including its user manuals.  There is more information in
the README files found in each subdirectory of this directory.

The Versions file describes previous releases of Plexil, as well as
the latest features not yet released in a binary distribution.

The CAVEATS file describes known problems and issues in this release.


Software requirements
---------------------

The complete PLEXIL suite should run on most recent versions of Linux
and Mac OS X. It builds on FreeBSD as well, and most of the suite
works out of the box; however, IPC is not yet working, nor is anything
dependent on it (i.e. many of the example apps).

Building the PLEXIL tool suite requires the following software to be
installed:

 GNU Make
 GNU Bash
 gcc/g++, clang/clang++, or other C99 and C++03 compliant compilers
 Java 8 or newer JDK (development package, not just runtime)
 Apache ant, including the antlr module

If you are building from a git clone, GNU gperf and either the GNU
autotools (autoconf, automake, libtool, and m4) or CMake are also
required.

The robosim example program also requires:

 X11 libraries freeglut, libxi, libxmu and their header files


How to build PLEXIL - Simple version
------------------------------------

To build the PLEXIL distribution on Linux, Mac OS X, or FreeBSD,
simply change to this top level directory and type:

 make all

NOTE: if you have just updated your code checkout, you may need to
precede the 'make all' with either of:

 make clean
 make squeaky-clean

The latter of these is sometimes needed when make/autotools files have
changed.

To build the tool suite without the example applications:

 make tools

To specify a compiler other than gcc/g++, e.g. clang:

 make CC=clang CXX=clang++

On FreeBSD, ensure that GNU make is installed (typically named 'gmake'
on this OS):

 gmake CC=clang CXX=clang++


Advanced builds using GNU Autotools
-----------------------------------

The PLEXIL Executive uses the GNU autotools to allow for easy
customization and cross-compilation when the standard build (above) is
not appropriate for a specific application.

The instructions here describe an in-tree build, but out-of-tree
builds should also work, and are preferred if you are building for
multiple target platforms.

1. Change to the build directory.

  cd plexil-4/src

2. If you are building from a fresh git clone, you will need to run
the GNU autotools first. This step should be unnecessary if you
downloaded a release tarball.

  libtoolize --force --copy
  autoreconf --force --install

3. Configure the build using the standard 'configure' script. To get a
listing of the various options, type:

  ./configure --help

The example below includes all the optional PLEXIL components as built
in the previous section, with binaries and libraries installed in the
PLEXIL installation directory.  You can omit or change options as
desired.

  ./configure --prefix=$PLEXIL_HOME --disable-static \
     --enable-gantt --enable-ipc --enable-sas --enable-test-exec --enable-udp

Please see the CAVEATS file in this directory for advice on options to
'configure'.

4. Build and install the system:

  make install


Advanced builds using CMake
---------------------------

The PLEXIL Executive now also supports building with CMake for simpler
integration into CMake-based projects.  CMake version 3.6 or newer is
required.  The instructions here describe an out-of-tree build, which
is the preferred approach.  In-tree builds should also work, but are
not recommended.

1. Create a build directory and change into it.

  mkdir plexil-build
  cd plexil-build

2. Configure the build using CMake.

  cmake path/to/plexil-4/src -DCMAKE_INSTALL_PREFIX=/install/here ... options ...

The example below includes all the optional PLEXIL components as built
in the previous section, with binaries and libraries installed in the
PLEXIL installation directory.  You can omit or change options as
desired.

  cmake path/to/plexil-4/src -DCMAKE_INSTALL_PREFIX="$PLEXIL_HOME" \
    -DGANTT_LISTENER=ON -DSTANDALONE_SIMULATOR=ON -DTEST_EXEC=ON -DUDP_ADAPTER=ON

Please see the CAVEATS file in this directory for advice on CMake options.

4. Build and install the system:

  make install


Static or dynamic linking?
--------------------------

Both the GNU autotools and CMake build systems support producing
either static libraries (.a files) or shared (dynamically linked)
libraries (.so or .dylib). Which approach you take is sometimes
dictated by the project; for instance, Core Flight Executive apps are
typically statically linked.

Static linking allows detection of missing symbols at link time rather
than run time, and statically linked programs load faster - on macOS
in particular, the difference is significant.

Dynamic linking may save resources if several programs using the same
libraries run simultaneously.

The default behavior of the GNU autotools is to build both shared and
static libraries; specifying the '--disable-static' or
'--disable-dynamic' option to 'configure' can avoid having to compile
and link modules twice.

The CMake build defaults to shared libraries. To build static
libraries, specify the '-DBUILD_SHARED_LIBS=OFF' option to 'cmake'.


Cross-compiling the PLEXIL Executive
------------------------------------

The use of the GNU autotools enables straightforward cross-compilation
of the PLEXIL Executive for embedded applications.

The file $PLEXIL_HOME/src/build-for-buildroot.sh is an example of
cross-compiling the PLEXIL Executive for use with the 'buildroot'
embedded Linux tool suite on an ARM processor.

Similarly, by supplying an appropriate toolchain file with the
'-DCMAKE_TOOLCHAIN_FILE' option, CMake can build the PLEXIL Executive
for targets other than the host system.


Running PLEXIL
--------------

1. Set up your environment.  The PLEXIL shell scripts depend on the
setting of PLEXIL_HOME, and for convenience you may wish to add the
PLEXIL scripts and binaries to your shell's path.  This example is for
the Bourne/bash shells or similar.

  export PLEXIL_HOME='/location/of/plexil'
  . $PLEXIL_HOME/scripts/plexil-setup.sh

You may wish to add these two lines to your shell init file.

2. The 'plexil' script launches the Plexil Viewer, in which you can
examine, run, and debug plans.  You may wish to use the plans in the
'examples' directory as a starting point.

  plexil

3. The 'plexilc' script compiles a PLEXIL plan or Plexilscript
simulation script, depending on the file extension, to the executable
XML representation.

  plexilc my_plan.ple

