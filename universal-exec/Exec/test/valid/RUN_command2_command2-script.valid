[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
Root{
 State: (id_231[au](INACTIVE): state(INACTIVE)) (inf)
}

[PlexilExec:handleConditionsChanged]Node Root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Root' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Root' on the state change queue in position 1
[Test:testOutput]Creating initial state barfoo() = (string)the-command
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: Root 
[PlexilExec:lock]Locking node Root
[PlexilExec:step][1:0:0] Transitioning node Root
[PlexilExec:handleConditionsChanged]Node Root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Root' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Root' on the state change queue in position 2
[PlexilExec:unlock]Unlocking node Root
[PlexilExec:step][1:1] State change queue: Root 
[PlexilExec:lock]Locking node Root
[PlexilExec:step][1:1:0] Transitioning node Root
[PlexilExec:handleNeedsExecution]Storing action for node 'Root' of type 'Command' to be executed.
[Test:testOutput]Looking up immediately barfoo()
[Test:testOutput]Returning value 0.00189
[PlexilExec:handleConditionsChanged]Node Root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Root' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node Root
[Test:testOutput]Executing the-command() into noId with ack (id_278[au](UNKNOWN): boolean)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
Root{
 State: (id_231[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_248[au](0): boolean)
 StartCondition: (id_250[au](1): boolean)
 EndCondition: (id_279[au](UNKNOWN): ((id_278[au](UNKNOWN): boolean) && (id_252[au](1): boolean))
 InvariantCondition: (id_254[au](1): boolean)
 PreCondition: (id_256[au](1): boolean)
 PostCondition: (id_258[au](1): boolean)
 RepeatCondition: (id_260[au](0): boolean)
 AncestorInvariantCondition: (id_262[au](1): boolean)
 AncestorEndCondition: (id_264[au](0): boolean)
 ParentExecutingCondition: (id_266[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_268[au](UNKNOWN): boolean)
 AbortCompleteCondition: (id_277[iu](UNKNOWN): boolean)
 ParentWaitingCondition: (id_272[au](0): boolean)
 ParentFinishedCondition: (id_274[au](0): boolean)
 CommandName: (id_276[au](foo): string)
}

[Test:testOutput]Sending command ACK the-command() = 1
[PlexilExec:handleConditionsChanged]Node Root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Root' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Root' on the state change queue in position 3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: Root 
[PlexilExec:lock]Locking node Root
[PlexilExec:step][2:0:0] Transitioning node Root
[PlexilExec:handleConditionsChanged]Node Root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Root' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Root' on the state change queue in position 4
[PlexilExec:unlock]Unlocking node Root
[PlexilExec:step][2:1] State change queue: Root 
[PlexilExec:lock]Locking node Root
[PlexilExec:step][2:1:0] Transitioning node Root
[PlexilExec:handleConditionsChanged]Node Root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Root' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node Root
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
Root{
 State: (id_231[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_232[au](SUCCESS):  outcome)
 CommandName: (id_276[iu](UNKNOWN): string)
}

