# * Copyright (c) 2006-2020, Universities Space Research Association (USRA).
# *  All rights reserved.
# *
# * Redistribution and use in source and binary forms, with or without
# * modification, are permitted provided that the following conditions are met:
# *     * Redistributions of source code must retain the above copyright
# *       notice, this list of conditions and the following disclaimer.
# *     * Redistributions in binary form must reproduce the above copyright
# *       notice, this list of conditions and the following disclaimer in the
# *       documentation and/or other materials provided with the distribution.
# *     * Neither the name of the Universities Space Research Association nor the
# *       names of its contributors may be used to endorse or promote products
# *       derived from this software without specific prior written permission.
# *
# * THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# * DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
# * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This schema extends Core PLEXIL with syntactic sugar: convenient forms 
# that are translated into Core PLEXIL for execution (see translate.xsl).

default namespace = ""
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"

include "plexil-base.rnc"
# Elements
Name = element Name { GeneralizedStringExpression, SourceLocators }
# NodeId is optional in Extended PLEXIL Actions

# This could be implemented as xs:all in XML Schema 1.1,
# IF we could find a validator that understood it.
ActionBase =
  (NodeId?
   | # Annotations for static analysis
     Assume?
   | Desire?
   | Expect?
   | # Variable declarations
     VariableDeclarations?
   | Interface?
   | # User conditions
     StartCondition?
   | RepeatCondition?
   | PreCondition?
   | PostCondition?
   | InvariantCondition?
   | EndCondition?
   | ExitCondition?
   | SkipCondition?
   | # Any number of Comment elements COULD be included
     # if we could implement XML Schema 1.1.
     Comment?
   | # Currently only relevant for Assignment nodes
     element Priority { xsd:nonNegativeInteger }?)*,
  SourceLocators
# NodeId is optional in Extended PLEXIL Node

# NodeType could inherit from ActionBase if
# we could implement XML Schema 1.1.
NodeType =
  (NodeId?
   & Assume?
   & Desire?
   & Expect?
   & VariableDeclarations?
   & Interface?
   & StartCondition?
   & RepeatCondition?
   & PreCondition?
   & PostCondition?
   & InvariantCondition?
   & EndCondition?
   & ExitCondition?
   & SkipCondition?
   & Comment?
   & element Priority { xsd:nonNegativeInteger }?
   & NodeBody?),
  NodeAttributes
ActionGroup =
  Node
  | Concurrence
  | Sequence
  | CheckedSequence
  | UncheckedSequence
  | Try
  | If
  | Do
  | While
  | For
  | OnCommand
  | OnMessage
  | Wait
  | SynchronousCommand
BooleanExpression =
  BooleanVariable
  | BooleanValue
  | LogicalOperator
  | Equality
  | NumericComparison
  | KnownTest
  | NodeStatePredicate
  | NodeOutcomePredicate
  | NodeFailurePredicate
  | # Extended PLEXIL macros
    IterationSucceeded
  | Interrupted
  | IterationFailed
  | InvariantFailed
  | ParentFailed
  | PreconditionFailed
  | MessageReceived
DeclaredVariable =
  IntegerVariable
  | RealVariable
  | BooleanVariable
  | StringVariable
  | DateVariable
  | DurationVariable
  | ArrayVariable
  | ArrayElement
LookupGroup = LookupOnChange | LookupNow | Lookup
NumericExpression =
  ArithmeticOperator
  | IntegerVariable
  | RealVariable
  | IntegerValue
  | RealValue
  | DateVariable
  | DateValue
  | DurationVariable
  | DurationValue
  | NodeTimepointValue
  | #  read operations for arrays
    ArraySize
  | ArrayMaxSize
Value =
  IntegerValue
  | RealValue
  | BooleanValue
  | StringValue
  | DateValue
  | DurationValue
# Schema types
AtomicTypeValues =
  "Integer" | "Real" | "Boolean" | "String" | "Date" | "Duration"
ParameterTypeValues =
  "Integer"
  | "Real"
  | "Boolean"
  | "String"
  | "Date"
  | "Duration"
  | "Any"
# Extensions to Core Plexil
DurationVariable = element DurationVariable { xsd:NCName }
DateVariable = element DateVariable { xsd:NCName }
DateValue = element DateValue { xsd:dateTime, SourceLocators }
DurationValue = element DurationValue { xsd:duration, SourceLocators }
# Sequence forms
SequenceType = ActionBase, ActionGroup*
# Actions are performed concurrently.  This is just a List Node.
Concurrence = element Concurrence { SequenceType }
# Each action in the sequence is performed in the given order.  If
# one fails, the Sequence form terminates with failure.
Sequence = element Sequence { SequenceType }
# Each action in the sequence is performed in the given order.  If
# one fails, the CheckedSequence form terminates with failure.
CheckedSequence = element CheckedSequence { SequenceType }
# Like Sequence, except the actions are not checked for success.
# They will all be executed
UncheckedSequence = element UncheckedSequence { SequenceType }
# Each action in the sequence is performed in turn, until one of
# them succeeds; the rest are ignored.  The Try form fails if and
# only if all its actions fail.
Try = element Try { SequenceType }
# Conditionals and loops

# Common components of the following statements
Condition =
  element Condition { GeneralizedBooleanExpression, SourceLocators }
ActionType = ActionGroup, SourceLocators
Action = element Action { ActionType }
# If statement with optional ElseIf and Else.
If =
  element If {
    ActionBase,
    Condition,
    element Then { ActionType },
    element ElseIf {
      Condition,
      element Then { ActionType },
      SourceLocators
    }*,
    element Else { ActionType }?
  }
# A classic do-while loop
Do = element Do { ActionBase, Action, Condition }
# A classic while loop
While = element While { ActionBase, Condition, Action }
# A For loop.  First a variable is declared (it must be numeric).
# Next is a boolean expression that determines when to keep the loop
# going.  Next is a numeric expression used to update the variable
# (it is typically a function of the variable).  Finally, actions
# to execute.
For =
  element For {
    ActionBase,
    element LoopVariable { (DeclareVariable), SourceLocators },
    Condition,
    element LoopVariableUpdate {
      GeneralizedNumericExpression, SourceLocators
    },
    Action
  }
# Node Predicates

# TODO: implement these in the Exec, move to plexil-base schema
IterationSucceeded = element IterationSucceeded { node-reference }
Interrupted = element Interrupted { node-reference }
IterationFailed = element IterationFailed { node-reference }
InvariantFailed = element InvariantFailed { node-reference }
ParentFailed = element ParentFailed { node-reference }
PreconditionFailed = element PreconditionFailed { node-reference }
# Support for message passing between executives

# Deprecated
MessageReceived =
  element MessageReceived {
    GeneralizedStringExpression, SourceLocators
  }
OnCommand = element OnCommand { ActionBase, Name, ActionGroup? }
OnMessage =
  element OnMessage {
    ActionBase,
    element Message { GeneralizedStringExpression, SourceLocators },
    ActionGroup?
  }
# Specialized actions

# Wait a specified duration, with optional tolerance for the time reading
Wait =
  element Wait {
    ActionBase,
    element Units { GeneralizedNumericExpression, SourceLocators },
    Tolerance?
  }
# Command action that waits for its return value or status handle
SynchronousCommand =
  element SynchronousCommand {
    ActionBase,
    element Timeout { GeneralizedNumericExpression, SourceLocators }?,
    Tolerance?,
    Command
  }
# Generic lookup form
Lookup = element Lookup { Name, Tolerance?, Arguments?, SourceLocators }
