# * Copyright (c) 2006-2022, Universities Space Research Association (USRA).
# *  All rights reserved.
# *
# * Redistribution and use in source and binary forms, with or without
# * modification, are permitted provided that the following conditions are met:
# *     * Redistributions of source code must retain the above copyright
# *       notice, this list of conditions and the following disclaimer.
# *     * Redistributions in binary form must reproduce the above copyright
# *       notice, this list of conditions and the following disclaimer in the
# *       documentation and/or other materials provided with the distribution.
# *     * Neither the name of the Universities Space Research Association nor the
# *       names of its contributors may be used to endorse or promote products
# *       derived from this software without specific prior written permission.
# *
# * THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# * DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
# * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This schema extends Core PLEXIL with syntactic sugar: convenient forms 
# that are translated into Core PLEXIL for execution (see translate.xsl).

default namespace = ""
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"

include "plexil-base.rnc"
# Legal actions in a PlexilPlan
ActionGroup =
  Node
  | Concurrence
  | Sequence
  | CheckedSequence
  | UncheckedSequence
  | Try
  | If
  | Do
  | While
  | For
  | OnCommand
  | OnMessage
  | Wait
  | SynchronousCommand
# Variation to support SequenceType
Actions =
  Node*
  & Concurrence*
  & Sequence*
  & CheckedSequence*
  & UncheckedSequence*
  & Try*
  & If*
  & Do*
  & While*
  & For*
  & OnCommand*
  & OnMessage*
  & Wait*
  & SynchronousCommand*
# The NodeId element is optional in Extended PLEXIL Node.
NodeActionType =
  (ActionOptions & NodeId? & NodeBody?), attr_NodeType, SourceLocators
# Support for higher level control structures in Extended PLEXIL

# There are certain things I can't find a way to express in XSD
# 1.1...  and one of them is an xs:all group of [0,1] occurrences
# followed by a sequence.
# 
# The alternatives for approximating this are ugly: a sequence
# with [0,1] occurrences of these options, which would force an
# unwanted and Procrustean ordering.  Or this kludge.
# 
# An undesired effect of this approach is that it permits
# multiple copies of the elements in the xs:choice.  The Standard
# PLEXIL compiler will never generate such code, and the Exec
# will catch the error if it gets past the Extended PLEXIL
# translator (which is likely).  So we live with it.
ActionOptionChoices =
  # NodeId is optional in Extended PLEXIL
  NodeId
  | # Annotations for static analysis
    Assume
  | Desire
  | Expect
  | # Variable declarations
    VariableDeclarations
  | Interface
  | UsingMutex
  | # User conditions
    StartCondition
  | RepeatCondition
  | PreCondition
  | PostCondition
  | InvariantCondition
  | EndCondition
  | ExitCondition
  | SkipCondition
  | # A Comment element has no effect, and passes through the
    # translator unscathed
    Comment
  | # Used in resource conflict resolution
    element Priority { xsd:nonNegativeInteger }
# When order of subelements is important, e.g. If, For
OrderedActionType = ActionOptionChoices*, SourceLocators
# When order of subelements is unimportant, e.g. Wait, Sequence
UnorderedActionType = (ActionOptions & NodeId?), SourceLocators
# Sequence forms
SequenceType = UnorderedActionType, Actions
# All actions in a Concurrence are performed concurrently.  This
# construct translates directly into a NodeList node.
Concurrence = element Concurrence { SequenceType }
# Each action in the CheckedSequence is executed in the given
# order.  If all succeed, the CheckedSequence terminates with an
# outcome of SUCCESS.  If any of the action fails, the
# CheckedSequence form terminates with an outcome of FAILURE.
CheckedSequence = element CheckedSequence { SequenceType }
# Each action in the UncheckedSequence is performed in the given
# order, irrespective of their outcomes.  A completed
# UncheckedSequence always has an outcome of SUCCESS.
UncheckedSequence = element UncheckedSequence { SequenceType }
# Sequence is an alias for CheckedSequence.  It will be aliased
# to UncheckedSequence in a future release.
Sequence = element Sequence { SequenceType }
# Each action in a Try form is executed in order until one of
# them finishes with an outcome of SUCCESS.  The rest are
# ignored.  The Try form fails if and only if all its actions
# fail.
Try = element Try { SequenceType }
# Conditionals and loops

# Common components of the following higher level control
# structures
Condition =
  element Condition { GeneralizedBooleanExpression, SourceLocators }
# SimpleActionType consists of a single action, with optional
# source locator attributes.  Previously named ActionType.
SimpleActionType = ActionGroup, SourceLocators
Action = element Action { SimpleActionType }
# Classic If-Then-ElseIf-Else statement
If =
  element If {
    OrderedActionType,
    Condition,
    element Then { SimpleActionType },
    element ElseIf {
      Condition,
      element Then { SimpleActionType },
      SourceLocators
    }*,
    element Else { SimpleActionType }?
  }
# A classic do-while loop, which maps directly into a single Node
# with a RepeatCondition.
Do = element Do { OrderedActionType, Action, Condition }
# A classic while loop
While = element While { OrderedActionType, Condition, Action }
# A For loop.  First a variable is declared (it must be numeric).
# Next is the while-test condition.  Next is a numeric expression
# used to update the variable (it is typically a function of the
# variable).  Finally, an action to execute.
For =
  element For {
    OrderedActionType,
    element LoopVariable { (DeclareVariable), SourceLocators },
    Condition,
    element LoopVariableUpdate {
      GeneralizedNumericExpression, SourceLocators
    },
    Action
  }
# Specialized actions

# Wait a specified duration, with optional tolerance for the time lookup
Wait =
  element Wait {
    UnorderedActionType,
    (element Units { GeneralizedNumericExpression, SourceLocators }
     & Tolerance?)
  }
# Command action that waits for its return value or status handle
SynchronousCommand =
  element SynchronousCommand {
    UnorderedActionType,
    (Command
     & element Checked { empty }?
     & element Timeout {
         GeneralizedNumericExpression, Tolerance?, SourceLocators
       }?)
  }
# Support for message passing between agents
# 
# These actions depend upon a specific set of commands and
# lookups implemented by IpcAdapter.

# Wait to receive the named command from an external agent.  When
# it is received, perform the action.
# 
# OnCommand utilizes the ReceiveCommand, GetParameter, and
# SendReturnValue commands as implemented in the IpcAdapter.  The
# signature and behavior of these commands was not documented
# until 2021.
# 
# OnCommand may be deprecated in a future release.
OnCommand = element OnCommand { OrderedActionType, Name, ActionGroup? }
# Wait to receive the given message (a string) from an external
# agent.  Upon receipt, perform the action.
# 
# OnMessage utilizes the ReceiveMessage command, as implemented
# by the IpcAdapter.  The signature and behavior of this command
# were not documented until 2021.
# 
# OnMessage may be deprecated in a future release.
OnMessage =
  element OnMessage {
    OrderedActionType,
    element Message { GeneralizedStringExpression, SourceLocators },
    ActionGroup?
  }
# MessageReceived was used for message passing in an earlier PLEXIL release.
# It expands into a wrapper around LookupOnChange.
# 
# MessageReceived is deprecated and will be removed in the next
# major releas of PLEXIL.
MessageReceived =
  element MessageReceived {
    GeneralizedStringExpression, SourceLocators
  }
# Conveniences

# Node reference predicates, combining tests on node state,
# outcome, and failure type

# TODO: implement these in the Exec, move to plexil-base schema

# NodeStateVariable == ITERATION_ENDED &&
# NodeOutcomeVariable == SUCCESS
IterationSucceeded = element IterationSucceeded { node-reference }
# NodeStateVariable == FINISHED &&
# NodeOutcomeVariable == INTERRUPTED
Interrupted = element Interrupted { node-reference }
# NodeStateVariable == ITERATION_ENDED &&
# NodeOutcomeVariable == FAILURE
IterationFailed = element IterationFailed { node-reference }
# NodeStateVariable == FINISHED &&
# NodeOutcomeVariable == FAILURE &&
# NodeFailureVariable == INVARIANT_CONDITION_FAILED
InvariantFailed = element InvariantFailed { node-reference }
# NodeStateVariable == FINISHED &&
# NodeOutcomeVariable == FAILURE &&
# NodeFailureVariable == PARENT_FAILED
ParentFailed = element ParentFailed { node-reference }
# NodeStateVariable == FINISHED &&
# NodeOutcomeVariable == FAILURE &&
# NodeFailureVariable == PRE_CONDITION_FAILED
PreconditionFailed = element PreconditionFailed { node-reference }
# Generalized lookup form expands to LookupNow or LookupOnChange
# as appropriate for the context
Lookup = element Lookup { Name, Tolerance?, Arguments?, SourceLocators }
# Lookup can be used anywhere LookupNow or LookupOnChange is legal
LookupGroup = LookupOnChange | LookupNow | Lookup
# Extended PLEXIL allows the Name of a Command or Lookup to be
# either a literal string value, or a string-valued
# expression.
Name = element Name { GeneralizedStringExpression, SourceLocators }
# BooleanExpression adds the new node predicates
BooleanExpression =
  BooleanVariable
  | BooleanValue
  | LogicalOperator
  | Equality
  | NumericComparison
  | KnownTest
  | NodeStatePredicate
  | NodeOutcomePredicate
  | NodeFailurePredicate
  | # New node predicates
    IterationSucceeded
  | Interrupted
  | IterationFailed
  | InvariantFailed
  | ParentFailed
  | PreconditionFailed
  | # MessageReceived macro (DEPRECATED)
    MessageReceived
# Date and duration

# DateValue accepts ISO 8601 date values
DateValue = element DateValue { xsd:dateTime, SourceLocators }
# DurationValue accepts ISO 8601 duration values
DurationValue = element DurationValue { xsd:duration, SourceLocators }
# Date and Duration typed variables
DurationVariable = element DurationVariable { xsd:NCName }
DateVariable = element DateVariable { xsd:NCName }
# Date and duration values and variables are legal numeric expressions
NumericExpression =
  ArithmeticOperator
  | IntegerValue
  | IntegerVariable
  | RealValue
  | RealVariable
  | DateValue
  | DateVariable
  | DurationValue
  | DurationVariable
  | NodeTimepointValue
  | # array attributes
    ArraySize
  | ArrayMaxSize
# DateVariable and DurationVariable can be used just like other
# variables.
DeclaredVariable =
  IntegerVariable
  | RealVariable
  | BooleanVariable
  | StringVariable
  | DateVariable
  | DurationVariable
  | ArrayVariable
  | ArrayElement
# Legal scalar literal values

# Note: ArrayValue is not included here because arrays
# are handled independently (and NOT supported in places
# were Value is)
Value =
  IntegerValue
  | RealValue
  | BooleanValue
  | StringValue
  | DateValue
  | DurationValue
# Schema types

# AtomicTypeValues are legal types names in DeclareVariable,
# DeclareArray, the Type attribute of ArrayValue, and Return
# elements of CommandDeclaration and StateDeclaration.
# 
# Extended PLEXIL adds Date and Duration to the legal types.
AtomicTypeValues =
  "Integer" | "Real" | "Boolean" | "String" | "Date" | "Duration"
# Legal types in parameter declarations include all of atomic
# type values, plus the "Any" type.
ParameterTypeValues =
  "Integer"
  | "Real"
  | "Boolean"
  | "String"
  | "Date"
  | "Duration"
  | "Any"
