namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"
default namespace = ""

start =
  DeclareMutex
  | SQRT
  | Node
  | DurationVariable
  | NumericRHS
  | OnMessage
  | Assignment
  | ALL_KNOWN
  | FLOOR
  | LibraryNodeDeclaration
  | ArrayVariable
  | BooleanValue
  | DateVariable
  | EQBoolean
  | EQString
  | CEIL
  | StringValue
  | EQArray
  | IsKnown
  | NodeCommandHandleValue
  | SUB
  | Finished
  | StringRHS
  | NodeBody
  | NodeList
  | Skipped
  | StartCondition
  | Arguments
  | PostCondition
  | STRLEN
  | ResourceList
  | MIN
  | IterationFailed
  | InvariantCondition
  | PostconditionFailed
  | NEInternal
  | Concurrence
  | XOR
  | If
  | In
  | MAX
  | LookupOnChange
  | ParentFailed
  | TRUNC
  | NEString
  | VariableDeclarations
  | Timepoint
  | NEArray
  | NodeRef
  | EndCondition
  | ABS
  | NodeStateVariable
  | DateValue
  | ArraySize
  | REAL_TO_INT
  | RealValue
  | DurationValue
  | NodeOutcomeVariable
  | RealVariable
  | NodeOutcomeValue
  | StringVariable
  | EQNumeric
  | DIV
  | Interrupted
  | Parameter
  | LE
  | InvariantFailed
  | PreconditionFailed
  | Interface
  | ADD
  | DeclareArray
  | IterationSucceeded
  | ArrayMaxSize
  | LT
  | Update
  | Name
  | Concat
  | Succeeded
  | IntegerVariable
  | BooleanRHS
  | ANY_KNOWN
  | Try
  | Lookup
  | RepeatCondition
  | NodeFailureValue
  | ArrayElement
  | NodeStateValue
  | (notAllowed
     | element PlexilPlan {
         SourceLocators, GlobalDeclarations?, Action
       })
  | MUL
  | Failed
  | PreCondition
  | Resource
  | For
  | Sequence
  | UncheckedSequence
  | NOT
  | AND
  | NodeId
  | IterationEnded
  | Executing
  | ExitCondition
  | Wait
  | ArrayValue
  | NodeCommandHandleVariable
  | EQInternal
  | ROUND
  | DeclareVariable
  | NodeFailureVariable
  | ArrayRHS
  | NENumeric
  | GlobalDeclarations
  | CommandDeclaration
  | Inactive
  | UsingMutex
  | GE
  | LookupNow
  | Pair
  | SynchronousCommand
  | Return
  | OR
  | MOD
  | IntegerValue
  | Tolerance
  | NodeTimepointValue
  | While
  | MessageReceived
  | LibraryNodeCall
  | GT
  | NEBoolean
  | Waiting
  | OnCommand
  | Command
  | BooleanVariable
  | Alias
  | SkipCondition
  | InOut
  | StateDeclaration
<<<<<<< .mine
PreconditionFailed =
||||||| .r4854
FLOOR =
=======
CEIL =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element PreconditionFailed { node-reference }
GeneralizedBooleanExpression =
  BooleanExpression | LookupGroup | ArrayElement
Timepoint =
||||||| .r4854
  | element FLOOR { SourceLocators, GeneralizedNumericExpression }
ALL_KNOWN =
=======
  | element CEIL { SourceLocators, GeneralizedNumericExpression }
DateValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Timepoint { xsd:NMTOKEN "START" | xsd:NMTOKEN "END" }
NOT =
  notAllowed
  | element NOT { SourceLocators, GeneralizedBooleanExpression }
IntegerValue =
  notAllowed
  | element IntegerValue { xsd:integer }
MessageReceived =
  notAllowed
  | element MessageReceived {
      SourceLocators, GeneralizedStringExpression
    }
StringExpression = StringVariable | StringValue | Concat
DateVariable =
  notAllowed
  | element DateVariable { NCName }
NodeOutcomeValue =
  notAllowed
  | element NodeOutcomeValue {
      xsd:NMTOKEN "SUCCESS"
      | xsd:NMTOKEN "SKIPPED"
      | xsd:NMTOKEN "FAILURE"
      | xsd:NMTOKEN "INTERRUPTED"
    }
PostconditionFailed =
  notAllowed
  | element PostconditionFailed { node-reference }
||||||| .r4854
  | element ALL_KNOWN { SourceLocators, GeneralizedArrayExpression }
DurationValue =
  notAllowed
  | element DurationValue { xsd:string }
Executing =
  notAllowed
  | element Executing { node-reference }
NumericRHS =
  notAllowed
  | element NumericRHS { SourceLocators, GeneralizedNumericExpression }
Assignment =
  notAllowed
  | element Assignment {
      SourceLocators,
      DeclaredVariable,
      (BooleanRHS | NumericRHS | StringRHS | ArrayRHS)
    }
LookupNow =
  notAllowed
  | element LookupNow { SourceLocators, Name, Arguments? }
ExitCondition =
  notAllowed
  | element ExitCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
XOR =
  notAllowed
  | element XOR { SourceLocators, GeneralizedBooleanExpression* }
MutexDeclaration =
  notAllowed
  | element MutexDeclaration {
      SourceLocators,
      element Name { NCName }
    }
EQInternal =
  notAllowed
  | element EQInternal {
      SourceLocators,
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
    }
Pair =
  notAllowed
  | element Pair {
      element Name { NCName },
      Expression
    }
VariableDeclarations =
  notAllowed
  | element VariableDeclarations { (DeclareVariable | DeclareArray)+ }
NodeOutcomeVariable =
  notAllowed
  | element NodeOutcomeVariable { node-reference }
ADD =
  notAllowed
  | element ADD {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
    }
SequenceType = NodeClauses+, Action*
EndCondition =
  notAllowed
  | element EndCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
InvariantCondition =
  notAllowed
  | element InvariantCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
NEInternal =
  notAllowed
  | element NEInternal {
      SourceLocators,
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
    }
=======
  | element DateValue { xsd:string }
Pair =
  notAllowed
  | element Pair {
      element Name { NCName },
      Expression
    }
>>>>>>> .r4867
NodeClauses =
  NodeId
  | empty
  | (notAllowed
     | element Comment { \string })
  | StartCondition
  | RepeatCondition
  | PreCondition
  | PostCondition
  | InvariantCondition
  | EndCondition
  | SkipCondition
  | (notAllowed
     | element Priority { nonNegativeInteger })
  | Interface
  | VariableDeclarations
<<<<<<< .mine
ExitCondition =
||||||| .r4854
  | Mutexes
EQNumeric =
=======
  | UsingMutex
IterationEnded =
  notAllowed
  | element IterationEnded { node-reference }
LookupOnChange =
  notAllowed
  | element LookupOnChange {
      SourceLocators, Name, Tolerance?, Arguments?
    }
Command =
  notAllowed
  | element Command {
      SourceLocators, ResourceList?, DeclaredVariable?, Name, Arguments?
    }
DeclaredVariable =
  IntegerVariable
  | RealVariable
  | BooleanVariable
  | StringVariable
  | DateVariable
  | DurationVariable
  | ArrayVariable
  | ArrayElement
EndCondition =
  notAllowed
  | element EndCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
OR =
  notAllowed
  | element OR { SourceLocators, GeneralizedBooleanExpression* }
DeclareMutex =
  notAllowed
  | element DeclareMutex {
      SourceLocators,
      element Name { SourceLocators, xsd:NCName }
    }
EQNumeric =
>>>>>>> .r4867
  notAllowed
  | element ExitCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
<<<<<<< .mine
BooleanExpression =
  (OR | XOR | AND | NOT)
  | (EQBoolean
     | EQNumeric
     | EQInternal
     | EQString
     | EQArray
     | NEBoolean
     | NENumeric
     | NEInternal
     | NEString
     | NEArray)
  | (GT | GE | LT | LE)
  | (IsKnown | ALL_KNOWN | ANY_KNOWN)
  | BooleanVariable
  | BooleanValue
  | Finished
  | IterationEnded
  | Executing
  | Waiting
  | Inactive
  | Succeeded
  | IterationSucceeded
  | Failed
  | Interrupted
  | IterationFailed
  | Skipped
  | InvariantFailed
  | PreconditionFailed
  | PostconditionFailed
  | ParentFailed
  | MessageReceived
ArrayVariable =
||||||| .r4854
MIN =
=======
NodeStateVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ArrayVariable { NCName }
LookupOnChange =
  notAllowed
  | element LookupOnChange {
      SourceLocators, Name, Tolerance?, Arguments?
||||||| .r4854
  | element MIN {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
=======
  | element NodeStateVariable { node-reference }
ArrayMaxSize =
  notAllowed
  | element ArrayMaxSize { SourceLocators, GeneralizedArrayExpression }
InvariantCondition =
  notAllowed
  | element InvariantCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
NodeState = NodeStateVariable | NodeStateValue
ArrayExpression = ArrayValue | ArrayVariable
PostCondition =
  notAllowed
  | element PostCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
NENumeric =
  notAllowed
  | element NENumeric {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
>>>>>>> .r4867
    }
<<<<<<< .mine
NodeBody =
  notAllowed
  | element NodeBody {
      NodeList | Command | Assignment | Update | LibraryNodeCall
    }
DateValue =
||||||| .r4854
DateValue =
=======
EQBoolean =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element DateValue { xsd:string }
||||||| .r4854
  | element DateValue { xsd:string }
NodeFailureVariable =
  notAllowed
  | element NodeFailureVariable { node-reference }
=======
  | element EQBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
MAX =
  notAllowed
  | element MAX {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
NumericRHS =
  notAllowed
  | element NumericRHS { SourceLocators, GeneralizedNumericExpression }
>>>>>>> .r4867
Node =
  notAllowed
  | element Node {
      SourceLocators,
      attribute epx { xsd:NCName }?,
      attribute NodeType {
        xsd:NMTOKEN "Assignment"
        | xsd:NMTOKEN "Empty"
        | xsd:NMTOKEN "Command"
        | xsd:NMTOKEN "NodeList"
        | xsd:NMTOKEN "Update"
        | xsd:NMTOKEN "LibraryNodeCall"
      },
      (element Comment { \string }?
       & NodeId
       & StartCondition?
       & RepeatCondition?
       & PreCondition?
       & PostCondition?
       & InvariantCondition?
       & EndCondition?
       & ExitCondition?
       & SkipCondition?
       & element Priority { nonNegativeInteger }?
       & Interface?
       & VariableDeclarations?
<<<<<<< .mine
||||||| .r4854
       & Mutexes?
=======
       & UsingMutex?
>>>>>>> .r4867
       & NodeBody?)
    }
<<<<<<< .mine
NCName = xsd:NCName
Assignment =
||||||| .r4854
In =
=======
DIV =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Assignment {
      SourceLocators,
      DeclaredVariable,
      (BooleanRHS | NumericRHS | StringRHS | ArrayRHS)
    }
MAX =
  notAllowed
  | element MAX {
||||||| .r4854
  | element In { SourceLocators, (DeclareVariable | DeclareArray)+ }
NodeState = NodeStateVariable | NodeStateValue
MOD =
  notAllowed
  | element MOD {
=======
  | element DIV {
>>>>>>> .r4867
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
<<<<<<< .mine
NumericExpression =
  (ADD
   | SUB
   | MUL
   | DIV
   | MOD
   | MAX
   | MIN
   | SQRT
   | ABS
   | CEIL
   | FLOOR
   | ROUND
   | TRUNC
   | REAL_TO_INT
   | STRLEN)
  | IntegerVariable
  | RealVariable
  | IntegerValue
  | RealValue
  | DateVariable
  | DateValue
  | DurationVariable
  | DurationValue
  | NodeTimepointValue
  | ArraySize
  | ArrayMaxSize
ANY_KNOWN =
||||||| .r4854
ROUND =
=======
FLOOR =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ANY_KNOWN { SourceLocators, GeneralizedArrayExpression }
nonNegativeInteger = xsd:nonNegativeInteger
SUB =
||||||| .r4854
  | element ROUND { SourceLocators, GeneralizedNumericExpression }
IntegerVariable =
=======
  | element FLOOR { SourceLocators, GeneralizedNumericExpression }
DeclareArray =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element SUB {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
    }
NodeCommandHandle = NodeCommandHandleVariable | NodeCommandHandleValue
GT =
  notAllowed
  | element GT {
||||||| .r4854
  | element IntegerVariable { NCName }
GT =
  notAllowed
  | element GT {
=======
  | element DeclareArray {
>>>>>>> .r4867
      SourceLocators,
      element Name { NCName },
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?,
      element InitialValue { Value+ | ArrayValue }?
    }
<<<<<<< .mine
FLOOR =
||||||| .r4854
LookupGroup = LookupOnChange | LookupNow | Lookup
Mutexes =
=======
ALL_KNOWN =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element FLOOR { SourceLocators, GeneralizedNumericExpression }
GeneralizedNumericExpression =
  NumericExpression | LookupGroup | ArrayElement
BooleanVariable =
||||||| .r4854
  | element Mutexes {
      SourceLocators,
      element Name {
        element StringValue { NCName }
      }+
    }
GeneralizedArrayExpression = ArrayExpression | LookupGroup
REAL_TO_INT =
=======
  | element ALL_KNOWN { SourceLocators, GeneralizedArrayExpression }
NEString =
  notAllowed
  | element NEString {
      SourceLocators,
      GeneralizedStringExpression,
      GeneralizedStringExpression
    }
NumericExpression =
  (ADD
   | SUB
   | MUL
   | DIV
   | MOD
   | MAX
   | MIN
   | SQRT
   | ABS
   | CEIL
   | FLOOR
   | ROUND
   | TRUNC
   | REAL_TO_INT
   | STRLEN)
  | IntegerVariable
  | RealVariable
  | IntegerValue
  | RealValue
  | DateVariable
  | DateValue
  | DurationVariable
  | DurationValue
  | NodeTimepointValue
  | ArraySize
  | ArrayMaxSize
VariableDeclarations =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element BooleanVariable { NCName }
Concurrence =
||||||| .r4854
  | element REAL_TO_INT { SourceLocators, GeneralizedNumericExpression }
Try =
=======
  | element VariableDeclarations {
      (DeclareVariable | DeclareArray | DeclareMutex)+
    }
STRLEN =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Concurrence { SourceLocators, SequenceType }
In =
||||||| .r4854
  | element Try { SourceLocators, SequenceType }
NodeReference = NodeId | NodeRef
CEIL =
=======
  | element STRLEN { SourceLocators, GeneralizedStringExpression }
NodeStateValue =
  notAllowed
  | element NodeStateValue {
      xsd:NMTOKEN "EXECUTING"
      | xsd:NMTOKEN "FAILING"
      | xsd:NMTOKEN "ITERATION_ENDED"
      | xsd:NMTOKEN "INACTIVE"
      | xsd:NMTOKEN "WAITING"
      | xsd:NMTOKEN "FINISHING"
      | xsd:NMTOKEN "FINISHED"
    }
TRUNC =
  notAllowed
  | element TRUNC { SourceLocators, GeneralizedNumericExpression }
UncheckedSequence =
  notAllowed
  | element UncheckedSequence { SourceLocators, SequenceType }
NodeReference = NodeId | NodeRef
ABS =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element In { SourceLocators, (DeclareVariable | DeclareArray)+ }
IterationSucceeded =
||||||| .r4854
  | element CEIL { SourceLocators, GeneralizedNumericExpression }
GeneralizedNumericExpression =
  NumericExpression | LookupGroup | ArrayElement
RealValue =
=======
  | element ABS { SourceLocators, GeneralizedNumericExpression }
IntegerValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element IterationSucceeded { node-reference }
NodeTimepointValue =
||||||| .r4854
  | element RealValue { xsd:double }
PreCondition =
=======
  | element IntegerValue { xsd:integer }
RepeatCondition =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeTimepointValue {
      SourceLocators, NodeReference, NodeStateValue, Timepoint
||||||| .r4854
  | element PreCondition {
      SourceLocators, GeneralizedBooleanExpression
=======
  | element RepeatCondition {
      SourceLocators, GeneralizedBooleanExpression
>>>>>>> .r4867
    }
<<<<<<< .mine
GeneralizedArrayExpression = ArrayExpression | LookupGroup
Skipped =
||||||| .r4854
OnMessage =
=======
ArrayValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Skipped { node-reference }
Inactive =
||||||| .r4854
  | element OnMessage {
      SourceLocators,
      NodeClauses+,
      element Message { GeneralizedStringExpression },
      Action?
    }
Succeeded =
=======
  | element ArrayValue {
      SourceLocators,
      attribute Type {
        xsd:NMTOKEN "Integer"
        | xsd:NMTOKEN "Real"
        | xsd:NMTOKEN "Duration"
        | xsd:NMTOKEN "String"
        | xsd:NMTOKEN "Boolean"
        | xsd:NMTOKEN "Date"
      },
      (IntegerValue+ | RealValue+ | BooleanValue+ | StringValue+)
    }
Inactive =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Inactive { node-reference }
Waiting =
||||||| .r4854
  | element Succeeded { node-reference }
Timepoint =
=======
  | element Inactive { node-reference }
OnCommand =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Waiting { node-reference }
ParentFailed =
  notAllowed
  | element ParentFailed { node-reference }
Lookup =
  notAllowed
  | element Lookup { SourceLocators, Name, Tolerance?, Arguments? }
SQRT =
||||||| .r4854
  | element Timepoint { xsd:NMTOKEN "START" | xsd:NMTOKEN "END" }
NodeOutcomeValue =
  notAllowed
  | element NodeOutcomeValue {
      xsd:NMTOKEN "SUCCESS"
      | xsd:NMTOKEN "SKIPPED"
      | xsd:NMTOKEN "FAILURE"
      | xsd:NMTOKEN "INTERRUPTED"
    }
GeneralizedStringExpression =
  StringExpression | LookupGroup | ArrayElement
AtomicTypeValues =
  xsd:NMTOKEN "Integer"
  | xsd:NMTOKEN "Real"
  | xsd:NMTOKEN "Duration"
  | xsd:NMTOKEN "String"
  | xsd:NMTOKEN "Boolean"
  | xsd:NMTOKEN "Date"
Lookup =
  notAllowed
  | element Lookup { SourceLocators, Name, Tolerance?, Arguments? }
NodeCommandHandle = NodeCommandHandleVariable | NodeCommandHandleValue
GlobalDeclarations =
=======
  | element OnCommand { SourceLocators, NodeClauses+, Name, Action? }
GeneralizedStringExpression =
  StringExpression | LookupGroup | ArrayElement
Value =
  IntegerValue
  | RealValue
  | BooleanValue
  | StringValue
  | DateValue
  | DurationValue
GeneralizedArrayExpression = ArrayExpression | LookupGroup
GlobalDeclarations =
>>>>>>> .r4867
  notAllowed
  | element SQRT { SourceLocators, GeneralizedNumericExpression }
Sequence =
  notAllowed
  | element Sequence { SourceLocators, SequenceType }
DurationValue =
  notAllowed
  | element DurationValue { xsd:string }
NodeReference = NodeId | NodeRef
SynchronousCommand =
  notAllowed
  | element SynchronousCommand {
      SourceLocators,
<<<<<<< .mine
      NodeClauses+,
      element Timeout { GeneralizedNumericExpression }?,
      Tolerance?,
      Command
||||||| .r4854
      (CommandDeclaration
       | empty
       | StateDeclaration
       | LibraryNodeDeclaration
       | MutexDeclaration
       | element TimeScalingUnitsSubunits { xsd:integer })+
=======
      (CommandDeclaration
       | empty
       | StateDeclaration
       | LibraryNodeDeclaration
       | DeclareMutex
       | element TimeScalingUnitsSubunits { xsd:integer })+
>>>>>>> .r4867
    }
<<<<<<< .mine
ResourceList =
||||||| .r4854
EQBoolean =
=======
NOT =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ResourceList { SourceLocators, Resource* }
CEIL =
  notAllowed
  | element CEIL { SourceLocators, GeneralizedNumericExpression }
EQString =
  notAllowed
  | element EQString {
      SourceLocators,
      GeneralizedStringExpression,
      GeneralizedStringExpression
    }
ArrayExpression = ArrayValue | ArrayVariable
Succeeded =
  notAllowed
  | element Succeeded { node-reference }
AND =
  notAllowed
  | element AND { SourceLocators, GeneralizedBooleanExpression* }
Executing =
  notAllowed
  | element Executing { node-reference }
GE =
||||||| .r4854
  | element EQBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
GE =
=======
  | element NOT { SourceLocators, GeneralizedBooleanExpression }
GT =
>>>>>>> .r4867
  notAllowed
  | element GT {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
<<<<<<< .mine
MOD =
||||||| .r4854
NEString =
=======
NEInternal =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element MOD {
||||||| .r4854
  | element NEString {
=======
  | element NEInternal {
>>>>>>> .r4867
      SourceLocators,
<<<<<<< .mine
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
||||||| .r4854
      GeneralizedStringExpression,
      GeneralizedStringExpression
=======
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
>>>>>>> .r4867
    }
DeclaredVariable =
  IntegerVariable
  | RealVariable
  | BooleanVariable
  | StringVariable
  | DateVariable
  | DurationVariable
  | ArrayVariable
  | ArrayElement
NodeOutcomeVariable =
  notAllowed
  | element NodeOutcomeVariable { node-reference }
NodeState = NodeStateVariable | NodeStateValue
EQInternal =
  notAllowed
  | element EQInternal {
      SourceLocators,
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
    }
<<<<<<< .mine
MIN =
||||||| .r4854
NodeId =
=======
Resource =
  notAllowed
  | element Resource {
      SourceLocators,
      (element ResourceName { GeneralizedStringExpression }
       & element ResourcePriority { GeneralizedNumericExpression }
       & element ResourceLowerBound { GeneralizedNumericExpression }?
       & element ResourceUpperBound { GeneralizedNumericExpression }?
       & element ResourceReleaseAtTermination {
           GeneralizedBooleanExpression
         }?)
    }
NodeId =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element MIN {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
IterationEnded =
||||||| .r4854
  | element NodeId { NCName }
NodeTimepointValue =
=======
  | element NodeId { NCName }
Timepoint =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element IterationEnded { node-reference }
InvariantFailed =
||||||| .r4854
  | element NodeTimepointValue {
      SourceLocators, NodeReference, NodeStateValue, Timepoint
    }
InvariantFailed =
=======
  | element Timepoint { xsd:NMTOKEN "START" | xsd:NMTOKEN "END" }
Skipped =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element InvariantFailed { node-reference }
Interface =
||||||| .r4854
  | element InvariantFailed { node-reference }
Waiting =
=======
  | element Skipped { node-reference }
Executing =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Interface { SourceLocators, (In? & InOut?) }
OnMessage =
||||||| .r4854
  | element Waiting { node-reference }
BooleanVariable =
=======
  | element Executing { node-reference }
RealVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element OnMessage {
      SourceLocators,
      NodeClauses+,
      element Message { GeneralizedStringExpression },
      Action?
    }
Command =
||||||| .r4854
  | element BooleanVariable { NCName }
DateVariable =
=======
  | element RealVariable { NCName }
IterationSucceeded =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Command {
      SourceLocators, ResourceList?, DeclaredVariable?, Name, Arguments?
    }
StringValue =
||||||| .r4854
  | element DateVariable { NCName }
Failed =
=======
  | element IterationSucceeded { node-reference }
\string = xsd:string
GeneralizedNumericExpression =
  NumericExpression | LookupGroup | ArrayElement
SUB =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element StringValue { xsd:string }
REAL_TO_INT =
  notAllowed
  | element REAL_TO_INT { SourceLocators, GeneralizedNumericExpression }
Pair =
  notAllowed
  | element Pair {
      element Name { NCName },
      Expression
    }
Wait =
  notAllowed
  | element Wait {
||||||| .r4854
  | element Failed { node-reference }
Finished =
  notAllowed
  | element Finished { node-reference }
MUL =
  notAllowed
  | element MUL {
=======
  | element SUB {
>>>>>>> .r4867
      SourceLocators,
      NodeClauses+,
      element Units { GeneralizedNumericExpression },
      Tolerance?
    }
CommandDeclaration =
  notAllowed
  | element CommandDeclaration {
      SourceLocators,
      element Name { NCName },
      Return*,
      ParameterSpec?,
      ResourceList?
    }
<<<<<<< .mine
LT =
  notAllowed
  | element LT {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
Finished =
  notAllowed
  | element Finished { node-reference }
PostCondition =
||||||| .r4854
PostCondition =
=======
SynchronousCommand =
>>>>>>> .r4867
  notAllowed
  | element SynchronousCommand {
      SourceLocators,
      NodeClauses+,
      element Timeout { GeneralizedNumericExpression }?,
      Tolerance?,
      Command
    }
PreCondition =
  notAllowed
  | element PreCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
<<<<<<< .mine
NodeFailureValue =
||||||| .r4854
NodeStateVariable =
=======
DurationValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeFailureValue {
      xsd:NMTOKEN "PRE_CONDITION_FAILED"
      | xsd:NMTOKEN "EXITED"
      | xsd:NMTOKEN "INVARIANT_CONDITION_FAILED"
      | xsd:NMTOKEN "PARENT_FAILED"
      | xsd:NMTOKEN "PARENT_EXITED"
      | xsd:NMTOKEN "POST_CONDITION_FAILED"
||||||| .r4854
  | element NodeStateVariable { node-reference }
Return =
  notAllowed
  | element Return {
      element Name { NCName }?,
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?
=======
  | element DurationValue { xsd:string }
Return =
  notAllowed
  | element Return {
      element Name { NCName }?,
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?
>>>>>>> .r4867
    }
<<<<<<< .mine
SourceLocators =
  attribute ColNo { xsd:integer }?,
  attribute LineNo { xsd:integer }?,
  attribute FileName { xsd:string }?
UncheckedSequence =
||||||| .r4854
ArraySize =
=======
MOD =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element UncheckedSequence { SourceLocators, SequenceType }
TRUNC =
  notAllowed
  | element TRUNC { SourceLocators, GeneralizedNumericExpression }
NodeFailure = NodeFailureVariable | NodeFailureValue
RealValue =
  notAllowed
  | element RealValue { xsd:double }
IterationFailed =
  notAllowed
  | element IterationFailed { node-reference }
||||||| .r4854
  | element ArraySize { SourceLocators, GeneralizedArrayExpression }
MAX =
  notAllowed
  | element MAX {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
=======
  | element MOD {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
>>>>>>> .r4867
ArrayVariable =
  notAllowed
<<<<<<< .mine
  | element ArrayElement {
      SourceLocators,
      (GeneralizedArrayExpression
       | element Name { NCName }),
      element Index { GeneralizedNumericExpression }
    }
Value =
  IntegerValue
  | RealValue
  | BooleanValue
  | StringValue
  | DateValue
  | DurationValue
EQArray =
||||||| .r4854
  | element ArrayElement {
      SourceLocators,
      (GeneralizedArrayExpression
       | element Name { NCName }),
      element Index { GeneralizedNumericExpression }
    }
MessageReceived =
=======
  | element ArrayVariable { NCName }
ParentFailed =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element EQArray {
      SourceLocators,
      GeneralizedArrayExpression,
      GeneralizedArrayExpression
    }
Tolerance =
||||||| .r4854
  | element MessageReceived {
      SourceLocators, GeneralizedStringExpression
    }
AND =
=======
  | element ParentFailed { node-reference }
EQString =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Tolerance { GeneralizedNumericExpression }
NodeOutcome = NodeOutcomeVariable | NodeOutcomeValue
Arguments =
  notAllowed
  | element Arguments { SourceLocators, Expression+ }
Return =
||||||| .r4854
  | element AND { SourceLocators, GeneralizedBooleanExpression* }
NEBoolean =
  notAllowed
  | element NEBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
SkipCondition =
=======
  | element EQString {
      SourceLocators,
      GeneralizedStringExpression,
      GeneralizedStringExpression
    }
XOR =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Return {
      element Name { NCName }?,
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?
||||||| .r4854
  | element SkipCondition {
      SourceLocators, GeneralizedBooleanExpression
=======
  | element XOR { SourceLocators, GeneralizedBooleanExpression* }
ExitCondition =
  notAllowed
  | element ExitCondition {
      SourceLocators, GeneralizedBooleanExpression
>>>>>>> .r4867
    }
<<<<<<< .mine
Expression =
  BooleanExpression
  | NumericExpression
  | StringExpression
  | ArrayExpression
  | LookupGroup
  | ArrayElement
NEBoolean =
||||||| .r4854
Expression =
  BooleanExpression
  | NumericExpression
  | StringExpression
  | ArrayExpression
  | LookupGroup
  | ArrayElement
NodeOutcome = NodeOutcomeVariable | NodeOutcomeValue
ParameterSpec =
  Parameter*,
  (notAllowed
   | element AnyParameters {
       mixed {
         (attribute * { text }
          | element0)*
       }
     })?
ABS =
=======
StringExpression = StringVariable | StringValue | Concat
ParameterSpec =
  Parameter*,
  (notAllowed
   | element AnyParameters {
       mixed {
         (attribute * { text }
          | element0)*
       }
     })?
SQRT =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NEBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
Resource =
||||||| .r4854
  | element ABS { SourceLocators, GeneralizedNumericExpression }
StringValue =
=======
  | element SQRT { SourceLocators, GeneralizedNumericExpression }
BooleanValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Resource {
      SourceLocators,
      (element ResourceName { GeneralizedStringExpression }
       & element ResourcePriority { GeneralizedNumericExpression }
       & element ResourceLowerBound { GeneralizedNumericExpression }?
       & element ResourceUpperBound { GeneralizedNumericExpression }?
       & element ResourceReleaseAtTermination {
           GeneralizedBooleanExpression
         }?)
    }
InvariantCondition =
  notAllowed
  | element InvariantCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
Parameter =
  notAllowed
  | element Parameter {
      element Name { NCName }?,
      element Type {
        xsd:NMTOKEN "Integer"
        | xsd:NMTOKEN "Real"
        | xsd:NMTOKEN "Duration"
        | xsd:NMTOKEN "String"
        | xsd:NMTOKEN "Boolean"
        | xsd:NMTOKEN "Any"
        | xsd:NMTOKEN "Date"
      },
      element MaxSize { nonNegativeInteger }?
    }
ArrayRHS =
||||||| .r4854
  | element StringValue { xsd:string }
ArrayRHS =
=======
  | element BooleanValue { xsd:boolean }
Concat =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ArrayRHS { SourceLocators, GeneralizedArrayExpression }
Concat =
||||||| .r4854
  | element ArrayRHS { SourceLocators, GeneralizedArrayExpression }
NodeBody =
=======
  | element Concat { SourceLocators, GeneralizedStringExpression* }
UsingMutex =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Concat { SourceLocators, GeneralizedStringExpression* }
While =
  notAllowed
  | element While {
      SourceLocators,
      NodeClauses+,
      element Condition { GeneralizedBooleanExpression },
      element Action { Action }
||||||| .r4854
  | element NodeBody {
      NodeList | Command | Assignment | Update | LibraryNodeCall
=======
  | element UsingMutex {
      SourceLocators,
      element Name {
        SourceLocators,
        element StringValue { NCName }
      }+
>>>>>>> .r4867
    }
<<<<<<< .mine
Try =
||||||| .r4854
DurationVariable =
=======
LookupNow =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Try { SourceLocators, SequenceType }
NodeStateVariable =
||||||| .r4854
  | element DurationVariable { NCName }
Arguments =
=======
  | element LookupNow { SourceLocators, Name, Arguments? }
DateVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeStateVariable { node-reference }
StartCondition =
||||||| .r4854
  | element Arguments { SourceLocators, Expression+ }
StartCondition =
=======
  | element DateVariable { NCName }
Name =
>>>>>>> .r4867
  notAllowed
  | element Name { SourceLocators, GeneralizedStringExpression }
Lookup =
  notAllowed
  | element Lookup { SourceLocators, Name, Tolerance?, Arguments? }
<<<<<<< .mine
MUL =
||||||| .r4854
Action =
  Node
  | Sequence
  | Concurrence
  | UncheckedSequence
  | Try
  | If
  | While
  | For
  | OnCommand
  | OnMessage
  | Wait
  | SynchronousCommand
IterationEnded =
=======
Action =
  Node
  | Sequence
  | Concurrence
  | UncheckedSequence
  | Try
  | If
  | While
  | For
  | OnCommand
  | OnMessage
  | Wait
  | SynchronousCommand
Finished =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element MUL {
||||||| .r4854
  | element IterationEnded { node-reference }
If =
  notAllowed
  | element If {
=======
  | element Finished { node-reference }
Assignment =
  notAllowed
  | element Assignment {
>>>>>>> .r4867
      SourceLocators,
<<<<<<< .mine
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
||||||| .r4854
      NodeClauses+,
      element Condition { GeneralizedBooleanExpression },
      element Then { Action },
      element ElseIf {
        element Condition { GeneralizedBooleanExpression },
        element Then { Action }
      }*,
      element Else { Action }?
=======
      DeclaredVariable,
      (BooleanRHS | NumericRHS | StringRHS | ArrayRHS)
>>>>>>> .r4867
    }
<<<<<<< .mine
LibraryNodeDeclaration =
||||||| .r4854
Update =
=======
Try =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element LibraryNodeDeclaration {
      SourceLocators,
      element Name { NCName },
      Interface?
    }
StringRHS =
||||||| .r4854
  | element Update { SourceLocators, Pair* }
IsKnown =
  notAllowed
  | element IsKnown {
      SourceLocators,
      (Expression
       | NodeStateVariable
       | NodeOutcomeVariable
       | NodeCommandHandleVariable)
    }
TRUNC =
=======
  | element Try { SourceLocators, SequenceType }
StringValue =
  notAllowed
  | element StringValue { xsd:string }
NodeCommandHandleVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element StringRHS { SourceLocators, GeneralizedStringExpression }
NEInternal =
||||||| .r4854
  | element TRUNC { SourceLocators, GeneralizedNumericExpression }
DeclareArray =
=======
  | element NodeCommandHandleVariable { node-reference }
ROUND =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NEInternal {
||||||| .r4854
  | element DeclareArray {
=======
  | element ROUND { SourceLocators, GeneralizedNumericExpression }
DeclareVariable =
  notAllowed
  | element DeclareVariable {
>>>>>>> .r4867
      SourceLocators,
<<<<<<< .mine
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
||||||| .r4854
      element Name { NCName },
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?,
      element InitialValue { Value+ | ArrayValue }?
=======
      element Name { NCName },
      element Type { AtomicTypeValues },
      element InitialValue { Value }?
>>>>>>> .r4867
    }
<<<<<<< .mine
OnCommand =
||||||| .r4854
Value =
  IntegerValue
  | RealValue
  | BooleanValue
  | StringValue
  | DateValue
  | DurationValue
nonNegativeInteger = xsd:nonNegativeInteger
\string = xsd:string
IntegerValue =
=======
nonNegativeInteger = xsd:nonNegativeInteger
Tolerance =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element OnCommand { SourceLocators, NodeClauses+, Name, Action? }
ParameterSpec =
  Parameter*,
  (notAllowed
   | element AnyParameters {
       mixed {
         (attribute * { text }
          | element0)*
       }
     })?
NodeRef =
||||||| .r4854
  | element IntegerValue { xsd:integer }
ResourceList =
=======
  | element Tolerance { GeneralizedNumericExpression }
SkipCondition =
  notAllowed
  | element SkipCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
ResourceList =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeRef {
      attribute dir {
        xsd:NMTOKEN "parent"
        | xsd:NMTOKEN "sibling"
        | xsd:NMTOKEN "self"
        | xsd:NMTOKEN "child"
      }?,
      (xsd:NCName | xsd:string "")
||||||| .r4854
  | element ResourceList { SourceLocators, Resource* }
Inactive =
  notAllowed
  | element Inactive { node-reference }
Concurrence =
  notAllowed
  | element Concurrence { SourceLocators, SequenceType }
Alias =
  notAllowed
  | element Alias {
      SourceLocators,
      element NodeParameter { NCName },
      Expression
=======
  | element ResourceList { SourceLocators, Resource* }
BooleanRHS =
  notAllowed
  | element BooleanRHS { SourceLocators, GeneralizedBooleanExpression }
Waiting =
  notAllowed
  | element Waiting { node-reference }
Sequence =
  notAllowed
  | element Sequence { SourceLocators, SequenceType }
AtomicTypeValues =
  xsd:NMTOKEN "Integer"
  | xsd:NMTOKEN "Real"
  | xsd:NMTOKEN "Duration"
  | xsd:NMTOKEN "String"
  | xsd:NMTOKEN "Boolean"
  | xsd:NMTOKEN "Date"
MessageReceived =
  notAllowed
  | element MessageReceived {
      SourceLocators, GeneralizedStringExpression
>>>>>>> .r4867
    }
<<<<<<< .mine
NodeId =
||||||| .r4854
RepeatCondition =
=======
NodeBody =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeId { NCName }
Update =
||||||| .r4854
  | element RepeatCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
GeneralizedBooleanExpression =
  BooleanExpression | LookupGroup | ArrayElement
IterationSucceeded =
=======
  | element NodeBody {
      NodeList | Command | Assignment | Update | LibraryNodeCall
    }
NodeFailure = NodeFailureVariable | NodeFailureValue
NodeFailureValue =
  notAllowed
  | element NodeFailureValue {
      xsd:NMTOKEN "PRE_CONDITION_FAILED"
      | xsd:NMTOKEN "EXITED"
      | xsd:NMTOKEN "INVARIANT_CONDITION_FAILED"
      | xsd:NMTOKEN "PARENT_FAILED"
      | xsd:NMTOKEN "PARENT_EXITED"
      | xsd:NMTOKEN "POST_CONDITION_FAILED"
    }
StartCondition =
  notAllowed
  | element StartCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
Succeeded =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Update { SourceLocators, Pair* }
ArrayValue =
||||||| .r4854
  | element IterationSucceeded { node-reference }
While =
=======
  | element Succeeded { node-reference }
Expression =
  BooleanExpression
  | NumericExpression
  | StringExpression
  | ArrayExpression
  | LookupGroup
  | ArrayElement
If =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ArrayValue {
||||||| .r4854
  | element While {
=======
  | element If {
>>>>>>> .r4867
      SourceLocators,
<<<<<<< .mine
      attribute Type {
        xsd:NMTOKEN "Integer"
        | xsd:NMTOKEN "Real"
        | xsd:NMTOKEN "Duration"
        | xsd:NMTOKEN "String"
        | xsd:NMTOKEN "Boolean"
        | xsd:NMTOKEN "Date"
      },
      (IntegerValue+ | RealValue+ | BooleanValue+ | StringValue+)
||||||| .r4854
      NodeClauses+,
      element Condition { GeneralizedBooleanExpression },
      element Action { Action }
=======
      NodeClauses+,
      element Condition { GeneralizedBooleanExpression },
      element Then { Action },
      element ElseIf {
        element Condition { GeneralizedBooleanExpression },
        element Then { Action }
      }*,
      element Else { Action }?
>>>>>>> .r4867
    }
<<<<<<< .mine
||||||| .r4854
SourceLocators =
  attribute ColNo { xsd:integer }?,
  attribute LineNo { xsd:integer }?,
  attribute FileName { xsd:string }?
NodeFailure = NodeFailureVariable | NodeFailureValue
LibraryNodeCall =
  notAllowed
  | element LibraryNodeCall { SourceLocators, NodeId, Alias* }
element0 =
  element * {
    mixed {
      (attribute * { text }
       | element0)*
    }
  }
=======
SourceLocators =
  attribute ColNo { xsd:integer }?,
  attribute LineNo { xsd:integer }?,
  attribute FileName { xsd:string }?
Update =
  notAllowed
  | element Update { SourceLocators, Pair* }
DurationVariable =
  notAllowed
  | element DurationVariable { NCName }
element0 =
  element * {
    mixed {
      (attribute * { text }
       | element0)*
    }
  }
>>>>>>> .r4867
LT =
  notAllowed
  | element LT {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
<<<<<<< .mine
ADD =
||||||| .r4854
StringRHS =
=======
IntegerVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ADD {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
    }
NodeStateValue =
||||||| .r4854
  | element StringRHS { SourceLocators, GeneralizedStringExpression }
RealVariable =
=======
  | element IntegerVariable { NCName }
InOut =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeStateValue {
      xsd:NMTOKEN "EXECUTING"
      | xsd:NMTOKEN "FAILING"
      | xsd:NMTOKEN "ITERATION_ENDED"
      | xsd:NMTOKEN "INACTIVE"
      | xsd:NMTOKEN "WAITING"
      | xsd:NMTOKEN "FINISHING"
      | xsd:NMTOKEN "FINISHED"
    }
NENumeric =
||||||| .r4854
  | element RealVariable { NCName }
NENumeric =
=======
  | element InOut { SourceLocators, (DeclareVariable | DeclareArray)+ }
NEBoolean =
>>>>>>> .r4867
  notAllowed
  | element NEBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
<<<<<<< .mine
Failed =
||||||| .r4854
node-reference = (SourceLocators, NodeReference), empty
ParentFailed =
=======
node-reference = (SourceLocators, NodeReference), empty
PostconditionFailed =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Failed { node-reference }
NodeCommandHandleVariable =
||||||| .r4854
  | element ParentFailed { node-reference }
StringExpression = StringVariable | StringValue | Concat
BooleanValue =
=======
  | element PostconditionFailed { node-reference }
RealValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeCommandHandleVariable { node-reference }
SequenceType = NodeClauses+, Action*
For =
||||||| .r4854
  | element BooleanValue { xsd:boolean }
DeclaredVariable =
  IntegerVariable
  | RealVariable
  | BooleanVariable
  | StringVariable
  | DateVariable
  | DurationVariable
  | ArrayVariable
  | ArrayElement
ArrayMaxSize =
  notAllowed
  | element ArrayMaxSize { SourceLocators, GeneralizedArrayExpression }
NumericExpression =
  (ADD
   | SUB
   | MUL
   | DIV
   | MOD
   | MAX
   | MIN
   | SQRT
   | ABS
   | CEIL
   | FLOOR
   | ROUND
   | TRUNC
   | REAL_TO_INT
   | STRLEN)
  | IntegerVariable
  | RealVariable
  | IntegerValue
  | RealValue
  | DateVariable
  | DateValue
  | DurationVariable
  | DurationValue
  | NodeTimepointValue
  | ArraySize
  | ArrayMaxSize
For =
=======
  | element RealValue { xsd:double }
NodeOutcome = NodeOutcomeVariable | NodeOutcomeValue
ArrayElement =
  notAllowed
  | element ArrayElement {
      SourceLocators,
      (GeneralizedArrayExpression
       | element Name { NCName }),
      element Index { GeneralizedNumericExpression }
    }
ArraySize =
>>>>>>> .r4867
  notAllowed
  | element ArraySize { SourceLocators, GeneralizedArrayExpression }
While =
  notAllowed
  | element While {
      SourceLocators,
      NodeClauses+,
      element Condition { GeneralizedBooleanExpression },
      element Action { Action }
    }
<<<<<<< .mine
EQBoolean =
||||||| .r4854
NodeList =
=======
PreconditionFailed =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element EQBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
node-reference = (SourceLocators, NodeReference), empty
DeclareArray =
||||||| .r4854
  | element NodeList { Action* }
PostconditionFailed =
=======
  | element PreconditionFailed { node-reference }
Alias =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element DeclareArray {
      SourceLocators,
      element Name { NCName },
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?,
      element InitialValue { Value+ | ArrayValue }?
    }
XOR =
  notAllowed
  | element XOR { SourceLocators, GeneralizedBooleanExpression* }
SkipCondition =
||||||| .r4854
  | element PostconditionFailed { node-reference }
ANY_KNOWN =
  notAllowed
  | element ANY_KNOWN { SourceLocators, GeneralizedArrayExpression }
LibraryNodeDeclaration =
=======
  | element Alias {
      SourceLocators,
      element NodeParameter { NCName },
      Expression
    }
LibraryNodeDeclaration =
>>>>>>> .r4867
  notAllowed
  | element SkipCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
element0 =
  element * {
    mixed {
      (attribute * { text }
       | element0)*
    }
  }
AtomicTypeValues =
  xsd:NMTOKEN "Integer"
  | xsd:NMTOKEN "Real"
  | xsd:NMTOKEN "Duration"
  | xsd:NMTOKEN "String"
  | xsd:NMTOKEN "Boolean"
  | xsd:NMTOKEN "Date"
GlobalDeclarations =
  notAllowed
  | element GlobalDeclarations {
      SourceLocators,
      (CommandDeclaration
       | empty
       | StateDeclaration
       | LibraryNodeDeclaration
       | element TimeScalingUnitsSubunits { xsd:integer })+
    }
<<<<<<< .mine
RealVariable =
||||||| .r4854
UncheckedSequence =
=======
Concurrence =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element RealVariable { NCName }
InOut =
||||||| .r4854
  | element UncheckedSequence { SourceLocators, SequenceType }
NOT =
=======
  | element Concurrence { SourceLocators, SequenceType }
AND =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element InOut { SourceLocators, (DeclareVariable | DeclareArray)+ }
NumericRHS =
  notAllowed
  | element NumericRHS { SourceLocators, GeneralizedNumericExpression }
DIV =
||||||| .r4854
  | element NOT { SourceLocators, GeneralizedBooleanExpression }
DIV =
=======
  | element AND { SourceLocators, GeneralizedBooleanExpression* }
StringRHS =
>>>>>>> .r4867
  notAllowed
  | element StringRHS { SourceLocators, GeneralizedStringExpression }
GeneralizedBooleanExpression =
  BooleanExpression | LookupGroup | ArrayElement
NCName = xsd:NCName
LE =
  notAllowed
  | element LE {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
<<<<<<< .mine
NEString =
||||||| .r4854
NodeFailureValue =
=======
MUL =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NEString {
      SourceLocators,
      GeneralizedStringExpression,
      GeneralizedStringExpression
||||||| .r4854
  | element NodeFailureValue {
      xsd:NMTOKEN "PRE_CONDITION_FAILED"
      | xsd:NMTOKEN "EXITED"
      | xsd:NMTOKEN "INVARIANT_CONDITION_FAILED"
      | xsd:NMTOKEN "PARENT_FAILED"
      | xsd:NMTOKEN "PARENT_EXITED"
      | xsd:NMTOKEN "POST_CONDITION_FAILED"
=======
  | element MUL {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
>>>>>>> .r4867
    }
<<<<<<< .mine
IntegerVariable =
||||||| .r4854
IterationFailed =
=======
NodeFailureVariable =
  notAllowed
  | element NodeFailureVariable { node-reference }
Interrupted =
  notAllowed
  | element Interrupted { node-reference }
IterationFailed =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element IntegerVariable { NCName }
BooleanValue =
||||||| .r4854
  | element IterationFailed { node-reference }
Skipped =
=======
  | element IterationFailed { node-reference }
InvariantFailed =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element BooleanValue { xsd:boolean }
ABS =
||||||| .r4854
  | element Skipped { node-reference }
PreconditionFailed =
=======
  | element InvariantFailed { node-reference }
BooleanVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ABS { SourceLocators, GeneralizedNumericExpression }
DurationVariable =
||||||| .r4854
  | element PreconditionFailed { node-reference }
StringVariable =
=======
  | element BooleanVariable { NCName }
NodeCommandHandle = NodeCommandHandleVariable | NodeCommandHandleValue
IsKnown =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element DurationVariable { NCName }
VariableDeclarations =
  notAllowed
  | element VariableDeclarations { (DeclareVariable | DeclareArray)+ }
LookupNow =
||||||| .r4854
  | element StringVariable { NCName }
DeclareVariable =
  notAllowed
  | element DeclareVariable {
      SourceLocators,
      element Name { NCName },
      element Type { AtomicTypeValues },
      element InitialValue { Value }?
    }
ArrayExpression = ArrayValue | ArrayVariable
LT =
=======
  | element IsKnown {
      SourceLocators,
      (Expression
       | NodeStateVariable
       | NodeOutcomeVariable
       | NodeCommandHandleVariable)
    }
ArrayRHS =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element LookupNow { SourceLocators, Name, Arguments? }
ALL_KNOWN =
  notAllowed
  | element ALL_KNOWN { SourceLocators, GeneralizedArrayExpression }
STRLEN =
  notAllowed
  | element STRLEN { SourceLocators, GeneralizedStringExpression }
IsKnown =
  notAllowed
  | element IsKnown {
      SourceLocators,
      (Expression
       | NodeStateVariable
       | NodeOutcomeVariable
       | NodeCommandHandleVariable)
    }
EndCondition =
  notAllowed
  | element EndCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
ROUND =
  notAllowed
  | element ROUND { SourceLocators, GeneralizedNumericExpression }
If =
  notAllowed
  | element If {
||||||| .r4854
  | element LT {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
Concat =
  notAllowed
  | element Concat { SourceLocators, GeneralizedStringExpression* }
Sequence =
  notAllowed
  | element Sequence { SourceLocators, SequenceType }
Interrupted =
  notAllowed
  | element Interrupted { node-reference }
ArrayVariable =
  notAllowed
  | element ArrayVariable { NCName }
STRLEN =
  notAllowed
  | element STRLEN { SourceLocators, GeneralizedStringExpression }
Name =
  notAllowed
  | element Name { SourceLocators, GeneralizedStringExpression }
BooleanExpression =
  (OR | XOR | AND | NOT)
  | (EQBoolean
     | EQNumeric
     | EQInternal
     | EQString
     | NEBoolean
     | NENumeric
     | NEInternal
     | NEString)
  | (GT | GE | LT | LE)
  | (IsKnown | ALL_KNOWN | ANY_KNOWN)
  | BooleanVariable
  | BooleanValue
  | Finished
  | IterationEnded
  | Executing
  | Waiting
  | Inactive
  | Succeeded
  | IterationSucceeded
  | Failed
  | Interrupted
  | IterationFailed
  | Skipped
  | InvariantFailed
  | PreconditionFailed
  | PostconditionFailed
  | ParentFailed
  | MessageReceived
Resource =
  notAllowed
  | element Resource {
=======
  | element ArrayRHS { SourceLocators, GeneralizedArrayExpression }
BooleanExpression =
  (OR | XOR | AND | NOT)
  | (EQBoolean
     | EQNumeric
     | EQInternal
     | EQString
     | NEBoolean
     | NENumeric
     | NEInternal
     | NEString)
  | (GT | GE | LT | LE)
  | (IsKnown | ALL_KNOWN | ANY_KNOWN)
  | BooleanVariable
  | BooleanValue
  | Finished
  | IterationEnded
  | Executing
  | Waiting
  | Inactive
  | Succeeded
  | IterationSucceeded
  | Failed
  | Interrupted
  | IterationFailed
  | Skipped
  | InvariantFailed
  | PreconditionFailed
  | PostconditionFailed
  | ParentFailed
  | MessageReceived
GE =
  notAllowed
  | element GE {
>>>>>>> .r4867
      SourceLocators,
<<<<<<< .mine
      NodeClauses+,
      element Condition { GeneralizedBooleanExpression },
      element Then { Action },
      element ElseIf {
        element Condition { GeneralizedBooleanExpression },
        element Then { Action }
      }*,
      element Else { Action }?
||||||| .r4854
      (element ResourceName { GeneralizedStringExpression }
       & element ResourcePriority { GeneralizedNumericExpression }
       & element ResourceLowerBound { GeneralizedNumericExpression }?
       & element ResourceUpperBound { GeneralizedNumericExpression }?
       & element ResourceReleaseAtTermination {
           GeneralizedBooleanExpression
         }?)
=======
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
>>>>>>> .r4867
    }
<<<<<<< .mine
EQNumeric =
||||||| .r4854
NCName = xsd:NCName
ArrayValue =
=======
Failed =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element EQNumeric {
||||||| .r4854
  | element ArrayValue {
=======
  | element Failed { node-reference }
REAL_TO_INT =
  notAllowed
  | element REAL_TO_INT { SourceLocators, GeneralizedNumericExpression }
StringVariable =
  notAllowed
  | element StringVariable { NCName }
Arguments =
  notAllowed
  | element Arguments { SourceLocators, Expression+ }
LookupGroup = LookupOnChange | LookupNow | Lookup
NodeList =
  notAllowed
  | element NodeList { Action* }
NodeTimepointValue =
  notAllowed
  | element NodeTimepointValue {
      SourceLocators, NodeReference, NodeStateValue, Timepoint
    }
MIN =
  notAllowed
  | element MIN {
>>>>>>> .r4867
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
<<<<<<< .mine
LibraryNodeCall =
||||||| .r4854
Command =
=======
For =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element LibraryNodeCall { SourceLocators, NodeId, Alias* }
StringVariable =
  notAllowed
  | element StringVariable { NCName }
||||||| .r4854
  | element Command {
      SourceLocators, ResourceList?, DeclaredVariable?, Name, Arguments?
    }
=======
  | element For {
      SourceLocators,
      NodeClauses+,
      element LoopVariable { DeclareVariable },
      element Condition { GeneralizedBooleanExpression },
      element LoopVariableUpdate { GeneralizedNumericExpression },
      element Action { Action }
    }
>>>>>>> .r4867
NodeCommandHandleValue =
  notAllowed
<<<<<<< .mine
  | element BooleanRHS { SourceLocators, GeneralizedBooleanExpression }
StateDeclaration =
||||||| .r4854
  | element BooleanRHS { SourceLocators, GeneralizedBooleanExpression }
SQRT =
=======
  | element NodeCommandHandleValue {
      xsd:NMTOKEN "COMMAND_DENIED"
      | xsd:NMTOKEN "COMMAND_ABORTED"
      | xsd:NMTOKEN "COMMAND_ABORT_FAILED"
      | xsd:NMTOKEN "COMMAND_SUCCESS"
      | xsd:NMTOKEN "COMMAND_RCVD_BY_SYSTEM"
      | xsd:NMTOKEN "COMMAND_SENT_TO_SYSTEM"
      | xsd:NMTOKEN "COMMAND_ACCEPTED"
      | xsd:NMTOKEN "COMMAND_FAILED"
    }
In =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element StateDeclaration {
      SourceLocators,
      element Name { NCName },
      Return,
      ParameterSpec?
    }
Interrupted =
||||||| .r4854
  | element SQRT { SourceLocators, GeneralizedNumericExpression }
OnCommand =
=======
  | element In { SourceLocators, (DeclareVariable | DeclareArray)+ }
NodeOutcomeValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Interrupted { node-reference }
LookupGroup = LookupOnChange | LookupNow | Lookup
||||||| .r4854
  | element OnCommand { SourceLocators, NodeClauses+, Name, Action? }
NodeStateValue =
  notAllowed
  | element NodeStateValue {
      xsd:NMTOKEN "EXECUTING"
      | xsd:NMTOKEN "FAILING"
      | xsd:NMTOKEN "ITERATION_ENDED"
      | xsd:NMTOKEN "INACTIVE"
      | xsd:NMTOKEN "WAITING"
      | xsd:NMTOKEN "FINISHING"
      | xsd:NMTOKEN "FINISHED"
    }
=======
  | element NodeOutcomeValue {
      xsd:NMTOKEN "SUCCESS"
      | xsd:NMTOKEN "SKIPPED"
      | xsd:NMTOKEN "FAILURE"
      | xsd:NMTOKEN "INTERRUPTED"
    }
>>>>>>> .r4867
LibraryNodeCall =
  notAllowed
<<<<<<< .mine
  | element OR { SourceLocators, GeneralizedBooleanExpression* }
RepeatCondition =
||||||| .r4854
  | element OR { SourceLocators, GeneralizedBooleanExpression* }
InOut =
=======
  | element LibraryNodeCall { SourceLocators, NodeId, Alias* }
OnMessage =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element RepeatCondition {
      SourceLocators, GeneralizedBooleanExpression
||||||| .r4854
  | element InOut { SourceLocators, (DeclareVariable | DeclareArray)+ }
Wait =
  notAllowed
  | element Wait {
      SourceLocators,
      NodeClauses+,
      element Units { GeneralizedNumericExpression },
      Tolerance?
=======
  | element OnMessage {
      SourceLocators,
      NodeClauses+,
      element Message { GeneralizedStringExpression },
      Action?
>>>>>>> .r4867
    }
<<<<<<< .mine
ArrayMaxSize =
||||||| .r4854
Tolerance =
=======
NodeOutcomeVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ArrayMaxSize { SourceLocators, GeneralizedArrayExpression }
Name =
  notAllowed
  | element Name { SourceLocators, GeneralizedStringExpression }
Action =
  Node
  | Sequence
  | Concurrence
  | UncheckedSequence
  | Try
  | If
  | While
  | For
  | OnCommand
  | OnMessage
  | Wait
  | SynchronousCommand
Alias =
||||||| .r4854
  | element Tolerance { GeneralizedNumericExpression }
NodeCommandHandleVariable =
  notAllowed
  | element NodeCommandHandleVariable { node-reference }
StateDeclaration =
=======
  | element NodeOutcomeVariable { node-reference }
StateDeclaration =
>>>>>>> .r4867
  notAllowed
  | element Alias {
      SourceLocators,
      element NodeParameter { NCName },
      Expression
    }
<<<<<<< .mine
GeneralizedStringExpression =
  StringExpression | LookupGroup | ArrayElement
DeclareVariable =
||||||| .r4854
EQString =
=======
SequenceType = NodeClauses+, Action*
ANY_KNOWN =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element DeclareVariable {
      SourceLocators,
      element Name { NCName },
      element Type { AtomicTypeValues },
      element InitialValue { Value }?
    }
NodeFailureVariable =
||||||| .r4854
  | element EQString {
      SourceLocators,
      GeneralizedStringExpression,
      GeneralizedStringExpression
    }
SynchronousCommand =
=======
  | element ANY_KNOWN { SourceLocators, GeneralizedArrayExpression }
Wait =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeFailureVariable { node-reference }
NEArray =
  notAllowed
  | element NEArray {
||||||| .r4854
  | element SynchronousCommand {
=======
  | element Wait {
>>>>>>> .r4867
      SourceLocators,
<<<<<<< .mine
      GeneralizedArrayExpression,
      GeneralizedArrayExpression
||||||| .r4854
      NodeClauses+,
      element Timeout { GeneralizedNumericExpression }?,
      Tolerance?,
      Command
=======
      NodeClauses+,
      element Units { GeneralizedNumericExpression },
      Tolerance?
>>>>>>> .r4867
    }
<<<<<<< .mine
ArraySize =
||||||| .r4854
LookupOnChange =
=======
EQInternal =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ArraySize { SourceLocators, GeneralizedArrayExpression }
PreCondition =
  notAllowed
  | element PreCondition {
      SourceLocators, GeneralizedBooleanExpression
||||||| .r4854
  | element LookupOnChange {
      SourceLocators, Name, Tolerance?, Arguments?
=======
  | element EQInternal {
      SourceLocators,
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
>>>>>>> .r4867
    }
NodeList =
  notAllowed
<<<<<<< .mine
  | element NodeList { Action* }
\string = xsd:string
||||||| .r4854
  | element NodeRef {
      attribute dir {
        xsd:NMTOKEN "parent"
        | xsd:NMTOKEN "sibling"
        | xsd:NMTOKEN "self"
        | xsd:NMTOKEN "child"
      }?,
      (xsd:NCName | xsd:string "")
    }
SUB =
  notAllowed
  | element SUB {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
    }
=======
  | element NodeRef {
      attribute dir {
        xsd:NMTOKEN "parent"
        | xsd:NMTOKEN "sibling"
        | xsd:NMTOKEN "self"
        | xsd:NMTOKEN "child"
      }?,
      (xsd:NCName | xsd:string "")
    }
ADD =
  notAllowed
  | element ADD {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
    }
>>>>>>> .r4867
PlexilPlanAttributes = 
  notAllowed
  | attribute xsi:* { xsd:anyURI }*
