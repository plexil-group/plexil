namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"
default namespace = ""

start =
  NodeBody
  | InvariantFailed
  | Succeeded
  | BooleanVariable
  | Waiting
  | Executing
  | OnCommand
  | NodeCommandHandleVariable
  | Concat
  | EQNumeric
  | StringValue
  | NodeFailureVariable
  | PreCondition
  | AND
  | ArrayValue
  | NumericRHS
  | ArrayElement
  | DeclareArray
  | RepeatCondition
  | LE
  | NEInternal
  | SkipCondition
  | NodeTimepointValue
  | Command
  | (notAllowed
     | element IterationSucceeded { node-reference })
  | LibraryNodeCall
  | EndCondition
  | StringRHS
  | Request
  | Timepoint
  | NEBoolean
  | MessageReceived
  | LookupNow
  | IterationEnded
  | NodeFailureValue
  | ArrayRHS
  | LT
  | (notAllowed
     | element IterationFailed { node-reference })
  | OnMessage
  | In
  | Name
  | Pair
  | GE
  | MUL
  | RealValue
  | NEString
  | XOR
  | DIV
  | (notAllowed
     | element PlexilPlan {
         SourceLocators, GlobalDeclarations?, Action
       })
  | IsKnown
  | ADD
  | Finished
  | DeclareVariable
  | Parameter
  | Concurrence
  | For
  | NodeCommandHandleValue
  | NodeOutcomeValue
  | StartCondition
  | InOut
  | If
  | InvariantCondition
  | EQInternal
  | StringVariable
  | GlobalDeclarations
  | Sequence
  | Node
  | MOD
  | ParentFailed
  | Update
  | RealVariable
  | Interface
  | OR
  | IntegerValue
  | VariableDeclarations
  | BooleanRHS
  | UncheckedSequence
  | Failed
  | PostconditionFailed
  | Assignment
  | Arguments
  | Try
  | PostCondition
  | Lookup
  | NodeRef
  | Alias
  | NENumeric
  | CommandDeclaration
  | Skipped
  | LookupRHS
  | ResourceList
  | LookupOnChange
  | PreconditionFailed
  | StateDeclaration
  | LibraryNodeDeclaration
  | GT
  | SQRT
  | NodeOutcomeVariable
  | IntegerVariable
  | ABS
  | EQBoolean
  | Tolerance
  | While
  | NodeStateVariable
  | EQString
  | Resource
  | NodeList
  | SUB
  | NOT
  | NodeStateValue
  | BooleanValue
  | Return
  | NodeId
  | Inactive
LT =
  notAllowed
  | element LT { SourceLocators, NumericExpression, NumericExpression }
For =
  notAllowed
  | element For {
      SourceLocators,
      NodeClauses+,
      element LoopVariable { DeclareVariable },
      element Condition { BooleanExpression },
      element LoopVariableUpdate { NumericExpression },
      element Action { Action }
    }
ParentFailed =
  notAllowed
  | element ParentFailed { node-reference }
NodeStateVariable =
  notAllowed
  | element NodeStateVariable { node-reference }
In =
  notAllowed
  | element In { SourceLocators, (DeclareVariable | DeclareArray)+ }
NodeCommandHandleVariable =
  notAllowed
  | element NodeCommandHandleVariable { SourceLocators, NodeId }
NodeCommandHandle = NodeCommandHandleVariable | NodeCommandHandleValue
SequenceType = NodeClauses+, Action*
NodeFailure = NodeFailureVariable | NodeFailureValue
BooleanValue =
  notAllowed
  | element BooleanValue { xsd:boolean }
NCNameOrEmpty = xsd:NCName | xsd:string ""
GT =
  notAllowed
  | element GT { SourceLocators, NumericExpression, NumericExpression }
Alias =
  notAllowed
  | element Alias {
      SourceLocators,
      element NodeParameter { NCName },
      (Value | DeclaredVariable)
    }
EQNumeric =
  notAllowed
  | element EQNumeric {
      SourceLocators, NumericExpression, NumericExpression
    }
SQRT =
  notAllowed
  | element SQRT { SourceLocators, NumericExpression }
Timepoint =
  notAllowed
  | element Timepoint { xsd:NMTOKEN "END" | xsd:NMTOKEN "START" }
Concurrence =
  notAllowed
  | element Concurrence { SourceLocators, SequenceType }
ArrayRHS =
  notAllowed
  | element ArrayRHS {
      SourceLocators,
      element ArrayVariable { NCName }
    }
element0 =
  element * {
    mixed {
      (attribute * { text }
       | element0)*
    }
  }
NEString =
  notAllowed
  | element NEString {
      SourceLocators, StringExpression, StringExpression
    }
GlobalDeclarations =
  notAllowed
  | element GlobalDeclarations {
      SourceLocators,
      (CommandDeclaration
       | empty
       | StateDeclaration
       | LibraryNodeDeclaration
       | element TimeScalingUnitsSubunits { xsd:integer })+
    }
NumericRHS =
  notAllowed
  | element NumericRHS { SourceLocators, NumericExpression }
NCName = xsd:NCName
StringExpression =
  StringVariable | StringValue | Concat | LookupGroup | ArrayElement
PreconditionFailed =
  notAllowed
  | element PreconditionFailed { node-reference }
InvariantCondition =
  notAllowed
  | element InvariantCondition { SourceLocators, BooleanExpression }
OnMessage =
  notAllowed
  | element OnMessage {
      SourceLocators,
      NodeClauses+,
      element Message { StringExpression },
      Action?
    }
Pair =
  notAllowed
  | element Pair {
      element Name { NCName },
      (Value | DeclaredVariable | LookupNow)
    }
UncheckedSequence =
  notAllowed
  | element UncheckedSequence { SourceLocators, SequenceType }
LookupOnChange =
  notAllowed
  | element LookupOnChange {
      SourceLocators, Name, Tolerance?, Arguments?
    }
VariableDeclarations =
  notAllowed
  | element VariableDeclarations { (DeclareVariable | DeclareArray)+ }
EndCondition =
  notAllowed
  | element EndCondition { SourceLocators, BooleanExpression }
SUB =
  notAllowed
  | element SUB { SourceLocators, NumericExpression, NumericExpression }
NodeId =
  notAllowed
  | element NodeId { NCName }
Lookup =
  notAllowed
  | element Lookup { SourceLocators, Name, Tolerance?, Arguments? }
DeclareArray =
  notAllowed
  | element DeclareArray {
      SourceLocators,
      element Name { NCName },
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger },
      element InitialValue {
        IntegerValue+ | RealValue+ | BooleanValue+ | StringValue+
      }?
    }
Name =
  notAllowed
  | element Name { SourceLocators, StringExpression }
DIV =
  notAllowed
  | element DIV { SourceLocators, NumericExpression, NumericExpression }
Assignment =
  notAllowed
  | element Assignment {
      SourceLocators,
      DeclaredVariable,
      (BooleanRHS | NumericRHS | StringRHS | LookupRHS | ArrayRHS)
    }
EQInternal =
  notAllowed
  | element EQInternal {
      SourceLocators,
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
    }
AND =
  notAllowed
  | element AND { SourceLocators, BooleanExpression* }
PostCondition =
  notAllowed
  | element PostCondition { SourceLocators, BooleanExpression }
EQBoolean =
  notAllowed
  | element EQBoolean {
      SourceLocators, BooleanExpression, BooleanExpression
    }
NodeOutcomeVariable =
  notAllowed
  | element NodeOutcomeVariable { node-reference }
NENumeric =
  notAllowed
  | element NENumeric {
      SourceLocators, NumericExpression, NumericExpression
    }
StringValue =
  notAllowed
  | element StringValue { xsd:string }
NumericExpression =
  ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | SQRT
  | ABS
  | IntegerVariable
  | RealVariable
  | IntegerValue
  | RealValue
  | LookupGroup
  | NodeTimepointValue
  | (notAllowed
     | element ArraySize { NCName })
  | (notAllowed
     | element ArrayMaxSize { NCName })
  | ArrayElement
OnCommand =
  notAllowed
  | element OnCommand { SourceLocators, NodeClauses+, Name, Action? }
ADD =
  notAllowed
  | element ADD {
      SourceLocators,
      NumericExpression,
      NumericExpression,
      NumericExpression*
    }
StateDeclaration =
  notAllowed
  | element StateDeclaration {
      SourceLocators,
      element Name { NCName },
      Return,
      Parameter*
    }
NodeCommandHandleValue =
  notAllowed
  | element NodeCommandHandleValue {
      xsd:NMTOKEN "COMMAND_ACCEPTED"
      | xsd:NMTOKEN "COMMAND_SUCCESS"
      | xsd:NMTOKEN "COMMAND_RCVD_BY_SYSTEM"
      | xsd:NMTOKEN "COMMAND_SENT_TO_SYSTEM"
      | xsd:NMTOKEN "COMMAND_ABORTED"
      | xsd:NMTOKEN "COMMAND_FAILED"
      | xsd:NMTOKEN "COMMAND_DENIED"
      | xsd:NMTOKEN "COMMAND_ABORT_FAILED"
    }
Action =
  Node
  | Sequence
  | Concurrence
  | UncheckedSequence
  | Try
  | If
  | While
  | For
  | OnCommand
  | OnMessage
ResourceList =
  notAllowed
  | element ResourceList { SourceLocators, Resource* }
InOut =
  notAllowed
  | element InOut { SourceLocators, (DeclareVariable | DeclareArray)+ }
LookupRHS =
  notAllowed
  | element LookupRHS { SourceLocators, LookupGroup }
Succeeded =
  notAllowed
  | element Succeeded { node-reference }
Waiting =
  notAllowed
  | element Waiting { node-reference }
Finished =
  notAllowed
  | element Finished { node-reference }
LookupNow =
  notAllowed
  | element LookupNow { SourceLocators, Name, Arguments? }
MOD =
  notAllowed
  | element MOD { SourceLocators, NumericExpression, NumericExpression }
NodeStateValue =
  notAllowed
  | element NodeStateValue {
      xsd:NMTOKEN "INACTIVE"
      | xsd:NMTOKEN "WAITING"
      | xsd:NMTOKEN "FINISHED"
      | xsd:NMTOKEN "ITERATION_ENDED"
      | xsd:NMTOKEN "EXECUTING"
      | xsd:NMTOKEN "FAILING"
      | xsd:NMTOKEN "FINISHING"
    }
NodeRef =
  notAllowed
  | element NodeRef {
      attribute dir {
        xsd:NMTOKEN "child"
        | xsd:NMTOKEN "self"
        | xsd:NMTOKEN "sibling"
        | xsd:NMTOKEN "parent"
      }?,
      NCNameOrEmpty
    }
InvariantFailed =
  notAllowed
  | element InvariantFailed { node-reference }
node-reference = NodeReference, empty
RepeatCondition =
  notAllowed
  | element RepeatCondition { SourceLocators, BooleanExpression }
Request =
  notAllowed
  | element Request { SourceLocators, NodeId?, Pair* }
NEInternal =
  notAllowed
  | element NEInternal {
      SourceLocators,
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
    }
If =
  notAllowed
  | element If {
      SourceLocators,
      NodeClauses+,
      element Condition { BooleanExpression },
      element Then { Action },
      element Else { Action }?
    }
NodeReference = NodeId | NodeRef
NodeFailureVariable =
  notAllowed
  | element NodeFailureVariable { node-reference }
Sequence =
  notAllowed
  | element Sequence { SourceLocators, SequenceType }
Resource =
  notAllowed
  | element Resource {
      SourceLocators,
      (element ResourceName { StringExpression }
       & element ResourcePriority { NumericExpression }
       & element ResourceLowerBound { NumericExpression }?
       & element ResourceUpperBound { NumericExpression }?
       & element ResourceReleaseAtTermination { BooleanExpression }?)
    }
PreCondition =
  notAllowed
  | element PreCondition { SourceLocators, BooleanExpression }
ABS =
  notAllowed
  | element ABS { SourceLocators, NumericExpression }
Skipped =
  notAllowed
  | element Skipped { node-reference }
RealValue =
  notAllowed
  | element RealValue { xsd:double }
LE =
  notAllowed
  | element LE { SourceLocators, NumericExpression, NumericExpression }
XOR =
  notAllowed
  | element XOR { SourceLocators, BooleanExpression* }
IsKnown =
  notAllowed
  | element IsKnown {
      SourceLocators,
      (DeclaredVariable
       | LookupGroup
       | NodeStateVariable
       | NodeOutcomeVariable
       | NodeTimepointValue)
    }
Try =
  notAllowed
  | element Try { SourceLocators, SequenceType }
Inactive =
  notAllowed
  | element Inactive { node-reference }
Interface =
  notAllowed
  | element Interface { In? & InOut? }
Return =
  notAllowed
  | element Return {
      attribute Type {
        xsd:NMTOKEN "String"
        | xsd:NMTOKEN "Integer"
        | xsd:NMTOKEN "Array"
        | xsd:NMTOKEN "Boolean"
        | xsd:NMTOKEN "Real"
      },
      NCNameOrEmpty
    }
IterationEnded =
  notAllowed
  | element IterationEnded { node-reference }
StartCondition =
  notAllowed
  | element StartCondition { SourceLocators, BooleanExpression }
Parameter =
  notAllowed
  | element Parameter {
      attribute Type {
        xsd:NMTOKEN "String"
        | xsd:NMTOKEN "Integer"
        | xsd:NMTOKEN "Array"
        | xsd:NMTOKEN "Boolean"
        | xsd:NMTOKEN "Real"
      },
      NCNameOrEmpty
    }
While =
  notAllowed
  | element While {
      SourceLocators,
      NodeClauses+,
      element Condition { BooleanExpression },
      element Action { Action }
    }
ArrayElement =
  notAllowed
  | element ArrayElement {
      SourceLocators,
      element Name { NCName },
      element Index { NumericExpression }
    }
IntegerValue =
  notAllowed
  | element IntegerValue { xsd:integer }
PostconditionFailed =
  notAllowed
  | element PostconditionFailed { node-reference }
RealVariable =
  notAllowed
  | element RealVariable { NCName }
NodeFailureValue =
  notAllowed
  | element NodeFailureValue {
      xsd:NMTOKEN "INVARIANT_CONDITION_FAILED"
      | xsd:NMTOKEN "POST_CONDITION_FAILED"
      | xsd:NMTOKEN "PRE_CONDITION_FAILED"
      | xsd:NMTOKEN "PARENT_FAILED"
    }
NEBoolean =
  notAllowed
  | element NEBoolean {
      SourceLocators, BooleanExpression, BooleanExpression
    }
NodeOutcomeValue =
  notAllowed
  | element NodeOutcomeValue {
      xsd:NMTOKEN "SKIPPED"
      | xsd:NMTOKEN "SUCCESS"
      | xsd:NMTOKEN "FAILURE"
    }
nonNegativeInteger = xsd:nonNegativeInteger
DeclaredVariable =
  IntegerVariable
  | RealVariable
  | BooleanVariable
  | StringVariable
  | (notAllowed
     | element ArrayVariable { NCName })
  | ArrayElement
GE =
  notAllowed
  | element GE { SourceLocators, NumericExpression, NumericExpression }
BooleanRHS =
  notAllowed
  | element BooleanRHS { SourceLocators, BooleanExpression }
NodeOutcome = NodeOutcomeVariable | NodeOutcomeValue
Arguments =
  notAllowed
  | element Arguments {
      SourceLocators,
      (IntegerValue
       | RealValue
       | BooleanValue
       | ArrayValue
       | StringExpression
       | DeclaredVariable)+
    }
\string = xsd:string
NodeClauses =
  NodeId
  | empty
  | (notAllowed
     | element Comment { \string })
  | StartCondition
  | RepeatCondition
  | PreCondition
  | PostCondition
  | InvariantCondition
  | EndCondition
  | SkipCondition
  | (notAllowed
     | element Priority { nonNegativeInteger })
  | (notAllowed
     | element Permissions { \string })
  | Interface
  | VariableDeclarations
Value = IntegerValue | RealValue | BooleanValue | StringValue
OR =
  notAllowed
  | element OR { SourceLocators, BooleanExpression* }
NodeBody =
  notAllowed
  | element NodeBody {
      NodeList
      | Command
      | Assignment
      | Update
      | Request
      | LibraryNodeCall
    }
LookupGroup = LookupOnChange | LookupNow | Lookup
MessageReceived =
  notAllowed
  | element MessageReceived { SourceLocators, StringExpression }
StringVariable =
  notAllowed
  | element StringVariable { NCName }
NodeState = NodeStateVariable | NodeStateValue
Failed =
  notAllowed
  | element Failed { node-reference }
StringRHS =
  notAllowed
  | element StringRHS { SourceLocators, StringExpression }
Command =
  notAllowed
  | element Command {
      SourceLocators, ResourceList?, DeclaredVariable?, Name, Arguments?
    }
Node =
  notAllowed
  | element Node {
      SourceLocators,
      attribute epx {
        xsd:NMTOKEN "UncheckedSequence"
        | xsd:NMTOKEN "Then"
        | xsd:NMTOKEN "Else"
        | xsd:NMTOKEN "Sequence"
        | xsd:NMTOKEN "If"
        | xsd:NMTOKEN "While"
        | xsd:NMTOKEN "For"
        | xsd:NMTOKEN "Concurrence"
        | xsd:NMTOKEN "aux"
        | xsd:NMTOKEN "Try"
      }?,
      attribute NodeType {
        xsd:NMTOKEN "Assignment"
        | xsd:NMTOKEN "Command"
        | xsd:NMTOKEN "Update"
        | xsd:NMTOKEN "NodeList"
        | xsd:NMTOKEN "LibraryNodeCall"
        | xsd:NMTOKEN "Empty"
        | xsd:NMTOKEN "Request"
      },
      (element Comment { \string }?
       & NodeId
       & StartCondition?
       & RepeatCondition?
       & PreCondition?
       & PostCondition?
       & InvariantCondition?
       & EndCondition?
       & SkipCondition?
       & element Priority { nonNegativeInteger }?
       & element Permissions { \string }?
       & Interface?
       & VariableDeclarations?
       & NodeBody?)
    }
EQString =
  notAllowed
  | element EQString {
      SourceLocators, StringExpression, StringExpression
    }
LibraryNodeDeclaration =
  notAllowed
  | element LibraryNodeDeclaration {
      SourceLocators,
      element Name { NCName },
      element Interface {
        mixed {
          (attribute * { text }
           | element0)*
        }
      }
    }
BooleanVariable =
  notAllowed
  | element BooleanVariable { NCName }
MUL =
  notAllowed
  | element MUL {
      SourceLocators,
      NumericExpression,
      NumericExpression,
      NumericExpression*
    }
BooleanExpression =
  OR
  | XOR
  | AND
  | NOT
  | IsKnown
  | GT
  | GE
  | LT
  | LE
  | EQBoolean
  | EQNumeric
  | EQInternal
  | EQString
  | NEBoolean
  | NENumeric
  | NEInternal
  | NEString
  | BooleanVariable
  | BooleanValue
  | LookupGroup
  | ArrayElement
  | Finished
  | IterationEnded
  | Executing
  | Waiting
  | Inactive
  | Succeeded
  | Failed
  | Skipped
  | InvariantFailed
  | PreconditionFailed
  | PostconditionFailed
  | ParentFailed
  | MessageReceived
Tolerance =
  notAllowed
  | element Tolerance { RealValue | RealVariable }
Concat =
  notAllowed
  | element Concat { SourceLocators, StringExpression* }
DeclareVariable =
  notAllowed
  | element DeclareVariable {
      SourceLocators,
      element Name { NCName },
      element Type { AtomicTypeValues },
      element InitialValue { Value }?
    }
NodeList =
  notAllowed
  | element NodeList { Action* }
SourceLocators =
  attribute ColNo { xsd:integer }?,
  attribute LineNo { xsd:integer }?,
  attribute FileName { xsd:string }?
NOT =
  notAllowed
  | element NOT { SourceLocators, BooleanExpression }
NodeTimepointValue =
  notAllowed
  | element NodeTimepointValue {
      SourceLocators, NodeReference, NodeStateValue, Timepoint
    }
CommandDeclaration =
  notAllowed
  | element CommandDeclaration {
      SourceLocators,
      element Name { NCName },
      Return*,
      Parameter*,
      ResourceList?
    }
SkipCondition =
  notAllowed
  | element SkipCondition { SourceLocators, BooleanExpression }
AtomicTypeValues =
  xsd:NMTOKEN "String"
  | xsd:NMTOKEN "Integer"
  | xsd:NMTOKEN "Boolean"
  | xsd:NMTOKEN "Real"
LibraryNodeCall =
  notAllowed
  | element LibraryNodeCall {
      SourceLocators,
      NodeId,
      element RenameNodeId { NCName }?,
      Alias*
    }
Update =
  notAllowed
  | element Update { SourceLocators, Pair* }
Executing =
  notAllowed
  | element Executing { node-reference }
IntegerVariable =
  notAllowed
  | element IntegerVariable { NCName }
ArrayValue =
  notAllowed
  | element ArrayValue {
      SourceLocators,
      attribute Type {
        xsd:NMTOKEN "String"
        | xsd:NMTOKEN "Integer"
        | xsd:NMTOKEN "Boolean"
        | xsd:NMTOKEN "Real"
      },
      (IntegerValue+ | RealValue+ | BooleanValue+ | StringValue+)
    }
PlexilPlanAttributes = 
  notAllowed
  | attribute xsi:* { xsd:anyURI }*
