<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE schema PUBLIC "-//W3C//DTD XMLSCHEMA 200102//EN" "http://www.w3.org/2001/XMLSchema.dtd" >

<!--
* Copyright (c) 2006-2021, Universities Space Research Association (USRA).
*  All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Universities Space Research Association nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
* TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<!-- Schema for Core PLEXIL as implemented by the Plexil Executive. -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:xml="http://www.w3.org/XML/1998/namespace"
           xml:lang="en">

  <xs:include schemaLocation='plexil-base-v2.xsd' />

  <!-- Elements -->

  <xs:group name="ActionGroup">
    <xs:choice>
      <xs:group ref="BasicNodes"/>
    </xs:choice>
  </xs:group>

  <!-- NodeId is required in Core Plexil. -->
  <xs:complexType name="NodeBaseType">
    <xs:sequence>
      <xs:element name="Comment" type="xs:string" minOccurs="0"/>
      <xs:group ref="Conditions" minOccurs="0"/>
      <!-- Aliases for expressions external to this node -->
      <xs:group ref="Interface" minOccurs="0" maxOccurs="unbounded"/>
      <!-- Variable declarations -->
      <xs:group ref="VariableDeclaration" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="UsingMutex" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="NodeId" type="xs:NMTOKEN" use="required"/>
    <xs:attribute name="Priority" type="xs:nonNegativeInteger" use="optional"/>
    <xs:attributeGroup ref="SourceLocators"/>
  </xs:complexType>

  <xs:group name="BooleanExpression">
    <xs:choice>
	  <xs:group ref="LogicalOperator"/>
	  <xs:group ref="Equality"/>
	  <xs:group ref="NumericComparison"/>
      <xs:group ref="KnownTest"/>
      <xs:group ref="NodeStatePredicate"/>
      <xs:group ref="NodeOutcomePredicate"/>
      <xs:group ref="NodeFailurePredicate"/>
      <xs:element ref="BooleanVariable"/>
      <xs:element ref="BooleanValue"/>
    </xs:choice>
  </xs:group>

  <xs:group name="DeclaredVariable">
    <xs:choice>
      <xs:element ref="IntegerVariable"/>
      <xs:element ref="RealVariable"/>
      <xs:element ref="BooleanVariable"/>
      <xs:element ref="StringVariable"/>
      <xs:element ref="ArrayVariable"/>
      <xs:element ref="ArrayElement"/>
    </xs:choice>
  </xs:group>

  <xs:group name="LookupGroup">
    <xs:choice>
      <xs:element ref="LookupOnChange"/>
      <xs:element ref="LookupNow"/>
    </xs:choice>
  </xs:group>

  <xs:element name="Name">
    <xs:complexType>
      <xs:group ref="GeneralizedStringExpression"/>
      <xs:attributeGroup ref="SourceLocators"/>
    </xs:complexType>
  </xs:element>

  <xs:group name="NumericExpression">
    <xs:choice>
	  <xs:group ref="ArithmeticOperator"/>
      <xs:element ref="IntegerVariable"/>
      <xs:element ref="RealVariable"/>
      <xs:element ref="IntegerValue"/>
      <xs:element ref="RealValue"/>
      <xs:element ref="NodeTimepointValue"/>
      <!-- read operations for arrays-->
      <xs:element ref="ArraySize"/>
      <xs:element ref="ArrayMaxSize"/>
    </xs:choice>
  </xs:group>

  <!-- Note: ArrayValue is not included here because arrays
       are handled independently (and NOT supported in places
       where Value is) -->
  <xs:group name="Value">
    <xs:choice>
      <xs:element ref="IntegerValue"/>
      <xs:element ref="RealValue"/>
      <xs:element ref="BooleanValue"/>
      <xs:element ref="StringValue"/>
    </xs:choice>
  </xs:group>

  <!-- Schema types -->

  <xs:simpleType name="AtomicTypeValues">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Integer"/>
      <xs:enumeration value="Real"/>
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="String"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ParameterTypeValues">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Integer"/>
      <xs:enumeration value="Real"/>
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="String"/>
      <xs:enumeration value="Array"/>
      <xs:enumeration value="IntegerArray"/>
      <xs:enumeration value="RealArray"/>
      <xs:enumeration value="BooleanArray"/>
      <xs:enumeration value="StringArray"/>
      <xs:enumeration value="Any"/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
