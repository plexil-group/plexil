<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE schema PUBLIC "-//W3C//DTD XMLSCHEMA 200102//EN" "http://www.w3.org/2001/XMLSchema.dtd" >

<!--
* Copyright (c) 2006-2020, Universities Space Research Association (USRA).
*  All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Universities Space Research Association nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
* TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<!--
This schema extends Core PLEXIL with syntactic sugar: convenient forms 
that are translated into Core PLEXIL for execution (see translate.xsl).
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xml:lang="en">
  <xs:include schemaLocation='plexil-base-v2.xsd'/>

  <xs:redefine schemaLocation='plexil-base-v2.xsd'>
    <xs:group name="Action">
      <xs:choice>
        <xs:group ref="BasicNodes"/>
        <xs:element ref="Sequence"/>
        <xs:element ref="Concurrence"/>
        <xs:element ref="CheckedSequence"/>
        <xs:element ref="Try"/>
        <xs:element ref="If"/>
        <xs:element ref="While"/>
        <xs:element ref="For"/>
        <xs:element ref="OnCommand"/>
        <xs:element ref="OnMessage"/>
        <xs:element ref="Wait"/>
        <xs:element ref="SynchronousCommand"/>
      </xs:choice>
    </xs:group>

    <xs:group name="BooleanExpression">
      <xs:choice>
	    <xs:group ref="LogicalOperator"/>
	    <xs:group ref="Equality"/>
	    <xs:group ref="NumericComparison"/>
        <xs:group ref="KnownTest"/>
        <xs:element ref="BooleanVariable"/>
        <xs:element ref="Boolean"/>
        <xs:element ref="IterationSucceeded"/>
        <xs:element ref="Interrupted"/>
        <xs:element ref="IterationFailed"/>
        <xs:element ref="InvariantFailed"/>
        <xs:element ref="PreconditionFailed"/>
        <xs:element ref="ParentFailed"/>
        <xs:element ref="MessageReceived"/>
      </xs:choice>
    </xs:group>

    <xs:group name="DeclaredVariable">
      <xs:choice>
        <xs:element ref="IntegerVariable"/>
        <xs:element ref="RealVariable"/>
        <xs:element ref="BooleanVariable"/>
        <xs:element ref="StringVariable"/>
        <xs:element ref="DateVariable"/>
        <xs:element ref="DurationVariable"/>
        <xs:element ref="ArrayVariable"/>
        <xs:element ref="ArrayElement"/>
      </xs:choice>
    </xs:group>

    <xs:group name="NumericExpression">
      <xs:choice>
        <xs:group ref="ArithmeticOperator"/>
        <xs:element ref="IntegerVariable"/>
        <xs:element ref="RealVariable"/>
        <xs:element ref="Integer"/>
        <xs:element ref="Real"/>
        <xs:element ref="DateVariable"/>
        <xs:element ref="Date"/>
        <xs:element ref="DurationVariable"/>
        <xs:element ref="Duration"/>
        <xs:element ref="NodeTimepoint"/>
        <!-- read operations for arrays-->
        <xs:element ref="ArraySize"/>
        <xs:element ref="ArrayMaxSize"/>
      </xs:choice>
    </xs:group>
  </xs:redefine>

  <xs:element name="Name">
    <xs:complexType>
      <xs:group ref="GeneralizedStringExpression"/>
      <xs:attributeGroup ref="SourceLocators"/>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name="AtomicTypeValues">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Integer"/>
      <xs:enumeration value="Real"/>
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="String"/>
      <xs:enumeration value="Date"/>
      <xs:enumeration value="Duration"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ParameterTypeValues">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Integer"/>
      <xs:enumeration value="Real"/>
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="String"/>
      <xs:enumeration value="Date"/>
      <xs:enumeration value="Duration"/>
      <xs:enumeration value="Any"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:element name="DurationVariable" type="variable-reference"/>
  <xs:element name="DateVariable" type="variable-reference"/>
  
  <xs:element name="Date">
    <xs:simpleType>
      <xs:restriction base="xs:string">
      </xs:restriction>
    </xs:simpleType>
  </xs:element>

  <xs:element name="Duration">
    <xs:simpleType>
      <xs:restriction base="xs:string">
      </xs:restriction>
    </xs:simpleType>
  </xs:element>


  <!-- Node clauses, which can occur in any action. -->

  <xs:group name="NodeClauses">
    <xs:choice>
      <xs:element name="Comment" type="xs:string" minOccurs="0"/>
      <xs:element ref="StartCondition" minOccurs="0"/>
      <xs:element ref="RepeatCondition" minOccurs="0"/>
      <xs:element ref="PreCondition" minOccurs="0"/>
      <xs:element ref="PostCondition" minOccurs="0"/>
      <xs:element ref="InvariantCondition" minOccurs="0"/>
      <xs:element ref="EndCondition" minOccurs="0"/>
      <xs:element ref="SkipCondition" minOccurs="0"/>
      <xs:element name="Priority" type="xs:nonNegativeInteger" minOccurs="0"/>
      <xs:group ref="Interface" minOccurs="0"/>
      <xs:group ref="VariableDeclaration" minOccurs="0"/>
      <xs:element ref="UsingMutex" minOccurs="0"/>
    </xs:choice>
  </xs:group>


  <!-- Sequence variants -->

  <!-- Actions are performed concurrently. This is just a List Node. -->
  <xs:element name="Concurrence" type="sequence-type" />

  <!-- Each action in the sequence is performed in the given order. -->
  <xs:element name="Sequence" type="sequence-type" />

  <!-- Like Sequence, except the actions are checked for success.  If
       one fails, the CheckedSequence form terminates with failure. -->
  <xs:element name="CheckedSequence" type="sequence-type" />
  
  <!-- Each action in the sequence is performed in turn, until one of
       them succeeds; the rest are ignored.  The Try form fails if and
       only if all its actions fail. -->
  <xs:element name="Try" type="sequence-type" />

  <!-- Conditionals and loops -->

  <!-- If statement with optional ElseIf and Else. -->
  <xs:element name="If">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="GeneralizedBooleanExpression"/>
        <xs:element name="Then">
          <xs:complexType>
            <xs:group ref="Action"/>
          </xs:complexType>
        </xs:element>
        <xs:element name="ElseIf" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:group ref="GeneralizedBooleanExpression"/>
              <xs:element name="Then">
                <xs:complexType>
                  <xs:group ref="Action"/>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Else" minOccurs="0">
          <xs:complexType>
            <xs:group ref="Action"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attributeGroup ref="SourceLocators"/>
    </xs:complexType>
  </xs:element>

  <!-- A classic while loop -->
  <xs:element name="While">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="NodeBase">
          <xs:sequence>
            <xs:group ref="GeneralizedBooleanExpression"/>
            <xs:group ref="Action" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <!-- A simple For loop.
       (Optional) First a loop variable is declared.
       Next is the while-test, a boolean expression.
       (Optional) Next is a simplified assignment statement used to update the loop variable.
       Finally, actions to execute. -->
  <xs:element name="For">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="NodeClauses" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="DeclareVariable" minOccurs="0" />
        <!-- while-test -->
        <xs:group ref="GeneralizedBooleanExpression"/>
        <!-- update - simplified Assignment node -->
        <xs:element name="Assignment" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Priority" type="xs:nonNegativeInteger" minOccurs="0"/>
              <xs:group ref="DeclaredVariable"/>
              <xs:group ref="Expression" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Do">
          <xs:complexType>
            <xs:group ref="Action" minOccurs="0" maxOccurs="unbounded" />
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attributeGroup ref="SourceLocators"/>
    </xs:complexType>
  </xs:element>

  <!-- Node Predicates -->

  <xs:element name="IterationSucceeded" type="NodeReference"/>
  <xs:element name="Interrupted" type="NodeReference"/>
  <xs:element name="IterationFailed" type="NodeReference"/>
  <xs:element name="InvariantFailed" type="NodeReference"/>
  <xs:element name="PreconditionFailed" type="NodeReference"/>
  <xs:element name="ParentFailed" type="NodeReference"/>

  <!-- Support for message passing between executives -->

  <!-- Deprecated -->
  <xs:element name="MessageReceived">
    <xs:complexType>
      <xs:group ref="GeneralizedStringExpression"/>
      <xs:attributeGroup ref="SourceLocators"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="OnCommand">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="NodeClauses" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Name"/>
        <xs:group ref="Action" minOccurs="0" maxOccurs="1"/>
      </xs:sequence>
      <xs:attributeGroup ref="SourceLocators"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="OnMessage">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="NodeClauses" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="Message">
          <xs:complexType>
            <xs:group ref="GeneralizedStringExpression"/>
          </xs:complexType>
        </xs:element>
        <xs:group ref="Action" minOccurs="0" maxOccurs="1"/>
      </xs:sequence>
      <xs:attributeGroup ref="SourceLocators"/>
    </xs:complexType>
  </xs:element>


  <!-- Specialized actions -->

  <!-- Wait a specified duration, with optional tolerance for the time reading -->
  <xs:element name="Wait">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="NodeBase">
          <xs:sequence>
            <xs:element name="Units">
              <xs:complexType>
                <xs:group ref="GeneralizedNumericExpression"/>
              </xs:complexType>
            </xs:element>
            <xs:element ref="Tolerance" minOccurs="0"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <!-- Command action that waits for its return value or status handle -->
  <xs:element name="SynchronousCommand">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="NodeBase">
          <xs:sequence>
            <xs:element name= "Timeout" minOccurs= "0">
              <xs:complexType>
                <xs:group ref="GeneralizedNumericExpression"/>
              </xs:complexType>
            </xs:element>
            <xs:element name="Tolerance" minOccurs="0">
              <xs:complexType>
                <xs:group ref="GeneralizedNumericExpression"/>
              </xs:complexType>
            </xs:element>
            <xs:element ref="Command"/>
          </xs:sequence>
          <xs:attributeGroup ref="SourceLocators"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

</xs:schema>
