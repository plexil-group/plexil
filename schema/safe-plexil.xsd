<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE schema PUBLIC "-//W3C//DTD XMLSCHEMA 200102//EN" "http://www.w3.org/2001/XMLSchema.dtd" >

<!--
* Copyright (c) 2006-2020, Universities Space Research Association (USRA).
*  All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Universities Space Research Association nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
* TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<!--
  This schema defines a version of PLEXIL that restricts Core PLEXIL
  (defined in core-plexil.xsd) making it "safer" with respect to
  verifiability.  The only such restriction is requiring the names of 
  commands, function calls, and lookups to be strings, rather than
  arbitrary string expressions (including state lookups).  This restriction
  was part of the original Core Plexil.
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:xml="http://www.w3.org/XML/1998/namespace"
           xml:lang="en">

  <xs:include schemaLocation='plexil-base.xsd' />

  <!-- Elements -->

  <xs:group name="ActionGroup">
    <xs:choice>
      <xs:element ref="Node"/>
    </xs:choice>
  </xs:group>

  <!-- NodeId is required in Safe Plexil. -->
  <xs:complexType name="NodeType">
    <xs:all>
      <xs:element ref="NodeId"/>

      <!-- Annotations for static analysis -->
      <xs:element ref="Assume" minOccurs="0"/>
      <xs:element ref="Desire" minOccurs="0"/>
      <xs:element ref="Expect" minOccurs="0"/>

      <!-- Variable declarations -->
      <xs:element ref="VariableDeclarations" minOccurs="0"/>
      <xs:element ref="Interface" minOccurs="0"/>

      <!-- User conditions -->
      <xs:element ref="StartCondition" minOccurs="0"/>
      <xs:element ref="RepeatCondition" minOccurs="0"/>
      <xs:element ref="PreCondition" minOccurs="0"/>
      <xs:element ref="PostCondition" minOccurs="0"/>
      <xs:element ref="InvariantCondition" minOccurs="0"/>
      <xs:element ref="EndCondition" minOccurs="0"/>
      <xs:element ref="ExitCondition" minOccurs="0"/>
      <xs:element ref="SkipCondition" minOccurs="0"/>

      <!-- Any number of Comment elements COULD be included
           if we could implement XML Schema 1.1.
      -->
      <xs:element ref="Comment" minOccurs="0"/>

      <!-- Currently only relevant for Assignment nodes -->
      <xs:element name="Priority" type="xs:nonNegativeInteger" minOccurs="0"/>

      <xs:element ref="NodeBody" minOccurs="0"/>
    </xs:all>
    <xs:attributeGroup ref="NodeAttributes"/>
  </xs:complexType>

  <xs:group name="BooleanExpression">
    <xs:choice>
      <xs:element ref="BooleanVariable"/>
      <xs:element ref="BooleanValue"/>
	  <xs:group ref="LogicalOperator"/>
	  <xs:group ref="Equality"/>
	  <xs:group ref="NumericComparison"/>
      <xs:group ref="KnownTest"/>
      <xs:group ref="NodeStatePredicate"/>
      <xs:group ref="NodeOutcomePredicate"/>
      <xs:group ref="NodeFailurePredicate"/>
    </xs:choice>
  </xs:group>

  <xs:group name="DeclaredVariable">
    <xs:choice>
      <xs:element ref="IntegerVariable"/>
      <xs:element ref="RealVariable"/>
      <xs:element ref="BooleanVariable"/>
      <xs:element ref="StringVariable"/>
      <xs:element ref="ArrayVariable"/>
      <xs:element ref="ArrayElement"/>
    </xs:choice>
  </xs:group>

  <xs:group name="LookupGroup">
    <xs:choice>
      <xs:element ref="LookupOnChange"/>
      <xs:element ref="LookupNow"/>
    </xs:choice>
  </xs:group>

  <xs:element name="Name" type="xs:string"/>

  <xs:group name="NumericExpression">
    <xs:choice>
	  <xs:group ref="ArithmeticOperator"/>
      <xs:element ref="IntegerVariable"/>
      <xs:element ref="RealVariable"/>
      <xs:element ref="IntegerValue"/>
      <xs:element ref="RealValue"/>
      <xs:element ref="NodeTimepointValue"/>
      <!-- read operations for arrays-->
      <xs:element ref="ArraySize"/>
      <xs:element ref="ArrayMaxSize"/>
    </xs:choice>
  </xs:group>

  <!-- Note: ArrayValue is not included here because arrays
       are handled independently (and NOT supported in places
       were Value is) -->
  <xs:group name="Value">
    <xs:choice>
      <xs:element ref="IntegerValue"/>
      <xs:element ref="RealValue"/>
      <xs:element ref="BooleanValue"/>
      <xs:element ref="StringValue"/>
    </xs:choice>
  </xs:group>

  <!-- Schema types -->

  <xs:simpleType name="AtomicTypeValues">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Integer"/>
      <xs:enumeration value="Real"/>
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="String"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ParameterTypeValues">
    <xs:restriction base="AtomicTypeValues" />
  </xs:simpleType>
</xs:schema>
