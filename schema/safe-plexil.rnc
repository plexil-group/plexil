namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"
default namespace = ""

start =
  DeclareMutex
  | SQRT
  | Node
  | NumericRHS
  | Assignment
  | ALL_KNOWN
  | FLOOR
  | LibraryNodeDeclaration
  | ArrayVariable
  | BooleanValue
  | EQBoolean
  | EQString
  | CEIL
  | StringValue
  | EQArray
  | IsKnown
  | NodeCommandHandleValue
  | SUB
  | StringRHS
  | NodeBody
  | NodeList
  | StartCondition
  | Arguments
  | PostCondition
  | STRLEN
  | ResourceList
  | MIN
  | InvariantCondition
  | NEInternal
  | XOR
  | In
  | MAX
  | LookupOnChange
  | TRUNC
  | NEString
  | VariableDeclarations
  | Timepoint
  | NEArray
  | NodeRef
  | EndCondition
  | ABS
  | NodeStateVariable
  | ArraySize
  | REAL_TO_INT
  | RealValue
  | NodeOutcomeVariable
  | RealVariable
  | NodeOutcomeValue
  | StringVariable
  | EQNumeric
  | DIV
  | Parameter
  | LE
  | Interface
  | ADD
  | DeclareArray
  | ArrayMaxSize
  | LT
  | Update
  | Name
  | Concat
  | IntegerVariable
  | BooleanRHS
  | ANY_KNOWN
  | RepeatCondition
  | NodeFailureValue
  | ArrayElement
  | NodeStateValue
  | (notAllowed
     | element PlexilPlan {
         SourceLocators, GlobalDeclarations?, Action
       })
  | MUL
  | PreCondition
  | Resource
  | NOT
  | AND
  | NodeId
  | ExitCondition
  | ArrayValue
  | NodeCommandHandleVariable
  | EQInternal
  | ROUND
  | DeclareVariable
  | NodeFailureVariable
  | ArrayRHS
  | NENumeric
  | GlobalDeclarations
  | CommandDeclaration
  | UsingMutex
  | GE
  | LookupNow
  | Pair
  | Return
  | OR
  | MOD
  | IntegerValue
  | Tolerance
  | NodeTimepointValue
  | LibraryNodeCall
  | GT
  | NEBoolean
  | Command
  | BooleanVariable
  | Alias
  | SkipCondition
  | InOut
  | StateDeclaration
<<<<<<< .mine
GeneralizedBooleanExpression =
  BooleanExpression | LookupGroup | ArrayElement
Timepoint =
||||||| .r4854
FLOOR =
=======
CEIL =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Timepoint { xsd:NMTOKEN "START" | xsd:NMTOKEN "END" }
NOT =
||||||| .r4854
  | element FLOOR { SourceLocators, GeneralizedNumericExpression }
ALL_KNOWN =
=======
  | element CEIL { SourceLocators, GeneralizedNumericExpression }
Pair =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NOT { SourceLocators, GeneralizedBooleanExpression }
IntegerValue =
||||||| .r4854
  | element ALL_KNOWN { SourceLocators, GeneralizedArrayExpression }
NumericRHS =
=======
  | element Pair {
      element Name { NCName },
      Expression
    }
LookupOnChange =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element IntegerValue { xsd:integer }
StringExpression = StringVariable | StringValue | Concat
NodeOutcomeValue =
||||||| .r4854
  | element NumericRHS { SourceLocators, GeneralizedNumericExpression }
Assignment =
=======
  | element LookupOnChange {
      SourceLocators, Name, Tolerance?, Arguments?
    }
Command =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeOutcomeValue {
      xsd:NMTOKEN "SUCCESS"
      | xsd:NMTOKEN "SKIPPED"
      | xsd:NMTOKEN "FAILURE"
      | xsd:NMTOKEN "INTERRUPTED"
||||||| .r4854
  | element Assignment {
      SourceLocators,
      DeclaredVariable,
      (BooleanRHS | NumericRHS | StringRHS | ArrayRHS)
=======
  | element Command {
      SourceLocators, ResourceList?, DeclaredVariable?, Name, Arguments?
>>>>>>> .r4867
    }
<<<<<<< .mine
ExitCondition =
  notAllowed
  | element ExitCondition {
||||||| .r4854
LookupNow =
  notAllowed
  | element LookupNow { SourceLocators, Name, Arguments? }
ExitCondition =
  notAllowed
  | element ExitCondition {
=======
DeclaredVariable =
  IntegerVariable
  | RealVariable
  | BooleanVariable
  | StringVariable
  | ArrayVariable
  | ArrayElement
EndCondition =
  notAllowed
  | element EndCondition {
>>>>>>> .r4867
      SourceLocators, GeneralizedBooleanExpression
    }
<<<<<<< .mine
BooleanExpression =
  (OR | XOR | AND | NOT)
  | (EQBoolean
     | EQNumeric
     | EQInternal
     | EQString
     | EQArray
     | NEBoolean
     | NENumeric
     | NEInternal
     | NEString
     | NEArray)
  | (GT | GE | LT | LE)
  | (IsKnown | ALL_KNOWN | ANY_KNOWN)
  | BooleanVariable
  | BooleanValue
ArrayVariable =
||||||| .r4854
XOR =
=======
OR =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ArrayVariable { NCName }
LookupOnChange =
||||||| .r4854
  | element XOR { SourceLocators, GeneralizedBooleanExpression* }
nonNegativeInteger = xsd:nonNegativeInteger
MutexDeclaration =
=======
  | element OR { SourceLocators, GeneralizedBooleanExpression* }
DeclareMutex =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element LookupOnChange {
      SourceLocators, Name, Tolerance?, Arguments?
||||||| .r4854
  | element MutexDeclaration {
      SourceLocators,
      element Name { NCName }
=======
  | element DeclareMutex {
      SourceLocators,
      element Name { SourceLocators, xsd:NCName }
>>>>>>> .r4867
    }
<<<<<<< .mine
NodeBody =
||||||| .r4854
EQInternal =
=======
EQNumeric =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeBody {
      NodeList | Command | Assignment | Update | LibraryNodeCall
||||||| .r4854
  | element EQInternal {
      SourceLocators,
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
=======
  | element EQNumeric {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
>>>>>>> .r4867
    }
<<<<<<< .mine
||||||| .r4854
Pair =
  notAllowed
  | element Pair {
      element Name { NCName },
      Expression
    }
VariableDeclarations =
  notAllowed
  | element VariableDeclarations { (DeclareVariable | DeclareArray)+ }
NodeOutcomeVariable =
  notAllowed
  | element NodeOutcomeVariable { node-reference }
ADD =
  notAllowed
  | element ADD {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
    }
EndCondition =
  notAllowed
  | element EndCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
InvariantCondition =
  notAllowed
  | element InvariantCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
NEInternal =
  notAllowed
  | element NEInternal {
      SourceLocators,
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
    }
EQNumeric =
  notAllowed
  | element EQNumeric {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
MIN =
  notAllowed
  | element MIN {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
NodeFailureVariable =
  notAllowed
  | element NodeFailureVariable { node-reference }
=======
NodeStateVariable =
  notAllowed
  | element NodeStateVariable { node-reference }
ArrayMaxSize =
  notAllowed
  | element ArrayMaxSize { SourceLocators, GeneralizedArrayExpression }
InvariantCondition =
  notAllowed
  | element InvariantCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
NodeState = NodeStateVariable | NodeStateValue
ArrayExpression = ArrayValue | ArrayVariable
PostCondition =
  notAllowed
  | element PostCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
NENumeric =
  notAllowed
  | element NENumeric {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
EQBoolean =
  notAllowed
  | element EQBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
MAX =
  notAllowed
  | element MAX {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
NumericRHS =
  notAllowed
  | element NumericRHS { SourceLocators, GeneralizedNumericExpression }
>>>>>>> .r4867
Node =
  notAllowed
  | element Node {
      SourceLocators,
      attribute epx { xsd:NCName }?,
      attribute NodeType {
        xsd:NMTOKEN "Assignment"
        | xsd:NMTOKEN "Empty"
        | xsd:NMTOKEN "Command"
        | xsd:NMTOKEN "NodeList"
        | xsd:NMTOKEN "Update"
        | xsd:NMTOKEN "LibraryNodeCall"
      },
      (element Comment { \string }?
       & NodeId
       & StartCondition?
       & RepeatCondition?
       & PreCondition?
       & PostCondition?
       & InvariantCondition?
       & EndCondition?
       & ExitCondition?
       & SkipCondition?
       & element Priority { nonNegativeInteger }?
       & Interface?
       & VariableDeclarations?
<<<<<<< .mine
||||||| .r4854
       & Mutexes?
=======
       & UsingMutex?
>>>>>>> .r4867
       & NodeBody?)
    }
<<<<<<< .mine
Assignment =
||||||| .r4854
In =
=======
DIV =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Assignment {
      SourceLocators,
      DeclaredVariable,
      (BooleanRHS | NumericRHS | StringRHS | ArrayRHS)
    }
MAX =
  notAllowed
  | element MAX {
||||||| .r4854
  | element In { SourceLocators, (DeclareVariable | DeclareArray)+ }
NodeState = NodeStateVariable | NodeStateValue
MOD =
  notAllowed
  | element MOD {
=======
  | element DIV {
>>>>>>> .r4867
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
<<<<<<< .mine
NumericExpression =
  (ADD
   | SUB
   | MUL
   | DIV
   | MOD
   | MAX
   | MIN
   | SQRT
   | ABS
   | CEIL
   | FLOOR
   | ROUND
   | TRUNC
   | REAL_TO_INT
   | STRLEN)
  | IntegerVariable
  | RealVariable
  | IntegerValue
  | RealValue
  | NodeTimepointValue
  | ArraySize
  | ArrayMaxSize
ANY_KNOWN =
||||||| .r4854
ROUND =
=======
FLOOR =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ANY_KNOWN { SourceLocators, GeneralizedArrayExpression }
SUB =
||||||| .r4854
  | element ROUND { SourceLocators, GeneralizedNumericExpression }
IntegerVariable =
=======
  | element FLOOR { SourceLocators, GeneralizedNumericExpression }
DeclareArray =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element SUB {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
    }
NodeCommandHandle = NodeCommandHandleVariable | NodeCommandHandleValue
GT =
  notAllowed
  | element GT {
||||||| .r4854
  | element IntegerVariable { NCName }
GT =
  notAllowed
  | element GT {
=======
  | element DeclareArray {
>>>>>>> .r4867
      SourceLocators,
      element Name { NCName },
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?,
      element InitialValue { Value+ | ArrayValue }?
    }
<<<<<<< .mine
FLOOR =
||||||| .r4854
LookupGroup = LookupOnChange | LookupNow
Mutexes =
=======
ALL_KNOWN =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element FLOOR { SourceLocators, GeneralizedNumericExpression }
GeneralizedNumericExpression =
  NumericExpression | LookupGroup | ArrayElement
BooleanVariable =
  notAllowed
  | element BooleanVariable { NCName }
In =
  notAllowed
  | element In { SourceLocators, (DeclareVariable | DeclareArray)+ }
NodeTimepointValue =
  notAllowed
  | element NodeTimepointValue {
      SourceLocators, NodeReference, NodeStateValue, Timepoint
||||||| .r4854
  | element Mutexes {
      SourceLocators,
      element Name {
        element StringValue { NCName }
      }+
=======
  | element ALL_KNOWN { SourceLocators, GeneralizedArrayExpression }
NEString =
  notAllowed
  | element NEString {
      SourceLocators,
      GeneralizedStringExpression,
      GeneralizedStringExpression
>>>>>>> .r4867
    }
<<<<<<< .mine
GeneralizedArrayExpression = ArrayExpression | LookupGroup
SQRT =
||||||| .r4854
GeneralizedArrayExpression = ArrayExpression | LookupGroup
REAL_TO_INT =
=======
NumericExpression =
  (ADD
   | SUB
   | MUL
   | DIV
   | MOD
   | MAX
   | MIN
   | SQRT
   | ABS
   | CEIL
   | FLOOR
   | ROUND
   | TRUNC
   | REAL_TO_INT
   | STRLEN)
  | IntegerVariable
  | RealVariable
  | IntegerValue
  | RealValue
  | NodeTimepointValue
  | ArraySize
  | ArrayMaxSize
VariableDeclarations =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element SQRT { SourceLocators, GeneralizedNumericExpression }
||||||| .r4854
  | element REAL_TO_INT { SourceLocators, GeneralizedNumericExpression }
=======
  | element VariableDeclarations {
      (DeclareVariable | DeclareArray | DeclareMutex)+
    }
STRLEN =
  notAllowed
  | element STRLEN { SourceLocators, GeneralizedStringExpression }
NodeStateValue =
  notAllowed
  | element NodeStateValue {
      xsd:NMTOKEN "EXECUTING"
      | xsd:NMTOKEN "FAILING"
      | xsd:NMTOKEN "ITERATION_ENDED"
      | xsd:NMTOKEN "INACTIVE"
      | xsd:NMTOKEN "WAITING"
      | xsd:NMTOKEN "FINISHING"
      | xsd:NMTOKEN "FINISHED"
    }
NCName = xsd:NCName
TRUNC =
  notAllowed
  | element TRUNC { SourceLocators, GeneralizedNumericExpression }
>>>>>>> .r4867
NodeReference = NodeId | NodeRef
<<<<<<< .mine
ResourceList =
  notAllowed
  | element ResourceList { SourceLocators, Resource* }
CEIL =
||||||| .r4854
CEIL =
=======
ABS =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element CEIL { SourceLocators, GeneralizedNumericExpression }
EQString =
||||||| .r4854
  | element CEIL { SourceLocators, GeneralizedNumericExpression }
GeneralizedNumericExpression =
  NumericExpression | LookupGroup | ArrayElement
RealValue =
=======
  | element ABS { SourceLocators, GeneralizedNumericExpression }
IntegerValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element EQString {
      SourceLocators,
      GeneralizedStringExpression,
      GeneralizedStringExpression
||||||| .r4854
  | element RealValue { xsd:double }
PreCondition =
  notAllowed
  | element PreCondition {
      SourceLocators, GeneralizedBooleanExpression
=======
  | element IntegerValue { xsd:integer }
RepeatCondition =
  notAllowed
  | element RepeatCondition {
      SourceLocators, GeneralizedBooleanExpression
>>>>>>> .r4867
    }
<<<<<<< .mine
ArrayExpression = ArrayValue | ArrayVariable
AND =
||||||| .r4854
Timepoint =
=======
ArrayValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element AND { SourceLocators, GeneralizedBooleanExpression* }
GE =
  notAllowed
  | element GE {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
||||||| .r4854
  | element Timepoint { xsd:NMTOKEN "START" | xsd:NMTOKEN "END" }
NodeOutcomeValue =
  notAllowed
  | element NodeOutcomeValue {
      xsd:NMTOKEN "SUCCESS"
      | xsd:NMTOKEN "SKIPPED"
      | xsd:NMTOKEN "FAILURE"
      | xsd:NMTOKEN "INTERRUPTED"
=======
  | element ArrayValue {
      SourceLocators,
      attribute Type {
        xsd:NMTOKEN "Integer"
        | xsd:NMTOKEN "Real"
        | xsd:NMTOKEN "String"
        | xsd:NMTOKEN "Boolean"
      },
      (IntegerValue+ | RealValue+ | BooleanValue+ | StringValue+)
>>>>>>> .r4867
    }
<<<<<<< .mine
MOD =
||||||| .r4854
GeneralizedStringExpression =
  StringExpression | LookupGroup | ArrayElement
AtomicTypeValues =
  xsd:NMTOKEN "Integer"
  | xsd:NMTOKEN "Real"
  | xsd:NMTOKEN "String"
  | xsd:NMTOKEN "Boolean"
NodeCommandHandle = NodeCommandHandleVariable | NodeCommandHandleValue
GlobalDeclarations =
=======
GeneralizedStringExpression =
  StringExpression | LookupGroup | ArrayElement
Value = IntegerValue | RealValue | BooleanValue | StringValue
GeneralizedArrayExpression = ArrayExpression | LookupGroup
GlobalDeclarations =
>>>>>>> .r4867
  notAllowed
  | element MOD {
      SourceLocators,
<<<<<<< .mine
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
||||||| .r4854
      (CommandDeclaration
       | empty
       | StateDeclaration
       | LibraryNodeDeclaration
       | MutexDeclaration
       | element TimeScalingUnitsSubunits { xsd:integer })+
=======
      (CommandDeclaration
       | empty
       | StateDeclaration
       | LibraryNodeDeclaration
       | DeclareMutex
       | element TimeScalingUnitsSubunits { xsd:integer })+
>>>>>>> .r4867
    }
<<<<<<< .mine
DeclaredVariable =
  IntegerVariable
  | RealVariable
  | BooleanVariable
  | StringVariable
  | ArrayVariable
  | ArrayElement
NodeOutcomeVariable =
||||||| .r4854
EQBoolean =
=======
NOT =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeOutcomeVariable { node-reference }
NodeState = NodeStateVariable | NodeStateValue
EQInternal =
  notAllowed
  | element EQInternal {
      SourceLocators,
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
    }
MIN =
||||||| .r4854
  | element EQBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
GE =
=======
  | element NOT { SourceLocators, GeneralizedBooleanExpression }
GT =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element MIN {
||||||| .r4854
  | element GE {
=======
  | element GT {
>>>>>>> .r4867
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
<<<<<<< .mine
Interface =
||||||| .r4854
NEString =
=======
NEInternal =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Interface { SourceLocators, (In? & InOut?) }
Command =
||||||| .r4854
  | element NEString {
      SourceLocators,
      GeneralizedStringExpression,
      GeneralizedStringExpression
    }
Parameter =
=======
  | element NEInternal {
      SourceLocators,
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
    }
Parameter =
>>>>>>> .r4867
  notAllowed
  | element Command {
      SourceLocators, ResourceList?, DeclaredVariable?, Name, Arguments?
    }
<<<<<<< .mine
StringValue =
||||||| .r4854
NodeId =
=======
Resource =
  notAllowed
  | element Resource {
      SourceLocators,
      (element ResourceName { GeneralizedStringExpression }
       & element ResourcePriority { GeneralizedNumericExpression }
       & element ResourceLowerBound { GeneralizedNumericExpression }?
       & element ResourceUpperBound { GeneralizedNumericExpression }?
       & element ResourceReleaseAtTermination {
           GeneralizedBooleanExpression
         }?)
    }
NodeId =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element StringValue { xsd:string }
REAL_TO_INT =
||||||| .r4854
  | element NodeId { NCName }
NodeTimepointValue =
=======
  | element NodeId { NCName }
Timepoint =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element REAL_TO_INT { SourceLocators, GeneralizedNumericExpression }
Pair =
||||||| .r4854
  | element NodeTimepointValue {
      SourceLocators, NodeReference, NodeStateValue, Timepoint
    }
BooleanVariable =
=======
  | element Timepoint { xsd:NMTOKEN "START" | xsd:NMTOKEN "END" }
RealVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Pair {
      element Name { NCName },
      Expression
||||||| .r4854
  | element BooleanVariable { NCName }
MUL =
  notAllowed
  | element MUL {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
=======
  | element RealVariable { NCName }
GeneralizedNumericExpression =
  NumericExpression | LookupGroup | ArrayElement
SUB =
  notAllowed
  | element SUB {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
>>>>>>> .r4867
    }
CommandDeclaration =
  notAllowed
  | element CommandDeclaration {
      SourceLocators,
      element Name { NCName },
      Return*,
      ParameterSpec?,
      ResourceList?
    }
<<<<<<< .mine
LT =
  notAllowed
  | element LT {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
NCName = xsd:NCName
PostCondition =
||||||| .r4854
PostCondition =
=======
PreCondition =
>>>>>>> .r4867
  notAllowed
  | element PreCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
<<<<<<< .mine
NodeFailureValue =
  notAllowed
  | element NodeFailureValue {
      xsd:NMTOKEN "PRE_CONDITION_FAILED"
      | xsd:NMTOKEN "EXITED"
      | xsd:NMTOKEN "INVARIANT_CONDITION_FAILED"
      | xsd:NMTOKEN "PARENT_FAILED"
      | xsd:NMTOKEN "PARENT_EXITED"
      | xsd:NMTOKEN "POST_CONDITION_FAILED"
||||||| .r4854
NodeStateVariable =
  notAllowed
  | element NodeStateVariable { node-reference }
\string = xsd:string
Return =
  notAllowed
  | element Return {
      element Name { NCName }?,
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?
=======
nonNegativeInteger = xsd:nonNegativeInteger
Return =
  notAllowed
  | element Return {
      element Name { NCName }?,
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?
>>>>>>> .r4867
    }
<<<<<<< .mine
SourceLocators =
  attribute ColNo { xsd:integer }?,
  attribute LineNo { xsd:integer }?,
  attribute FileName { xsd:string }?
TRUNC =
||||||| .r4854
ArraySize =
=======
MOD =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element TRUNC { SourceLocators, GeneralizedNumericExpression }
NodeFailure = NodeFailureVariable | NodeFailureValue
RealValue =
  notAllowed
  | element RealValue { xsd:double }
||||||| .r4854
  | element ArraySize { SourceLocators, GeneralizedArrayExpression }
MAX =
  notAllowed
  | element MAX {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
=======
  | element MOD {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
>>>>>>> .r4867
ArrayVariable =
  notAllowed
  | element ArrayVariable { NCName }
EQString =
  notAllowed
  | element EQString {
      SourceLocators,
      GeneralizedStringExpression,
      GeneralizedStringExpression
    }
<<<<<<< .mine
Value = IntegerValue | RealValue | BooleanValue | StringValue
EQArray =
||||||| .r4854
AND =
=======
XOR =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element EQArray {
      SourceLocators,
      GeneralizedArrayExpression,
      GeneralizedArrayExpression
    }
Tolerance =
  notAllowed
  | element Tolerance { GeneralizedNumericExpression }
NodeOutcome = NodeOutcomeVariable | NodeOutcomeValue
Arguments =
  notAllowed
  | element Arguments { SourceLocators, Expression+ }
Return =
  notAllowed
  | element Return {
      element Name { NCName }?,
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?
||||||| .r4854
  | element AND { SourceLocators, GeneralizedBooleanExpression* }
NEBoolean =
  notAllowed
  | element NEBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
SkipCondition =
  notAllowed
  | element SkipCondition {
      SourceLocators, GeneralizedBooleanExpression
=======
  | element XOR { SourceLocators, GeneralizedBooleanExpression* }
ExitCondition =
  notAllowed
  | element ExitCondition {
      SourceLocators, GeneralizedBooleanExpression
>>>>>>> .r4867
    }
<<<<<<< .mine
Expression =
  BooleanExpression
  | NumericExpression
  | StringExpression
  | ArrayExpression
  | LookupGroup
  | ArrayElement
NEBoolean =
||||||| .r4854
Expression =
  BooleanExpression
  | NumericExpression
  | StringExpression
  | ArrayExpression
  | LookupGroup
  | ArrayElement
NodeOutcome = NodeOutcomeVariable | NodeOutcomeValue
ParameterSpec =
  Parameter*,
  (notAllowed
   | element AnyParameters {
       mixed {
         (attribute * { text }
          | element0)*
       }
     })?
ABS =
=======
StringExpression = StringVariable | StringValue | Concat
ParameterSpec =
  Parameter*,
  (notAllowed
   | element AnyParameters {
       mixed {
         (attribute * { text }
          | element0)*
       }
     })?
SQRT =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NEBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
Resource =
||||||| .r4854
  | element ABS { SourceLocators, GeneralizedNumericExpression }
StringValue =
=======
  | element SQRT { SourceLocators, GeneralizedNumericExpression }
BooleanValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Resource {
      SourceLocators,
      (element ResourceName { GeneralizedStringExpression }
       & element ResourcePriority { GeneralizedNumericExpression }
       & element ResourceLowerBound { GeneralizedNumericExpression }?
       & element ResourceUpperBound { GeneralizedNumericExpression }?
       & element ResourceReleaseAtTermination {
           GeneralizedBooleanExpression
         }?)
    }
InvariantCondition =
  notAllowed
  | element InvariantCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
Parameter =
  notAllowed
  | element Parameter {
      element Name { NCName }?,
      element Type {
        xsd:NMTOKEN "Integer"
        | xsd:NMTOKEN "Real"
        | xsd:NMTOKEN "String"
        | xsd:NMTOKEN "Boolean"
      },
      element MaxSize { nonNegativeInteger }?
    }
ArrayRHS =
||||||| .r4854
  | element StringValue { xsd:string }
ArrayRHS =
=======
  | element BooleanValue { xsd:boolean }
Concat =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ArrayRHS { SourceLocators, GeneralizedArrayExpression }
Concat =
||||||| .r4854
  | element ArrayRHS { SourceLocators, GeneralizedArrayExpression }
NodeBody =
=======
  | element Concat { SourceLocators, GeneralizedStringExpression* }
UsingMutex =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element Concat { SourceLocators, GeneralizedStringExpression* }
NodeStateVariable =
||||||| .r4854
  | element NodeBody {
      NodeList | Command | Assignment | Update | LibraryNodeCall
    }
Arguments =
=======
  | element UsingMutex {
      SourceLocators,
      element Name {
        SourceLocators,
        element StringValue { NCName }
      }+
    }
LookupNow =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeStateVariable { node-reference }
StartCondition =
||||||| .r4854
  | element Arguments { SourceLocators, Expression+ }
StartCondition =
=======
  | element LookupNow { SourceLocators, Name, Arguments? }
Name =
>>>>>>> .r4867
  notAllowed
  | element Name { \string }
<<<<<<< .mine
MUL =
||||||| .r4854
Action = Node
Update =
=======
Action = Node
Assignment =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element MUL {
||||||| .r4854
  | element Update { SourceLocators, Pair* }
IsKnown =
  notAllowed
  | element IsKnown {
=======
  | element Assignment {
>>>>>>> .r4867
      SourceLocators,
<<<<<<< .mine
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
||||||| .r4854
      (Expression
       | NodeStateVariable
       | NodeOutcomeVariable
       | NodeCommandHandleVariable)
=======
      DeclaredVariable,
      (BooleanRHS | NumericRHS | StringRHS | ArrayRHS)
>>>>>>> .r4867
    }
<<<<<<< .mine
LibraryNodeDeclaration =
||||||| .r4854
TRUNC =
=======
StringValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element LibraryNodeDeclaration {
||||||| .r4854
  | element TRUNC { SourceLocators, GeneralizedNumericExpression }
DeclareArray =
  notAllowed
  | element DeclareArray {
=======
  | element StringValue { xsd:string }
NodeCommandHandleVariable =
  notAllowed
  | element NodeCommandHandleVariable { node-reference }
ROUND =
  notAllowed
  | element ROUND { SourceLocators, GeneralizedNumericExpression }
DeclareVariable =
  notAllowed
  | element DeclareVariable {
>>>>>>> .r4867
      SourceLocators,
      element Name { NCName },
<<<<<<< .mine
      Interface?
||||||| .r4854
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?,
      element InitialValue { Value+ | ArrayValue }?
=======
      element Type { AtomicTypeValues },
      element InitialValue { Value }?
>>>>>>> .r4867
    }
<<<<<<< .mine
StringRHS =
||||||| .r4854
Value = IntegerValue | RealValue | BooleanValue | StringValue
IntegerValue =
=======
Tolerance =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element StringRHS { SourceLocators, GeneralizedStringExpression }
NEInternal =
||||||| .r4854
  | element IntegerValue { xsd:integer }
ResourceList =
=======
  | element Tolerance { GeneralizedNumericExpression }
SkipCondition =
  notAllowed
  | element SkipCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
ResourceList =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NEInternal {
      SourceLocators,
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
||||||| .r4854
  | element ResourceList { SourceLocators, Resource* }
Alias =
  notAllowed
  | element Alias {
      SourceLocators,
      element NodeParameter { NCName },
      Expression
=======
  | element ResourceList { SourceLocators, Resource* }
BooleanRHS =
  notAllowed
  | element BooleanRHS { SourceLocators, GeneralizedBooleanExpression }
AtomicTypeValues =
  xsd:NMTOKEN "Integer"
  | xsd:NMTOKEN "Real"
  | xsd:NMTOKEN "String"
  | xsd:NMTOKEN "Boolean"
NodeBody =
  notAllowed
  | element NodeBody {
      NodeList | Command | Assignment | Update | LibraryNodeCall
>>>>>>> .r4867
    }
<<<<<<< .mine
ParameterSpec =
  Parameter*,
  (notAllowed
   | element AnyParameters {
       mixed {
         (attribute * { text }
          | element0)*
       }
     })?
NodeRef =
||||||| .r4854
RepeatCondition =
=======
NodeFailure = NodeFailureVariable | NodeFailureValue
NodeFailureValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeRef {
      attribute dir {
        xsd:NMTOKEN "parent"
        | xsd:NMTOKEN "sibling"
        | xsd:NMTOKEN "self"
        | xsd:NMTOKEN "child"
      }?,
      (xsd:NCName | xsd:string "")
||||||| .r4854
  | element RepeatCondition {
      SourceLocators, GeneralizedBooleanExpression
=======
  | element NodeFailureValue {
      xsd:NMTOKEN "PRE_CONDITION_FAILED"
      | xsd:NMTOKEN "EXITED"
      | xsd:NMTOKEN "INVARIANT_CONDITION_FAILED"
      | xsd:NMTOKEN "PARENT_FAILED"
      | xsd:NMTOKEN "PARENT_EXITED"
      | xsd:NMTOKEN "POST_CONDITION_FAILED"
    }
StartCondition =
  notAllowed
  | element StartCondition {
      SourceLocators, GeneralizedBooleanExpression
>>>>>>> .r4867
    }
<<<<<<< .mine
NodeId =
||||||| .r4854
GeneralizedBooleanExpression =
  BooleanExpression | LookupGroup | ArrayElement
SourceLocators =
  attribute ColNo { xsd:integer }?,
  attribute LineNo { xsd:integer }?,
  attribute FileName { xsd:string }?
NodeFailure = NodeFailureVariable | NodeFailureValue
LibraryNodeCall =
=======
Expression =
  BooleanExpression
  | NumericExpression
  | StringExpression
  | ArrayExpression
  | LookupGroup
  | ArrayElement
SourceLocators =
  attribute ColNo { xsd:integer }?,
  attribute LineNo { xsd:integer }?,
  attribute FileName { xsd:string }?
Update =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeId { NCName }
Update =
  notAllowed
  | element Update { SourceLocators, Pair* }
ArrayValue =
  notAllowed
  | element ArrayValue {
      SourceLocators,
      attribute Type {
        xsd:NMTOKEN "Integer"
        | xsd:NMTOKEN "Real"
        | xsd:NMTOKEN "String"
        | xsd:NMTOKEN "Boolean"
      },
      (IntegerValue+ | RealValue+ | BooleanValue+ | StringValue+)
||||||| .r4854
  | element LibraryNodeCall { SourceLocators, NodeId, Alias* }
element0 =
  element * {
    mixed {
      (attribute * { text }
       | element0)*
=======
  | element Update { SourceLocators, Pair* }
element0 =
  element * {
    mixed {
      (attribute * { text }
       | element0)*
>>>>>>> .r4867
    }
LT =
  notAllowed
  | element LT {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
<<<<<<< .mine
ADD =
||||||| .r4854
StringRHS =
=======
IntegerVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ADD {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
    }
\string = xsd:string
NodeStateValue =
||||||| .r4854
  | element StringRHS { SourceLocators, GeneralizedStringExpression }
RealVariable =
=======
  | element IntegerVariable { NCName }
InOut =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeStateValue {
      xsd:NMTOKEN "EXECUTING"
      | xsd:NMTOKEN "FAILING"
      | xsd:NMTOKEN "ITERATION_ENDED"
      | xsd:NMTOKEN "INACTIVE"
      | xsd:NMTOKEN "WAITING"
      | xsd:NMTOKEN "FINISHING"
      | xsd:NMTOKEN "FINISHED"
    }
NENumeric =
||||||| .r4854
  | element RealVariable { NCName }
NENumeric =
=======
  | element InOut { SourceLocators, (DeclareVariable | DeclareArray)+ }
NEBoolean =
>>>>>>> .r4867
  notAllowed
  | element NEBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
NodeCommandHandleVariable =
  notAllowed
  | element NodeCommandHandleVariable { node-reference }
EQBoolean =
  notAllowed
  | element EQBoolean {
      SourceLocators,
      GeneralizedBooleanExpression,
      GeneralizedBooleanExpression
    }
node-reference = (SourceLocators, NodeReference), empty
<<<<<<< .mine
DeclareArray =
||||||| .r4854
StringExpression = StringVariable | StringValue | Concat
BooleanValue =
=======
RealValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element DeclareArray {
      SourceLocators,
      element Name { NCName },
      element Type { AtomicTypeValues },
      element MaxSize { nonNegativeInteger }?,
      element InitialValue { Value+ | ArrayValue }?
    }
XOR =
||||||| .r4854
  | element BooleanValue { xsd:boolean }
DeclaredVariable =
  IntegerVariable
  | RealVariable
  | BooleanVariable
  | StringVariable
  | ArrayVariable
  | ArrayElement
ArrayMaxSize =
=======
  | element RealValue { xsd:double }
NodeOutcome = NodeOutcomeVariable | NodeOutcomeValue
ArrayElement =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element XOR { SourceLocators, GeneralizedBooleanExpression* }
SkipCondition =
||||||| .r4854
  | element ArrayMaxSize { SourceLocators, GeneralizedArrayExpression }
NumericExpression =
  (ADD
   | SUB
   | MUL
   | DIV
   | MOD
   | MAX
   | MIN
   | SQRT
   | ABS
   | CEIL
   | FLOOR
   | ROUND
   | TRUNC
   | REAL_TO_INT
   | STRLEN)
  | IntegerVariable
  | RealVariable
  | IntegerValue
  | RealValue
  | NodeTimepointValue
  | ArraySize
  | ArrayMaxSize
NodeList =
=======
  | element ArrayElement {
      SourceLocators,
      (GeneralizedArrayExpression
       | element Name { NCName }),
      element Index { GeneralizedNumericExpression }
    }
ArraySize =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element SkipCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
element0 =
  element * {
    mixed {
      (attribute * { text }
       | element0)*
    }
  }
AtomicTypeValues =
  xsd:NMTOKEN "Integer"
  | xsd:NMTOKEN "Real"
  | xsd:NMTOKEN "String"
  | xsd:NMTOKEN "Boolean"
GlobalDeclarations =
||||||| .r4854
  | element NodeList { Action* }
ANY_KNOWN =
=======
  | element ArraySize { SourceLocators, GeneralizedArrayExpression }
Alias =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element GlobalDeclarations {
||||||| .r4854
  | element ANY_KNOWN { SourceLocators, GeneralizedArrayExpression }
NCName = xsd:NCName
LibraryNodeDeclaration =
  notAllowed
  | element LibraryNodeDeclaration {
=======
  | element Alias {
      SourceLocators,
      element NodeParameter { NCName },
      Expression
    }
LibraryNodeDeclaration =
  notAllowed
  | element LibraryNodeDeclaration {
>>>>>>> .r4867
      SourceLocators,
      (CommandDeclaration
       | empty
       | StateDeclaration
       | LibraryNodeDeclaration
       | element TimeScalingUnitsSubunits { xsd:integer })+
    }
<<<<<<< .mine
RealVariable =
||||||| .r4854
NOT =
=======
AND =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element RealVariable { NCName }
InOut =
  notAllowed
  | element InOut { SourceLocators, (DeclareVariable | DeclareArray)+ }
NumericRHS =
  notAllowed
  | element NumericRHS { SourceLocators, GeneralizedNumericExpression }
DIV =
||||||| .r4854
  | element NOT { SourceLocators, GeneralizedBooleanExpression }
DIV =
=======
  | element AND { SourceLocators, GeneralizedBooleanExpression* }
StringRHS =
>>>>>>> .r4867
  notAllowed
  | element StringRHS { SourceLocators, GeneralizedStringExpression }
GeneralizedBooleanExpression =
  BooleanExpression | LookupGroup | ArrayElement
LE =
  notAllowed
  | element LE {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
<<<<<<< .mine
NEString =
||||||| .r4854
NodeFailureValue =
=======
\string = xsd:string
MUL =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NEString {
      SourceLocators,
      GeneralizedStringExpression,
      GeneralizedStringExpression
||||||| .r4854
  | element NodeFailureValue {
      xsd:NMTOKEN "PRE_CONDITION_FAILED"
      | xsd:NMTOKEN "EXITED"
      | xsd:NMTOKEN "INVARIANT_CONDITION_FAILED"
      | xsd:NMTOKEN "PARENT_FAILED"
      | xsd:NMTOKEN "PARENT_EXITED"
      | xsd:NMTOKEN "POST_CONDITION_FAILED"
=======
  | element MUL {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
>>>>>>> .r4867
    }
<<<<<<< .mine
IntegerVariable =
||||||| .r4854
StringVariable =
=======
NodeFailureVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element IntegerVariable { NCName }
BooleanValue =
||||||| .r4854
  | element StringVariable { NCName }
DeclareVariable =
=======
  | element NodeFailureVariable { node-reference }
BooleanVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element BooleanValue { xsd:boolean }
ABS =
||||||| .r4854
  | element DeclareVariable {
      SourceLocators,
      element Name { NCName },
      element Type { AtomicTypeValues },
      element InitialValue { Value }?
    }
ArrayExpression = ArrayValue | ArrayVariable
LT =
=======
  | element BooleanVariable { NCName }
NodeCommandHandle = NodeCommandHandleVariable | NodeCommandHandleValue
IsKnown =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element ABS { SourceLocators, GeneralizedNumericExpression }
VariableDeclarations =
||||||| .r4854
  | element LT {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
Concat =
=======
  | element IsKnown {
      SourceLocators,
      (Expression
       | NodeStateVariable
       | NodeOutcomeVariable
       | NodeCommandHandleVariable)
    }
ArrayRHS =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element VariableDeclarations { (DeclareVariable | DeclareArray)+ }
LookupNow =
  notAllowed
  | element LookupNow { SourceLocators, Name, Arguments? }
ALL_KNOWN =
  notAllowed
  | element ALL_KNOWN { SourceLocators, GeneralizedArrayExpression }
STRLEN =
  notAllowed
  | element STRLEN { SourceLocators, GeneralizedStringExpression }
IsKnown =
  notAllowed
  | element IsKnown {
||||||| .r4854
  | element Concat { SourceLocators, GeneralizedStringExpression* }
ArrayVariable =
  notAllowed
  | element ArrayVariable { NCName }
STRLEN =
  notAllowed
  | element STRLEN { SourceLocators, GeneralizedStringExpression }
Name =
  notAllowed
  | element Name { \string }
BooleanExpression =
  (OR | XOR | AND | NOT)
  | (EQBoolean
     | EQNumeric
     | EQInternal
     | EQString
     | NEBoolean
     | NENumeric
     | NEInternal
     | NEString)
  | (GT | GE | LT | LE)
  | (IsKnown | ALL_KNOWN | ANY_KNOWN)
  | BooleanVariable
  | BooleanValue
Resource =
  notAllowed
  | element Resource {
=======
  | element ArrayRHS { SourceLocators, GeneralizedArrayExpression }
BooleanExpression =
  (OR | XOR | AND | NOT)
  | (EQBoolean
     | EQNumeric
     | EQInternal
     | EQString
     | NEBoolean
     | NENumeric
     | NEInternal
     | NEString)
  | (GT | GE | LT | LE)
  | (IsKnown | ALL_KNOWN | ANY_KNOWN)
  | BooleanVariable
  | BooleanValue
GE =
  notAllowed
  | element GE {
>>>>>>> .r4867
      SourceLocators,
<<<<<<< .mine
      (Expression
       | NodeStateVariable
       | NodeOutcomeVariable
       | NodeCommandHandleVariable)
||||||| .r4854
      (element ResourceName { GeneralizedStringExpression }
       & element ResourcePriority { GeneralizedNumericExpression }
       & element ResourceLowerBound { GeneralizedNumericExpression }?
       & element ResourceUpperBound { GeneralizedNumericExpression }?
       & element ResourceReleaseAtTermination {
           GeneralizedBooleanExpression
         }?)
=======
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
>>>>>>> .r4867
    }
<<<<<<< .mine
EndCondition =
||||||| .r4854
ArrayValue =
=======
REAL_TO_INT =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element EndCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
ROUND =
  notAllowed
  | element ROUND { SourceLocators, GeneralizedNumericExpression }
EQNumeric =
  notAllowed
  | element EQNumeric {
||||||| .r4854
  | element ArrayValue {
=======
  | element REAL_TO_INT { SourceLocators, GeneralizedNumericExpression }
StringVariable =
  notAllowed
  | element StringVariable { NCName }
Arguments =
  notAllowed
  | element Arguments { SourceLocators, Expression+ }
LookupGroup = LookupOnChange | LookupNow
NodeList =
  notAllowed
  | element NodeList { Action* }
NodeTimepointValue =
  notAllowed
  | element NodeTimepointValue {
      SourceLocators, NodeReference, NodeStateValue, Timepoint
    }
MIN =
  notAllowed
  | element MIN {
>>>>>>> .r4867
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression
    }
<<<<<<< .mine
LibraryNodeCall =
||||||| .r4854
Command =
=======
NodeCommandHandleValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element LibraryNodeCall { SourceLocators, NodeId, Alias* }
StringVariable =
  notAllowed
  | element StringVariable { NCName }
||||||| .r4854
  | element Command {
      SourceLocators, ResourceList?, DeclaredVariable?, Name, Arguments?
    }
=======
  | element NodeCommandHandleValue {
      xsd:NMTOKEN "COMMAND_DENIED"
      | xsd:NMTOKEN "COMMAND_ABORTED"
      | xsd:NMTOKEN "COMMAND_ABORT_FAILED"
      | xsd:NMTOKEN "COMMAND_SUCCESS"
      | xsd:NMTOKEN "COMMAND_RCVD_BY_SYSTEM"
      | xsd:NMTOKEN "COMMAND_SENT_TO_SYSTEM"
      | xsd:NMTOKEN "COMMAND_ACCEPTED"
      | xsd:NMTOKEN "COMMAND_FAILED"
    }
>>>>>>> .r4867
In =
  notAllowed
<<<<<<< .mine
  | element BooleanRHS { SourceLocators, GeneralizedBooleanExpression }
StateDeclaration =
||||||| .r4854
  | element BooleanRHS { SourceLocators, GeneralizedBooleanExpression }
SQRT =
=======
  | element In { SourceLocators, (DeclareVariable | DeclareArray)+ }
NodeOutcomeValue =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element StateDeclaration {
      SourceLocators,
      element Name { NCName },
      Return,
      ParameterSpec?
||||||| .r4854
  | element SQRT { SourceLocators, GeneralizedNumericExpression }
NodeStateValue =
  notAllowed
  | element NodeStateValue {
      xsd:NMTOKEN "EXECUTING"
      | xsd:NMTOKEN "FAILING"
      | xsd:NMTOKEN "ITERATION_ENDED"
      | xsd:NMTOKEN "INACTIVE"
      | xsd:NMTOKEN "WAITING"
      | xsd:NMTOKEN "FINISHING"
      | xsd:NMTOKEN "FINISHED"
=======
  | element NodeOutcomeValue {
      xsd:NMTOKEN "SUCCESS"
      | xsd:NMTOKEN "SKIPPED"
      | xsd:NMTOKEN "FAILURE"
      | xsd:NMTOKEN "INTERRUPTED"
>>>>>>> .r4867
    }
<<<<<<< .mine
LookupGroup = LookupOnChange | LookupNow
OR =
||||||| .r4854
OR =
=======
LibraryNodeCall =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element OR { SourceLocators, GeneralizedBooleanExpression* }
RepeatCondition =
||||||| .r4854
  | element OR { SourceLocators, GeneralizedBooleanExpression* }
InOut =
=======
  | element LibraryNodeCall { SourceLocators, NodeId, Alias* }
NodeOutcomeVariable =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element RepeatCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
nonNegativeInteger = xsd:nonNegativeInteger
ArrayMaxSize =
  notAllowed
  | element ArrayMaxSize { SourceLocators, GeneralizedArrayExpression }
Name =
  notAllowed
  | element Name { \string }
Action = Node
Alias =
||||||| .r4854
  | element InOut { SourceLocators, (DeclareVariable | DeclareArray)+ }
Tolerance =
  notAllowed
  | element Tolerance { GeneralizedNumericExpression }
NodeCommandHandleVariable =
  notAllowed
  | element NodeCommandHandleVariable { node-reference }
StateDeclaration =
=======
  | element NodeOutcomeVariable { node-reference }
StateDeclaration =
>>>>>>> .r4867
  notAllowed
  | element Alias {
      SourceLocators,
      element NodeParameter { NCName },
      Expression
    }
GeneralizedStringExpression =
  StringExpression | LookupGroup | ArrayElement
DeclareVariable =
  notAllowed
  | element DeclareVariable {
      SourceLocators,
      element Name { NCName },
      element Type { AtomicTypeValues },
      element InitialValue { Value }?
    }
<<<<<<< .mine
NodeFailureVariable =
||||||| .r4854
EQString =
=======
ANY_KNOWN =
>>>>>>> .r4867
  notAllowed
<<<<<<< .mine
  | element NodeFailureVariable { node-reference }
NEArray =
  notAllowed
  | element NEArray {
||||||| .r4854
  | element EQString {
=======
  | element ANY_KNOWN { SourceLocators, GeneralizedArrayExpression }
EQInternal =
  notAllowed
  | element EQInternal {
>>>>>>> .r4867
      SourceLocators,
<<<<<<< .mine
      GeneralizedArrayExpression,
      GeneralizedArrayExpression
||||||| .r4854
      GeneralizedStringExpression,
      GeneralizedStringExpression
=======
      ((NodeState, NodeState)
       | (NodeOutcome, NodeOutcome)
       | (NodeFailure, NodeFailure)
       | (NodeCommandHandle, NodeCommandHandle))
>>>>>>> .r4867
    }
<<<<<<< .mine
ArraySize =
  notAllowed
  | element ArraySize { SourceLocators, GeneralizedArrayExpression }
PreCondition =
  notAllowed
  | element PreCondition {
      SourceLocators, GeneralizedBooleanExpression
    }
||||||| .r4854
LookupOnChange =
  notAllowed
  | element LookupOnChange {
      SourceLocators, Name, Tolerance?, Arguments?
    }
=======
>>>>>>> .r4867
NodeList =
  notAllowed
<<<<<<< .mine
  | element NodeList { Action* }
||||||| .r4854
  | element NodeRef {
      attribute dir {
        xsd:NMTOKEN "parent"
        | xsd:NMTOKEN "sibling"
        | xsd:NMTOKEN "self"
        | xsd:NMTOKEN "child"
      }?,
      (xsd:NCName | xsd:string "")
    }
SUB =
  notAllowed
  | element SUB {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
    }
=======
  | element NodeRef {
      attribute dir {
        xsd:NMTOKEN "parent"
        | xsd:NMTOKEN "sibling"
        | xsd:NMTOKEN "self"
        | xsd:NMTOKEN "child"
      }?,
      (xsd:NCName | xsd:string "")
    }
ADD =
  notAllowed
  | element ADD {
      SourceLocators,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression,
      GeneralizedNumericExpression*
    }
>>>>>>> .r4867
PlexilPlanAttributes = 
  notAllowed
  | attribute xsi:* { xsd:anyURI }*
