# * Copyright (c) 2006-2020, Universities Space Research Association (USRA).
# *  All rights reserved.
# *
# * Redistribution and use in source and binary forms, with or without
# * modification, are permitted provided that the following conditions are met:
# *     * Redistributions of source code must retain the above copyright
# *       notice, this list of conditions and the following disclaimer.
# *     * Redistributions in binary form must reproduce the above copyright
# *       notice, this list of conditions and the following disclaimer in the
# *       documentation and/or other materials provided with the distribution.
# *     * Neither the name of the Universities Space Research Association nor the
# *       names of its contributors may be used to endorse or promote products
# *       derived from this software without specific prior written permission.
# *
# * THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# * DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
# * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Common elements that are included in several PLEXIL schemas.
# 
# NOTE: this is an incomplete schema, as it doesn't define the following elements
# and types, which differ between Safe PLEXIL, Core PLEXIL, and Extended PLEXIL:
# 
#  Action
#  AtomicTypeValues
#  BooleanExpression
#  DeclaredVariable
#  LookupGroup
#  Name
#  NumericExpression
#  ParameterTypeValues
#  Value
# 
# It is used as an included schema only.
#

default namespace = ""
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"

# The epx attribute indicates an element which is a translation of an
# Extended Plexil construct (i.e. macro).  Its value is the type
# of this construct, a descriptive name identifying its role in
# the expansion of an Extended Plexil construct, or 'aux'
# indicating it is an auxiliary generated element.
attr_epx = attribute epx { xsd:NCName }?
# Attributes identifying the origin of an element in a source
# file or Extended PLEXIL macro.
SourceLocators =
  attr_epx,
  attribute FileName { xsd:string }?,
  attribute LineNo { xsd:integer }?,
  attribute ColNo { xsd:integer }?
# This is the sole root element allowed!
start = starting_PlexilPlan
starting_PlexilPlan =
  element PlexilPlan {
    GlobalDeclarations?,
    ActionGroup,
    SourceLocators,
    # Attempt to imitate rncfix
    attribute * { text }
  }
NodeReference = NodeId | NodeRef
node-reference = NodeReference, SourceLocators
# Allow translators to reason about automatically generated names
NodeId =
  element NodeId {
    xsd:NCName,
    attribute generated { xsd:boolean }?,
    SourceLocators
  }
NodeRef =
  element NodeRef {
    NCNameOrEmpty,
    attribute dir { "parent" | "sibling" | "child" | "self" }?,
    SourceLocators
  }
GlobalDeclarations =
  element GlobalDeclarations {
    (CommandDeclaration?
     | StateDeclaration?
     | LibraryNodeDeclaration?
     | element TimeScalingUnitsSubunits { xsd:integer }?)+,
    SourceLocators
  }
CommandDeclaration =
  element CommandDeclaration {
    element Name { xsd:NCName },
    Return*,
    ParameterSpec?,
    ResourceList?,
    SourceLocators
  }
StateDeclaration =
  element StateDeclaration {
    element Name { xsd:NCName },
    Return,
    ParameterSpec?,
    SourceLocators
  }
LibraryNodeDeclaration =
  element LibraryNodeDeclaration {
    element Name { xsd:NCName },
    Interface?,
    SourceLocators
  }
ParameterSpec =
  Parameter*,
  element AnyParameters { empty }?
Parameter =
  element Parameter {
    element Name { xsd:NCName }?,
    element Type { ParameterTypeValues },
    # MaxSize indicates an array value, Type is the element type
    element MaxSize { xsd:nonNegativeInteger }?,
    SourceLocators
  }
Return =
  element Return {
    # KMD: not sure about the motivation for 'nillable'.  Assuming it
    # is for declaring a void return explicitly.
    element Name { xsd:NCName }?,
    element Type { AtomicTypeValues },
    # MaxSize indicates an array value, Type is the element type
    element MaxSize { xsd:nonNegativeInteger }?,
    SourceLocators
  }
NCNameOrEmpty = xsd:NCName | ("")
# The basis for Node, and various Extended Plexil elements.

# NodeType is defined in the schemata which include this file.
Node = element Node { NodeType }
NodeAttributes =
  attribute NodeType {
    "NodeList"
    | "Command"
    | "Assignment"
    | "Update"
    | "Empty"
    | "LibraryNodeCall"
  },
  SourceLocators
Comment = element Comment { xsd:string, SourceLocators }
NodeBody =
  element NodeBody {
    NodeList | Command | Assignment | Update | LibraryNodeCall
  }
NodeList = element NodeList { ActionGroup*, SourceLocators }
Assume = element Assume { GeneralizedBooleanExpression, SourceLocators }
Desire = element Desire { GeneralizedBooleanExpression, SourceLocators }
Expect = element Expect { GeneralizedBooleanExpression, SourceLocators }
ConditionType = GeneralizedBooleanExpression, SourceLocators
StartCondition = element StartCondition { ConditionType }
RepeatCondition = element RepeatCondition { ConditionType }
PreCondition = element PreCondition { ConditionType }
PostCondition = element PostCondition { ConditionType }
InvariantCondition = element InvariantCondition { ConditionType }
EndCondition = element EndCondition { ConditionType }
ExitCondition = element ExitCondition { ConditionType }
SkipCondition = element SkipCondition { ConditionType }
Interface = element Interface { (In? & InOut?), SourceLocators }
In = element In { (DeclareVariable | DeclareArray)+, SourceLocators }
InOut =
  element InOut { (DeclareVariable | DeclareArray)+, SourceLocators }
ResourceList = element ResourceList { Resource*, SourceLocators }
# FIXME: make these tags less verbose
Resource =
  element Resource {
    (element ResourceName {
       GeneralizedStringExpression, SourceLocators
     }
     & element ResourcePriority {
         GeneralizedNumericExpression, SourceLocators
       }
     & element ResourceLowerBound {
         GeneralizedNumericExpression, SourceLocators
       }?
     & element ResourceUpperBound {
         GeneralizedNumericExpression, SourceLocators
       }?
     & element ResourceReleaseAtTermination {
         GeneralizedBooleanExpression, SourceLocators
       }?),
    SourceLocators
  }
IntegerVariable = element IntegerVariable { xsd:NCName }
RealVariable = element RealVariable { xsd:NCName }
BooleanVariable = element BooleanVariable { xsd:NCName }
StringVariable = element StringVariable { xsd:NCName }
ArrayVariable = element ArrayVariable { xsd:NCName }
DeclareVariable =
  element DeclareVariable {
    element Name { xsd:NCName },
    element Type { AtomicTypeValues },
    element InitialValue {
      (DeclaredVariable | Value), SourceLocators
    }?,
    SourceLocators
  }
DeclareArray =
  element DeclareArray {
    element Name { xsd:NCName },
    element Type { AtomicTypeValues },
    element MaxSize { xsd:nonNegativeInteger }?,
    element InitialValue {
      # backward compatibility for scalar literals
      Value+
      | # preferred new style
        ArrayValue
      | # variable reference
        ArrayVariable
    }?,
    SourceLocators
  }
VariableDeclarations =
  element VariableDeclarations {
    (DeclareVariable | DeclareArray)+, SourceLocators
  }
Command =
  element Command {
    ResourceList?, DeclaredVariable?, Name, Arguments?, SourceLocators
  }
# Expression of any type
Expression =
  BooleanExpression
  | NumericExpression
  | StringExpression
  | ArrayExpression
  | LookupGroup
  | ArrayElement
Arguments = element Arguments { Expression+, SourceLocators }
Update = element Update { Pair*, SourceLocators }
Pair =
  element Pair {
    element Name { xsd:NCName },
    Expression,
    SourceLocators
  }
LibraryNodeCall =
  element LibraryNodeCall { NodeId, Alias*, SourceLocators }
Alias =
  element Alias {
    element NodeParameter { xsd:NCName },
    Expression,
    SourceLocators
  }
IntegerValue = element IntegerValue { xsd:integer }
RealValue = element RealValue { xsd:double }
BooleanValue = element BooleanValue { xsd:boolean }
StringValue = element StringValue { xsd:string }
ArrayValue =
  element ArrayValue {
    (Value+),
    attribute Type { AtomicTypeValues },
    SourceLocators
  }
GeneralizedArrayExpression = ArrayExpression | LookupGroup
ArrayExpression = ArrayValue | ArrayVariable
BooleanRHS =
  element BooleanRHS { GeneralizedBooleanExpression, SourceLocators }
NumericRHS =
  element NumericRHS { (GeneralizedNumericExpression), SourceLocators }
StringRHS =
  element StringRHS { GeneralizedStringExpression, SourceLocators }
ArrayRHS =
  element ArrayRHS { GeneralizedArrayExpression, SourceLocators }
assignment =
  DeclaredVariable,
  (BooleanRHS | NumericRHS | StringRHS | ArrayRHS),
  SourceLocators
Assignment = element Assignment { assignment }
GeneralizedBooleanExpression =
  BooleanExpression | LookupGroup | ArrayElement
LogicalOperator = OR | XOR | AND | NOT
Equality =
  EQBoolean
  | EQNumeric
  | EQInternal
  | EQString
  | EQArray
  | NEBoolean
  | NENumeric
  | NEInternal
  | NEString
  | NEArray
NumericComparison = GT | GE | LT | LE
IsKnown =
  element IsKnown {
    (Expression
     | NodeStateVariable
     | NodeOutcomeVariable
     | NodeCommandHandleVariable),
    SourceLocators
  }
ALL_KNOWN =
  element ALL_KNOWN { GeneralizedArrayExpression, SourceLocators }
ANY_KNOWN =
  element ANY_KNOWN { GeneralizedArrayExpression, SourceLocators }
KnownTest = IsKnown | ALL_KNOWN | ANY_KNOWN
NaryBooleanOperator = GeneralizedBooleanExpression*, SourceLocators
OR = element OR { NaryBooleanOperator }
XOR = element XOR { NaryBooleanOperator }
AND = element AND { NaryBooleanOperator }
NOT = element NOT { GeneralizedBooleanExpression, SourceLocators }
# Numeric comparisons
NumericComparisonType =
  GeneralizedNumericExpression,
  GeneralizedNumericExpression,
  SourceLocators
GT = element GT { NumericComparisonType }
GE = element GE { NumericComparisonType }
LT = element LT { NumericComparisonType }
LE = element LE { NumericComparisonType }
# Generalized equality tests
EQNumeric = element EQNumeric { NumericComparisonType }
NENumeric = element NENumeric { NumericComparisonType }
EQBoolean =
  element EQBoolean {
    GeneralizedBooleanExpression,
    GeneralizedBooleanExpression,
    SourceLocators
  }
EQInternal =
  element EQInternal {
    (NodeState
     | NodeState
     | NodeOutcome
     | NodeOutcome
     | NodeFailure
     | NodeFailure
     | NodeCommandHandle
     | NodeCommandHandle),
    SourceLocators
  }
EQString =
  element EQString {
    GeneralizedStringExpression,
    GeneralizedStringExpression,
    SourceLocators
  }
EQArray =
  element EQArray {
    GeneralizedArrayExpression,
    GeneralizedArrayExpression,
    SourceLocators
  }
NEBoolean =
  element NEBoolean {
    GeneralizedBooleanExpression,
    GeneralizedBooleanExpression,
    SourceLocators
  }
NEInternal =
  element NEInternal {
    (NodeState
     | NodeState
     | NodeOutcome
     | NodeOutcome
     | NodeFailure
     | NodeFailure
     | NodeCommandHandle
     | NodeCommandHandle),
    SourceLocators
  }
NEString =
  element NEString {
    GeneralizedStringExpression,
    GeneralizedStringExpression,
    SourceLocators
  }
NEArray =
  element NEArray {
    GeneralizedArrayExpression,
    GeneralizedArrayExpression,
    SourceLocators
  }
NodeCommandHandleVariable =
  element NodeCommandHandleVariable { node-reference }
NodeCommandHandleValue =
  element NodeCommandHandleValue {
    "COMMAND_SENT_TO_SYSTEM"
    | "COMMAND_ACCEPTED"
    | "COMMAND_DENIED"
    | "COMMAND_RCVD_BY_SYSTEM"
    | "COMMAND_FAILED"
    | "COMMAND_SUCCESS"
    | "COMMAND_ABORTED"
    | "COMMAND_ABORT_FAILED"
  }
NodeCommandHandle = NodeCommandHandleVariable | NodeCommandHandleValue
NodeState = NodeStateVariable | NodeStateValue
NodeStateVariable = element NodeStateVariable { node-reference }
NodeStateValue =
  element NodeStateValue {
    "WAITING"
    | "EXECUTING"
    | "FINISHING"
    | "FAILING"
    | "ITERATION_ENDED"
    | "FINISHED"
    | "INACTIVE"
  }
# Node State Predicates
NodeStatePredicate =
  Executing
  | Finished
  | Inactive
  | IterationEnded
  | Waiting
  | NoChildFailed
Executing = element Executing { node-reference }
Finished = element Finished { node-reference }
Inactive = element Inactive { node-reference }
IterationEnded = element IterationEnded { node-reference }
Waiting = element Waiting { node-reference }
NoChildFailed = element NoChildFailed { node-reference }
NodeOutcome = NodeOutcomeVariable | NodeOutcomeValue
NodeOutcomeVariable = element NodeOutcomeVariable { node-reference }
NodeOutcomeValue =
  element NodeOutcomeValue {
    "SUCCESS" | "FAILURE" | "SKIPPED" | "INTERRUPTED"
  }
# Node Outcome Predicates
NodeOutcomePredicate =
  Failed
  | Skipped
  | Succeeded
    # more to come
    
Failed = element Failed { node-reference }
Skipped = element Skipped { node-reference }
Succeeded = element Succeeded { node-reference }
NodeFailure = NodeFailureVariable | NodeFailureValue
NodeFailureVariable = element NodeFailureVariable { node-reference }
NodeFailureValue =
  element NodeFailureValue {
    "PRE_CONDITION_FAILED"
    | "POST_CONDITION_FAILED"
    | "INVARIANT_CONDITION_FAILED"
    | "PARENT_FAILED"
    | "PARENT_EXITED"
    | "EXITED"
  }
# Node Failure Predicates
NodeFailurePredicate =
  PostconditionFailed
  # more to come
  
PostconditionFailed = element PostconditionFailed { node-reference }
NodeTimepointValue =
  element NodeTimepointValue {
    NodeReference, NodeStateValue, Timepoint, SourceLocators
  }
Timepoint = element Timepoint { "START" | "END" }
GeneralizedStringExpression =
  StringExpression | LookupGroup | ArrayElement
StringExpression = StringVariable | StringValue | StringOperator
# Functions (operators) which take strings and return strings
StringOperator = Concat
Concat = element Concat { GeneralizedStringExpression*, SourceLocators }
# Numeric expressions
GeneralizedNumericExpression =
  NumericExpression | LookupGroup | ArrayElement | STRLEN
# Expressions which take numbers and return numbers
ArithmeticOperator =
  ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | MAX
  | MIN
  | SQRT
  | ABS
  | CEIL
  | FLOOR
  | ROUND
  | TRUNC
  | REAL_TO_INT
UnaryNumericExpression = GeneralizedNumericExpression, SourceLocators
SQRT = element SQRT { UnaryNumericExpression }
ABS = element ABS { UnaryNumericExpression }
CEIL = element CEIL { UnaryNumericExpression }
FLOOR = element FLOOR { UnaryNumericExpression }
ROUND = element ROUND { UnaryNumericExpression }
TRUNC = element TRUNC { UnaryNumericExpression }
REAL_TO_INT = element REAL_TO_INT { UnaryNumericExpression }
BinaryNumericExpression =
  GeneralizedNumericExpression,
  GeneralizedNumericExpression,
  SourceLocators
DIV = element DIV { BinaryNumericExpression }
MOD = element MOD { BinaryNumericExpression }
# N-ary in this case meaning at least 1
NaryNumericExpression = GeneralizedNumericExpression+, SourceLocators
ADD = element ADD { NaryNumericExpression }
SUB = element SUB { NaryNumericExpression }
MUL = element MUL { NaryNumericExpression }
MAX = element MAX { NaryNumericExpression }
MIN = element MIN { NaryNumericExpression }
# Other functions which return numbers
STRLEN = element STRLEN { GeneralizedStringExpression, SourceLocators }
UnaryArrayOperator = GeneralizedArrayExpression, SourceLocators
ArraySize = element ArraySize { UnaryArrayOperator }
ArrayMaxSize = element ArrayMaxSize { UnaryArrayOperator }
# Array reference
ArrayElement =
  element ArrayElement {
    (GeneralizedArrayExpression
     | element Name { xsd:NCName }),
    element Index { GeneralizedNumericExpression, SourceLocators },
    SourceLocators
  }
# Lookups
LookupOnChange =
  element LookupOnChange {
    Name, Tolerance?, Arguments?, SourceLocators
  }
LookupNow = element LookupNow { Name, Arguments?, SourceLocators }
# This is separate because it is used in
# Extended PLEXIL's Lookup and Wait elements
Tolerance =
  element Tolerance { GeneralizedNumericExpression, SourceLocators }
