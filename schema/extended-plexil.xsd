<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE xs:schema PUBLIC "-//W3C//DTD XSD 1.1//EN" "http://www.w3.org/2009/XMLSchema/XMLSchema.dtd" >

<!--
* Copyright (c) 2006-2022, Universities Space Research Association (USRA).
*  All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Universities Space Research Association nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
* TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<!--
This schema extends Core PLEXIL with syntactic sugar: convenient forms 
that are translated into Core PLEXIL for execution (see translate.xsl).
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:xml="http://www.w3.org/XML/1998/namespace"
           xml:lang="en">

  <xs:include schemaLocation='plexil-base.xsd'/>

  <!-- Legal actions in a PlexilPlan -->
  <xs:group name="ActionGroup">
    <xs:choice>
      <xs:element ref="Node"/>
      <xs:element ref="Concurrence"/>
      <xs:element ref="Sequence"/>
      <xs:element ref="CheckedSequence"/>
      <xs:element ref="UncheckedSequence"/>
      <xs:element ref="Try"/>
      <xs:element ref="If"/>
      <xs:element ref="Do"/>
      <xs:element ref="While"/>
      <xs:element ref="For"/>
      <xs:element ref="OnCommand"/>
      <xs:element ref="OnMessage"/>
      <xs:element ref="Wait"/>
      <xs:element ref="SynchronousCommand"/>
    </xs:choice>
  </xs:group>

  <!-- Variation to support SequenceType -->
  <xs:group name="Actions">
    <xs:all>
      <xs:element ref="Node" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="Concurrence" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="Sequence" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="CheckedSequence" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="UncheckedSequence" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="Try" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="If" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="Do" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="While" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="For" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="OnCommand" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="OnMessage" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="Wait" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="SynchronousCommand" minOccurs="0" maxOccurs="unbounded"/>
    </xs:all>
  </xs:group>

  <!-- The NodeId element is optional in Extended PLEXIL Node. -->
  <xs:complexType name="NodeActionType">
    <xs:all>
      <xs:group ref="ActionOptions"/>
      <xs:element ref="NodeId" minOccurs="0"/>
      <xs:element ref="NodeBody" minOccurs="0"/>
    </xs:all>
    <xs:attribute ref="NodeType" use="required"/>
    <xs:attributeGroup ref="SourceLocators"/>
  </xs:complexType>

  <!--
      Support for higher level control structures in Extended PLEXIL
  -->

  <!-- 
       There are certain things I can't find a way to express in XSD
       1.1...  and one of them is an xs:all group of [0,1] occurrences
       followed by a sequence.

       The alternatives for approximating this are ugly: a sequence
       with [0,1] occurrences of these options, which would force an
       unwanted and Procrustean ordering.  Or this kludge.

       An undesired effect of this approach is that it permits
       multiple copies of the elements in the xs:choice.  The Standard
       PLEXIL compiler will never generate such code, and the Exec
       will catch the error if it gets past the Extended PLEXIL
       translator (which is likely).  So we live with it.
  -->
  <xs:group name="ActionOptionChoices">
    <xs:choice>
      <!-- NodeId is optional in Extended PLEXIL -->
      <xs:element ref="NodeId"/>

      <!-- Annotations for static analysis -->
      <xs:element ref="Assume"/>
      <xs:element ref="Desire"/>
      <xs:element ref="Expect"/>

      <!-- Variable declarations -->
      <xs:element ref="VariableDeclarations"/>
      <xs:element ref="Interface"/>
      <xs:element ref="UsingMutex"/>

      <!-- User conditions -->
      <xs:element ref="StartCondition"/>
      <xs:element ref="RepeatCondition"/>
      <xs:element ref="PreCondition"/>
      <xs:element ref="PostCondition"/>
      <xs:element ref="InvariantCondition"/>
      <xs:element ref="EndCondition"/>
      <xs:element ref="ExitCondition"/>
      <xs:element ref="SkipCondition"/>

      <!-- A Comment element has no effect, and passes through the
           translator unscathed -->
      <xs:element ref="Comment"/>

      <!-- Used in resource conflict resolution -->
      <xs:element name="Priority" type="xs:nonNegativeInteger"/>
    </xs:choice>
  </xs:group>

  <!-- When order of subelements is important, e.g. If, For -->
  <xs:complexType name="OrderedActionType">
    <xs:sequence>
      <xs:group ref="ActionOptionChoices" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attributeGroup ref="SourceLocators"/>
  </xs:complexType>

  <!-- When order of subelements is unimportant, e.g. Wait, Sequence -->
  <xs:complexType name="UnorderedActionType">
    <xs:all>
      <xs:group ref="ActionOptions"/>
      <xs:element ref="NodeId" minOccurs="0"/>
    </xs:all>
    <xs:attributeGroup ref="SourceLocators"/>
  </xs:complexType>

  <!-- 
       Sequence forms
  -->

  <xs:complexType name="SequenceType">
    <xs:complexContent>
      <xs:extension base="UnorderedActionType">
        <xs:group ref="Actions"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- All actions in a Concurrence are performed concurrently.  This
       construct translates directly into a NodeList node. -->
  <xs:element name="Concurrence" type="SequenceType"/>

  <!-- Each action in the CheckedSequence is executed in the given
       order.  If all succeed, the CheckedSequence terminates with an
       outcome of SUCCESS.  If any of the action fails, the
       CheckedSequence form terminates with an outcome of FAILURE. -->
  <xs:element name="CheckedSequence" type="SequenceType"/>

  <!-- Each action in the UncheckedSequence is performed in the given
       order, irrespective of their outcomes.  A completed
       UncheckedSequence always has an outcome of SUCCESS. -->
  <xs:element name="UncheckedSequence" type="SequenceType"/>

  <!-- Sequence is an alias for CheckedSequence.  It will be aliased
       to UncheckedSequence in a future release. -->
  <xs:element name="Sequence" type="SequenceType"/>

  <!-- Each action in a Try form is executed in order until one of
       them finishes with an outcome of SUCCESS.  The rest are
       ignored.  The Try form fails if and only if all its actions
       fail. -->
  <xs:element name="Try" type="SequenceType"/>

  <!-- Conditionals and loops -->

  <!-- Common components of the following higher level control
       structures -->

  <xs:element name="Condition">
    <xs:complexType>
      <xs:group ref="GeneralizedBooleanExpression"/>
      <xs:attributeGroup ref="SourceLocators"/>
    </xs:complexType>
  </xs:element>

  <!-- SimpleActionType consists of a single action, with optional
       source locator attributes.  Previously named ActionType. -->
  <xs:complexType name="SimpleActionType">
    <xs:group ref="ActionGroup"/>
    <xs:attributeGroup ref="SourceLocators"/>
  </xs:complexType>

  <xs:element name="Action" type="SimpleActionType"/>

  <!-- Classic If-Then-ElseIf-Else statement -->
  <xs:element name="If">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="OrderedActionType">
          <xs:sequence>
            <xs:element ref="Condition"/>
            <xs:element name="Then" type="SimpleActionType"/>
            <xs:element name="ElseIf" minOccurs="0" maxOccurs="unbounded">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Condition"/>
                  <xs:element name="Then" type="SimpleActionType"/>
                </xs:sequence>
                <xs:attributeGroup ref="SourceLocators"/>
              </xs:complexType>
            </xs:element>
            <xs:element name="Else" type="SimpleActionType" minOccurs="0"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <!-- A classic do-while loop, which maps directly into a single Node
       with a RepeatCondition. -->
  <xs:element name="Do">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="OrderedActionType">
          <xs:sequence>
            <xs:element ref="Action"/>
            <xs:element ref="Condition"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <!-- A classic while loop -->
  <xs:element name="While">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="OrderedActionType">
          <xs:sequence>
            <xs:element ref="Condition"/>
            <xs:element ref="Action"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <!-- A For loop.  First a variable is declared (it must be numeric).
       Next is the while-test condition.  Next is a numeric expression
       used to update the variable (it is typically a function of the
       variable).  Finally, an action to execute. -->
  <xs:element name="For">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="OrderedActionType">
          <xs:sequence>
            <xs:element name="LoopVariable">
              <xs:complexType>
                <xs:all>
                  <xs:element ref="DeclareVariable"/>
                </xs:all>
                <xs:attributeGroup ref="SourceLocators"/>
              </xs:complexType>
            </xs:element>
            <xs:element ref="Condition"/>
            <xs:element name="LoopVariableUpdate">
              <xs:complexType>
                <xs:group ref="GeneralizedNumericExpression"/>
                <xs:attributeGroup ref="SourceLocators"/>
              </xs:complexType>
            </xs:element>
            <xs:element ref="Action"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <!-- Specialized actions -->

  <!-- Wait a specified duration, with optional tolerance for the time lookup -->
  <xs:element name="Wait">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="UnorderedActionType">
          <xs:all>
            <xs:element name="Units">
              <xs:complexType>
                <xs:group ref="GeneralizedNumericExpression"/>
                <xs:attributeGroup ref="SourceLocators"/>
              </xs:complexType>
            </xs:element>
            <xs:element ref="Tolerance" minOccurs="0"/>
          </xs:all>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <!-- Command action that waits for its return value or status handle -->
  <xs:element name="SynchronousCommand">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="UnorderedActionType">
          <xs:all>
            <xs:element ref="Command"/>
            <xs:element name="Checked" minOccurs="0"/>
            <xs:element name="Timeout" minOccurs="0">
              <xs:complexType>
                <xs:sequence>
                  <xs:group ref="GeneralizedNumericExpression"/>
                  <xs:element ref="Tolerance" minOccurs="0"/>
                </xs:sequence>
                <xs:attributeGroup ref="SourceLocators"/>
              </xs:complexType>
            </xs:element>
          </xs:all>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <!-- 
       Support for message passing between agents

       These actions depend upon a specific set of commands and
       lookups implemented by IpcAdapter.
  -->

  <!-- 
       Wait to receive the named command from an external agent.  When
       it is received, perform the action.

       OnCommand utilizes the ReceiveCommand, GetParameter, and
       SendReturnValue commands as implemented in the IpcAdapter.  The
       signature and behavior of these commands was not documented
       until 2021.

       OnCommand may be deprecated in a future release.
  -->
  <xs:element name="OnCommand">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="OrderedActionType">
          <xs:sequence>
            <xs:element ref="Name"/>
            <xs:group ref="ActionGroup" minOccurs="0" maxOccurs="1"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <!-- 
       Wait to receive the given message (a string) from an external
       agent.  Upon receipt, perform the action.

       OnMessage utilizes the ReceiveMessage command, as implemented
       by the IpcAdapter.  The signature and behavior of this command
       were not documented until 2021.

       OnMessage may be deprecated in a future release.
  -->
  <xs:element name="OnMessage">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="OrderedActionType">
          <xs:sequence>
            <xs:element name="Message">
              <xs:complexType>
                <xs:group ref="GeneralizedStringExpression"/>
                <xs:attributeGroup ref="SourceLocators"/>
              </xs:complexType>
            </xs:element>
            <xs:group ref="ActionGroup" minOccurs="0" maxOccurs="1"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <!-- 
       MessageReceived was used for message passing in an earlier PLEXIL release.
       It expands into a wrapper around LookupOnChange.

       MessageReceived is deprecated and will be removed in the next
       major releas of PLEXIL.
  -->
  <xs:element name="MessageReceived">
    <xs:complexType>
      <xs:group ref="GeneralizedStringExpression"/>
      <xs:attributeGroup ref="SourceLocators"/>
    </xs:complexType>
  </xs:element>

  <!-- 
       Conveniences
  -->

  <!-- Node reference predicates, combining tests on node state,
       outcome, and failure type -->

  <!-- TODO: implement these in the Exec, move to plexil-base schema -->

  <!-- NodeStateVariable == ITERATION_ENDED &&
       NodeOutcomeVariable == SUCCESS -->
  <xs:element name="IterationSucceeded" type="node-reference"/>

  <!-- NodeStateVariable == FINISHED &&
       NodeOutcomeVariable == INTERRUPTED -->
  <xs:element name="Interrupted" type="node-reference"/>

  <!-- NodeStateVariable == ITERATION_ENDED &&
       NodeOutcomeVariable == FAILURE -->
  <xs:element name="IterationFailed" type="node-reference"/>

  <!-- NodeStateVariable == FINISHED &&
       NodeOutcomeVariable == FAILURE &&
       NodeFailureVariable == INVARIANT_CONDITION_FAILED -->
  <xs:element name="InvariantFailed" type="node-reference"/>

  <!-- NodeStateVariable == FINISHED &&
       NodeOutcomeVariable == FAILURE &&
       NodeFailureVariable == PARENT_FAILED -->
  <xs:element name="ParentFailed" type="node-reference"/>

  <!-- NodeStateVariable == FINISHED &&
       NodeOutcomeVariable == FAILURE &&
       NodeFailureVariable == PRE_CONDITION_FAILED -->
  <xs:element name="PreconditionFailed" type="node-reference"/>

  <!-- Generalized lookup form expands to LookupNow or LookupOnChange
       as appropriate for the context -->
  <xs:element name="Lookup">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Name"/>
        <xs:element ref="Tolerance" minOccurs="0"/>
        <xs:element ref="Arguments" minOccurs="0"/>
      </xs:sequence>
      <xs:attributeGroup ref="SourceLocators"/>
    </xs:complexType>
  </xs:element>

  <!-- Lookup can be used anywhere LookupNow or LookupOnChange is legal -->
  <xs:group name="LookupGroup">
    <xs:choice>
      <xs:element ref="LookupOnChange"/>
      <xs:element ref="LookupNow"/>
      <xs:element ref="Lookup"/>
    </xs:choice>
  </xs:group>

  <!-- Extended PLEXIL allows the Name of a Command or Lookup to be
       either a literal string value, or a string-valued
       expression. -->
  <xs:element name="Name">
    <xs:complexType>
      <xs:group ref="GeneralizedStringExpression"/>
      <xs:attributeGroup ref="SourceLocators"/>
    </xs:complexType>
  </xs:element>

  <!-- BooleanExpression adds the new node predicates -->
  <xs:group name="BooleanExpression">
    <xs:choice>
      <xs:element ref="BooleanVariable"/>
      <xs:element ref="BooleanValue"/>
	  <xs:group ref="LogicalOperator"/>
	  <xs:group ref="Equality"/>
	  <xs:group ref="NumericComparison"/>
      <xs:group ref="KnownTest"/>
      <xs:group ref="NodeStatePredicate"/>
      <xs:group ref="NodeOutcomePredicate"/>
      <xs:group ref="NodeFailurePredicate"/>

      <!-- New node predicates -->
      <xs:element ref="IterationSucceeded"/>
      <xs:element ref="Interrupted"/>
      <xs:element ref="IterationFailed"/>
      <xs:element ref="InvariantFailed"/>
      <xs:element ref="ParentFailed"/>
      <xs:element ref="PreconditionFailed"/>

      <!-- MessageReceived macro (DEPRECATED) -->
      <xs:element ref="MessageReceived"/>
    </xs:choice>
  </xs:group>

  <!-- 
       Date and duration
  -->

  <!-- DateValue accepts ISO 8601 date values -->
  <xs:element name="DateValue">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:dateTime">
	      <xs:attributeGroup ref="SourceLocators"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <!-- DurationValue accepts ISO 8601 duration values -->
  <xs:element name="DurationValue">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:duration">
	      <xs:attributeGroup ref="SourceLocators"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <!-- Date and Duration typed variables -->
  <xs:element name="DurationVariable" type="xs:NCName"/>
  <xs:element name="DateVariable" type="xs:NCName"/>

  <!-- Date and duration values and variables are legal numeric expressions -->
  <xs:group name="NumericExpression">
    <xs:choice>
      <xs:group ref="ArithmeticOperator"/>
      <xs:element ref="IntegerValue"/>
      <xs:element ref="IntegerVariable"/>
      <xs:element ref="RealValue"/>
      <xs:element ref="RealVariable"/>
      <xs:element ref="DateValue"/>
      <xs:element ref="DateVariable"/>
      <xs:element ref="DurationValue"/>
      <xs:element ref="DurationVariable"/>
      <xs:element ref="NodeTimepointValue"/>
      <!-- array attributes -->
      <xs:element ref="ArraySize"/>
      <xs:element ref="ArrayMaxSize"/>
    </xs:choice>
  </xs:group>

  <!-- DateVariable and DurationVariable can be used just like other
       variables. -->
  <xs:group name="DeclaredVariable">
    <xs:choice>
      <xs:element ref="IntegerVariable"/>
      <xs:element ref="RealVariable"/>
      <xs:element ref="BooleanVariable"/>
      <xs:element ref="StringVariable"/>
      <xs:element ref="DateVariable"/>
      <xs:element ref="DurationVariable"/>
      <xs:element ref="ArrayVariable"/>
      <xs:element ref="ArrayElement"/>
    </xs:choice>
  </xs:group>

  <!-- Legal scalar literal values -->
  <!-- Note: ArrayValue is not included here because arrays
       are handled independently (and NOT supported in places
       were Value is) -->
  <xs:group name="Value">
    <xs:choice>
      <xs:element ref="IntegerValue"/>
      <xs:element ref="RealValue"/>
      <xs:element ref="BooleanValue"/>
      <xs:element ref="StringValue"/>
      <xs:element ref="DateValue"/>
      <xs:element ref="DurationValue"/>
    </xs:choice>
  </xs:group>

  <!-- Schema types -->

  <!-- AtomicTypeValues are legal types names in DeclareVariable,
       DeclareArray, the Type attribute of ArrayValue, and Return
       elements of CommandDeclaration and StateDeclaration.

       Extended PLEXIL adds Date and Duration to the legal types. -->
  <xs:simpleType name="AtomicTypeValues">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Integer"/>
      <xs:enumeration value="Real"/>
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="String"/>
      <xs:enumeration value="Date"/>
      <xs:enumeration value="Duration"/>
    </xs:restriction>
  </xs:simpleType>

  <!-- Legal types in parameter declarations include all of atomic
       type values, plus the "Any" type. -->
  <xs:simpleType name="ParameterTypeValues">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Integer"/>
      <xs:enumeration value="Real"/>
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="String"/>
      <xs:enumeration value="Date"/>
      <xs:enumeration value="Duration"/>
      <xs:enumeration value="Any"/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
