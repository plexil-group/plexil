<?xml version="1.0" encoding="UTF-8"?>

<!--
* Copyright (c) 2006-2010, Universities Space Research Association (USRA).
*  All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Universities Space Research Association nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
* TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<!--
     This schema extends Core PLEXIL with syntactic sugar: convenient forms 
     that are translated into Core PLEXIL for execution.
-->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xml:lang="en">
  <xsd:include schemaLocation='core-plexil.xsd'/>

  <!-- We extend Action and BooleanExpression to include the forms in
       this file.  -->

  <xsd:redefine schemaLocation='plexil-base.xsd'>
    <xsd:group name="Action">
      <xsd:choice>
        <xsd:element ref="Node"/>
        <xsd:element ref="Sequence"/>
        <xsd:element ref="Concurrence"/>
        <xsd:element ref="UncheckedSequence"/>
        <xsd:element ref="Try"/>
        <xsd:element ref="If"/>
        <xsd:element ref="While"/>
        <xsd:element ref="For"/>
        <xsd:element ref="OnCommand"/>
        <xsd:element ref="OnMessage"/>
      </xsd:choice>
    </xsd:group>
    <xsd:group name="BooleanExpression">
      <xsd:choice>
        <xsd:element ref="OR"/>
        <xsd:element ref="XOR"/>
        <xsd:element ref="AND"/>
        <xsd:element ref="NOT"/>
        <xsd:element ref="IsKnown"/>
        <xsd:element ref="GT"/>
        <xsd:element ref="GE"/>
        <xsd:element ref="LT"/>
        <xsd:element ref="LE"/>
        <xsd:element ref="EQBoolean"/>
        <xsd:element ref="EQNumeric"/>
        <xsd:element ref="EQInternal"/>
        <xsd:element ref="EQString"/>
        <xsd:element ref="NEBoolean"/>
        <xsd:element ref="NENumeric"/>
        <xsd:element ref="NEInternal"/>
        <xsd:element ref="NEString"/>
        <xsd:element ref="BooleanVariable"/>
        <xsd:element ref="BooleanValue"/>
        <xsd:group ref="Lookup"/>
        <xsd:element ref="ArrayElement"/>
        <xsd:element ref="Finished"/>
        <xsd:element ref="IterationEnded"/>
        <xsd:element ref="Executing"/>
        <xsd:element ref="Waiting"/>
        <xsd:element ref="Inactive"/>
        <xsd:element ref="Succeeded"/>
        <xsd:element ref="Failed"/>
        <xsd:element ref="Skipped"/>
        <xsd:element ref="InvariantFailed"/>
        <xsd:element ref="PreconditionFailed"/>
        <xsd:element ref="PostconditionFailed"/>
        <xsd:element ref="ParentFailed"/>
        <xsd:element ref="MessageReceived"/>
      </xsd:choice>
    </xsd:group>
  </xsd:redefine>

  <!-- Sequence forms -->

  <xsd:group name="SequenceType">
    <xsd:sequence>
      <xsd:all>
        <xsd:element ref="NodeId" minOccurs="0"/>
        <xsd:element name="Comment" type="xsd:string" minOccurs="0"/>
        <xsd:element ref="StartCondition" minOccurs="0"/>
        <xsd:element ref="RepeatCondition" minOccurs="0"/>
        <xsd:element ref="PreCondition" minOccurs="0"/>
        <xsd:element ref="PostCondition" minOccurs="0"/>
        <xsd:element ref="InvariantCondition" minOccurs="0"/>
        <xsd:element ref="EndCondition" minOccurs="0"/>
        <xsd:element ref="SkipCondition" minOccurs="0"/>
        <xsd:element name="Priority" type="xsd:nonNegativeInteger" minOccurs="0"/>
        <xsd:element name="Permissions" type="xsd:string" minOccurs="0"/>
        <xsd:element ref="Interface" minOccurs="0"/>
        <xsd:element ref="VariableDeclarations" minOccurs="0"/>
      </xsd:all>
      <xsd:group ref="Action" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:group>

  <!-- Actions are performed concurrently.  This is just a List Node.
  -->
  <xsd:element name="Concurrence">
    <xsd:complexType>
      <xsd:attribute ref="FileName"/>
      <xsd:attribute ref="LineNo"/>
      <xsd:attribute ref="ColNo"/>
      <xsd:all>
        <xsd:group ref="SequenceType"/>
      </xsd:all>
    </xsd:complexType>
  </xsd:element>

  <!-- Each action in the sequence is performed in the given order.  If
       one fails, the Sequence form terminates with failure.
  -->
  <xsd:element name="Sequence">
    <xsd:complexType>
      <xsd:attribute ref="FileName"/>
      <xsd:attribute ref="LineNo"/>
      <xsd:attribute ref="ColNo"/>
      <xsd:all>
        <xsd:group ref="SequenceType"/>
      </xsd:all>
    </xsd:complexType>
  </xsd:element>

<!-- Like Sequence, except the actions are not checked for success.
     They will all be executed -->
  <xsd:element name="UncheckedSequence">
    <xsd:complexType>
      <xsd:attribute ref="FileName"/>
      <xsd:attribute ref="LineNo"/>
      <xsd:attribute ref="ColNo"/>
      <xsd:all>
        <xsd:group ref="SequenceType"/>
      </xsd:all>
    </xsd:complexType>
  </xsd:element>

  <!-- Each action in the sequence is performed in turn, until one of
       them succeeds; the rest are ignored.  The Try form fails if and
       only if all its actions fail. -->
  <xsd:element name="Try">
    <xsd:complexType>
      <xsd:attribute ref="FileName"/>
      <xsd:attribute ref="LineNo"/>
      <xsd:attribute ref="ColNo"/>
      <xsd:all>
        <xsd:group ref="SequenceType"/>
      </xsd:all>
    </xsd:complexType>
  </xsd:element>


  <!-- Conditionals and loops -->

  <!-- A classic if-then-else with optional else. -->
  <xsd:element name="If">
    <xsd:complexType>
      <xsd:attribute ref="FileName"/>
      <xsd:attribute ref="LineNo"/>
      <xsd:attribute ref="ColNo"/>
      <xsd:sequence>
        <xsd:all>
          <xsd:element ref="NodeId" minOccurs="0"/>
          <xsd:element name="Comment" type="xsd:string" minOccurs="0"/>
          <xsd:element ref="StartCondition" minOccurs="0"/>
          <xsd:element ref="RepeatCondition" minOccurs="0"/>
          <xsd:element ref="PreCondition" minOccurs="0"/>
          <xsd:element ref="PostCondition" minOccurs="0"/>
          <xsd:element ref="InvariantCondition" minOccurs="0"/>
          <xsd:element ref="EndCondition" minOccurs="0"/>
          <xsd:element ref="SkipCondition" minOccurs="0"/>
          <xsd:element name="Priority" type="xsd:nonNegativeInteger" minOccurs="0"/>
          <xsd:element name="Permissions" type="xsd:string" minOccurs="0"/>
          <xsd:element ref="Interface" minOccurs="0"/>
          <xsd:element ref="VariableDeclarations" minOccurs="0"/>
        </xsd:all>
        <xsd:element name="Condition">
          <xsd:complexType>
            <xsd:group ref="BooleanExpression"/>
          </xsd:complexType>
        </xsd:element>
        <xsd:element name="Then">
          <xsd:complexType>
            <xsd:all>
              <xsd:group ref="Action"/>
            </xsd:all>
          </xsd:complexType>
        </xsd:element>
        <xsd:element name="Else" minOccurs="0">
          <xsd:complexType>
            <xsd:all>
              <xsd:group ref="Action"/>
            </xsd:all>
          </xsd:complexType>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

  <!-- A classic while loop -->
  <xsd:element name="While">
    <xsd:complexType>
      <xsd:attribute ref="FileName"/>
      <xsd:attribute ref="LineNo"/>
      <xsd:attribute ref="ColNo"/>
      <xsd:sequence>
        <xsd:all>
          <xsd:element ref="NodeId" minOccurs="0"/>
          <xsd:element name="Comment" type="xsd:string" minOccurs="0"/>
          <xsd:element ref="StartCondition" minOccurs="0"/>
          <xsd:element ref="RepeatCondition" minOccurs="0"/>
          <xsd:element ref="PreCondition" minOccurs="0"/>
          <xsd:element ref="PostCondition" minOccurs="0"/>
          <xsd:element ref="InvariantCondition" minOccurs="0"/>
          <xsd:element ref="EndCondition" minOccurs="0"/>
          <xsd:element ref="SkipCondition" minOccurs="0"/>
          <xsd:element name="Priority" type="xsd:nonNegativeInteger" minOccurs="0"/>
          <xsd:element name="Permissions" type="xsd:string" minOccurs="0"/>
          <xsd:element ref="Interface" minOccurs="0"/>
          <xsd:element ref="VariableDeclarations" minOccurs="0"/>
        </xsd:all>
        <xsd:element name="Condition">
          <xsd:complexType>
            <xsd:group ref="BooleanExpression"/>
          </xsd:complexType>
        </xsd:element>
        <xsd:element name="Action">
          <xsd:complexType>
            <xsd:all>
              <xsd:group ref="Action"/>
            </xsd:all>
          </xsd:complexType>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

<!-- A For loop.  First a variable is declared (it must be numeric).
     Next is a boolean expression that determines when to keep the loop
     going.  Next is a numeric expression used to update the variable
     (it is typically a function of the variable).  Finally, actions
     to execute. -->
  <xsd:element name="For">
    <xsd:complexType>
      <xsd:attribute ref="FileName"/>
      <xsd:attribute ref="LineNo"/>
      <xsd:attribute ref="ColNo"/>
      <xsd:sequence>
        <xsd:all>
          <xsd:element ref="NodeId" minOccurs="0"/>
          <xsd:element name="Comment" type="xsd:string" minOccurs="0"/>
          <xsd:element ref="StartCondition" minOccurs="0"/>
          <xsd:element ref="RepeatCondition" minOccurs="0"/>
          <xsd:element ref="PreCondition" minOccurs="0"/>
          <xsd:element ref="PostCondition" minOccurs="0"/>
          <xsd:element ref="InvariantCondition" minOccurs="0"/>
          <xsd:element ref="EndCondition" minOccurs="0"/>
          <xsd:element ref="SkipCondition" minOccurs="0"/>
          <xsd:element name="Priority" type="xsd:nonNegativeInteger" minOccurs="0"/>
          <xsd:element name="Permissions" type="xsd:string" minOccurs="0"/>
          <xsd:element ref="Interface" minOccurs="0"/>
          <xsd:element ref="VariableDeclarations" minOccurs="0"/>
        </xsd:all>
        <xsd:element name= "LoopVariable">
          <xsd:complexType>
            <xsd:all>
              <xsd:element ref="DeclareVariable"/>
            </xsd:all>
          </xsd:complexType>
        </xsd:element>
        <xsd:element name= "Condition">
          <xsd:complexType>
            <xsd:group ref="BooleanExpression"/>
          </xsd:complexType>
        </xsd:element>
        <xsd:element name= "LoopVariableUpdate">
          <xsd:complexType>
            <xsd:group ref="NumericExpression"/>
          </xsd:complexType>
        </xsd:element>
        <xsd:element name= "Action">
          <xsd:complexType>
            <xsd:group ref="Action"/>
          </xsd:complexType>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

  <!-- Node Predicates -->

  <xsd:element name="Finished" type="node-reference"/>
  <xsd:element name="IterationEnded" type="node-reference"/>
  <xsd:element name="Executing" type="node-reference"/>
  <xsd:element name="Waiting" type="node-reference"/>
  <xsd:element name="Inactive" type="node-reference"/>
  <xsd:element name="Succeeded" type="node-reference"/>
  <xsd:element name="IterationSucceeded" type="node-reference"/>
  <xsd:element name="Failed" type="node-reference"/>
  <xsd:element name="IterationFailed" type="node-reference"/>
  <xsd:element name="Skipped" type="node-reference"/>
  <xsd:element name="InvariantFailed" type="node-reference"/>
  <xsd:element name="PreconditionFailed" type="node-reference"/>
  <xsd:element name="PostconditionFailed" type="node-reference"/>
  <xsd:element name="ParentFailed" type="node-reference"/>

  <!-- Support for message passing between executives -->

  <!-- Deprecated -->
  <xsd:element name="MessageReceived">
    <xsd:complexType>
      <xsd:group ref="StringExpression"/>
    </xsd:complexType>
  </xsd:element>

  <!-- Under development (not yet supported) -->

  <xsd:element name="OnCommand">
    <xsd:complexType>
      <xsd:attribute ref="FileName"/>
      <xsd:attribute ref="LineNo"/>
      <xsd:attribute ref="ColNo"/>
      <xsd:all>
        <xsd:element name="NodeId"/>
        <xsd:element ref="Name"/>
        <xsd:element ref="DeclareVariable" minOccurs="0" maxOccurs="unbounded"/>
        <xsd:group ref="Action" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:all>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="OnMessage">
    <xsd:complexType>
      <xsd:attribute ref="FileName"/>
      <xsd:attribute ref="LineNo"/>
      <xsd:attribute ref="ColNo"/>
      <xsd:all>
        <xsd:element name="NodeId"/>
        <xsd:element name="Message" type="xsd:string"/>
        <xsd:group ref="Action" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:all>
    </xsd:complexType>
  </xsd:element>

</xsd:schema>
