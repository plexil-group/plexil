#!/bin/sh

# Copyright (c) 2006-2022, Universities Space Research Association (USRA).
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Universities Space Research Association nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Requires bash due to use of PIPESTATUS environment variable

# Generate a .ple (PLEXIL source) file from a .plp file (file containing PLEXIL
# source plus any C preprocessor macros).  Generates the target file in the same
# directory as the source file, overwriting any existing file.

# NOTE: Uses the C preprocessor to realize macros within PLEXIL.  This is a
# crude, though effective, approach that has been used on several prior PLEXIL
# projects.

set -e

usage()
{
    cat <<EOF
Usage: $(basename "$0") [options...] input-file
Options include:
  -o file  Name of output file
            (default: input-file with .plp replaced by .ple)
  -I dir   Include file directory
EOF
}

if [ $# -lt 1 ]
then
    usage
    exit 2
fi

# Process arguments
while ( echo "$1" | grep -q -e '^-.*' )
do
    case "$1" in
        -h | -help | --help )
            usage
            exit 0
            ;;
        
        -o )
            output_file="$2"
            shift
            ;;

        -I )
            pp_args="${pp_args:+"$pp_args" }$1 $2"
            shift
            ;;

        -I*)
            pp_args="${pp_args:+"$pp_args" }$1"
            ;;

        * )
            echo "$0: Unrecognized option $1" >&2
            usage >&2
            exit 2
            ;;
    esac
    shift
done

input_file="$1"
shift

# Presumes a GCC-compatible compiler
run_cpp()
{
    cc -E -x c -nostdinc "$@"
}

# NOTE: -t option differs in interpretation between macOS, GNU coreutils,
# is deprecated in GNU coreutils
cpp_outfile="$(mktemp -t "$(basename "$input_file")_XXXXXX")"
if [ -z "$output_file" ]
then
    output_file="$(dirname "$input_file")/$(basename "$input_file" .plp).ple"
fi

set +e
# shellcheck disable=SC2086
run_cpp $pp_args "$input_file" > "$cpp_outfile"
cpp_status=$?

if [ "$cpp_status" = '0' ]
then
    printf '// Generated by plexilpp -- do not edit!\n' > "$output_file"
    grep -v '^#' < "$cpp_outfile" >> "$output_file" || true
fi
set -e

# Clean up
rm -f "$cpp_outfile"

exit "$cpp_status"
