#! /bin/bash

# Copyright (c) 2006-2014, Universities Space Research Association (USRA).
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Universities Space Research Association nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#Validate file
valid()
{
  if [ ! -e $1 ] && [ $quiet = 1 ]
    then
      echo "WARNING: $1 does not exist"
  fi
  return
}

warn()
{
   if [ $quiet = 1 ]
     then
       echo "$1"
   fi
}

#There are ranges below 22000 which netstat does not detect
portscan()
{
for((j=65400;j<=65420;++j))
do
if [ "$platform" = "Darwin" ]
  then
    tport=`netstat -a | grep $j`
  else
    tport=`netstat -l | grep $j`
fi    
    if [ "${tport:-FALSE}" = FALSE ] && [ ! -f /tmp/.Luv_$j ] ; then
    	echo "-n $j"
	return
    fi    
done
return
}
usage="Usage: plexilexec [-p <plan>] [-s] [-v [-h <hostname>] [-n <portnumber>] [-b]] [-d <debug file>] \
[-ch] [-c <interface config>] [-l <library>]* \n\n\
For more options enter 'plexilexec -help'"

# An optional environment variable PLEXIL_EXECUTABLE names an alternate executable.

help=" Other options:\n\
\n\
 -p | -plan <plan> \n\
\t	specify PLEXIL plan (required) \n\
 -c | -config <config> \n\
\t 	specifies an interface configuration file (defaulting to interface-config.xml)\n\
 -q | -quiet \n\
\t 	suppresses a leading printed summary and default debug messages.\n\
 -v | -viewer \n\
\t 	requests that plan state be transmitted to the Plexil viewer.\n\
 -h | -hostname <name> \n\
\t 	hostname of viewer\n\
 -n | -port <number> \n\
\t 	portnumber of viewer\n\
 -b | -blocking \n\
\t 	enables breakpoints in viewer (recommended)\n\
 -d | -debug <file name> \n\
\t 	debug file (default is Debug.cfg)\n\
 -ch | -check \n\
\t 	runs the PLEXIL static checker prior to executing plan\n\
 -l | -library <file name>\n\
\t 	specifies a plan library (.plx file)\n\
 -L | -libraryPath <directory name>\n\
\t 	specifies a directory for finding plan library files\n\
-? | -help \n\
\t	shows this message of options"
# -a used only for viewer acquire PID

if [ -z "$PLEXIL_HOME" ]
then
    echo Error: Please set environment variable PLEXIL_HOME
    echo to the full pathname of your 'plexil' or 'trunk' directory.
    echo Exiting.
    exit 1
fi

. $PLEXIL_HOME/scripts/plexil-setup.sh

#separate command-line from plexexec output
echo

if [ $PLEXIL_EXECUTABLE ]
then
    prog=$PLEXIL_EXECUTABLE
elif [ -f $PLEXIL_HOME/bin/universalExec ]
then
    prog=$PLEXIL_HOME/bin/universalExec
else
    echo "Error: Plexil executable not found, aborting"
    exit 1
fi

$PLEXIL_HOME/scripts/plexil-check-prog $prog

current_config="interface-config.xml" #current directory config
default_config_path="${PLEXIL_HOME}/examples" #default config location
default_config_name="dummy-config.xml"
default_config="${default_config_path}/${default_config_name}" 

platform=`uname`
no_plan=0 #assume plan required
quiet=1 #quiet default
plan_nm="" #plan name
plan_cmd="" #plan command
config_nm="" #interface config name
config_cmd="" #interface config command
libraries="" #library files
library_dirs="" #library files
debug_file="" #debug file
check="false" #run static checker
DEFAULT_PORT=9787
DEFAULT_HOST=127.0.0.1

if [ ! $1 ]
  then
  echo -e $usage
  exit 1
fi

if [ $# = 1 ] && [ $* = "-v" ] ; then
  plexil
  exit 1
fi

for i in $*
do
    case $1 in
        -quiet | -q ) quiet=0;;	
	-p | -plan )
	shift
	plan_nm=$1	
	plan_cmd="-p $plan_nm";;
	-c | -config )
	shift
	config_nm=$1	
	config_cmd="-c $config_nm";;
	-l | -library ) shift
	valid $1	
	libraries="$libraries -l $1";;
	-L | -libraryPath ) shift
	valid $1	
	library_dirs="$library_dirs -L $1";;
	-d | -debug ) shift
	valid $1
	debug_file="-d $1";;
	-v | -viewer ) viewer="-v";;	#viewer listener enabled	
	-h | -hostname ) shift
	host_in="-h $1";;	#viewer host name
	-n | -port ) shift
	port_in="-n $1"
	    skip=1;;	#viewer port
	-b | -blocking ) block="-b";;	#enable viewer break point	
	-ch | -check ) check="true";;	
	-a ) automate="true";;
	-help ) echo -e $help
	  exit 2;;
	-? ) echo 'Error: missing argument for option' $1
	  echo -e $usage
	  exit 2;;  
    esac
    shift
done

# Check the plan's existence
if [ -z "$plan_nm" ] 
  then
    no_plan=1
fi    

# Check if user typed invalid plan
if [ ! -e "$plan_nm" ] && [ "$no_plan" = 0 ]
  then
        echo Error: Plan $plan_nm, does not exist.
        exit 1    
fi

# Redefine current path config to look for dummy config on current path
if [ -z "$config_nm" ] || [ ! -e "$config_nm" ]
   then
        if [ ! -e "$current_config" ] ; then
	  current_config=$default_config_name
	fi
fi

# Check the config's existence
if [ -z "$config_nm" ] || [ ! -e "$config_nm" ]
  then  
  if [ -e "$current_config" ]
    then   
    warn "Warning: using local config: $current_config"
    config_nm=$current_config
    #use default blank config if plan is loaded
    elif [ -e "$default_config" ] && [ -e "$plan_nm" ]
      then      
        default_msg=": $config_nm,"
        warn "Error: No config defined or Config${config_nm:+$default_msg} does not exist."
        warn "Warning: using default config: $default_config"
        config_nm=$default_config
	#prevent idle exec from default blank config call
    elif [ $no_plan = 1 ]
      then
          echo Error: No config defined or on current path and no plan.
          exit 1
    else 
      echo Error: Default config $default_config does not exist.
      exit 1
  fi  
  config_cmd="-c $config_nm"
fi

#host workaround to skip pass thru check
if [ -n "$host_in" ]
  then
  skip=""
fi

# Check pass thru port into viewer
if [ "$viewer" = "-v" ] && [ "$skip" = "1" ]
  then
  temphelper=$port_in  
  if [ "${port_in//[^0-9]/}" -lt 1024 ] && [ $quiet = 1 ] ; then
    echo "Warning: ${port_in//[^0-9]/} is within frequently used port range, usage of this port is not recommended"
  fi
  if [ "$platform" = "Darwin" ]
  then
    testOpen=`netstat -a | grep ${temphelper//[^0-9]}`
  else
    testOpen=`netstat -l | grep ${temphelper//[^0-9]}`
  fi
  if [ -z "$testOpen" ] ; then
      warn "Warning: script may not detect ports listening < 22000"      
    if [ ${temphelper//[^0-9]} -gt 22000 ] ; then
      echo "local Viewer is not listening on ${temphelper//[^0-9]}, exiting"
      exit 1
    fi
  fi
fi

#host re-enable to pass check
if [ -n "$host_in" ]
  then
  skip=1
fi
  
# Check for port number
if [ "$viewer" = "-v" ] ; then
  host=${host_in:="-h $DEFAULT_HOST"}
  port=${port_in:=`portscan`}
    if [ -z "$port" ] ; then
      echo "Exceeds Maximum number of allowable viewer instances.  Please close
      an instance prior to execution"
      exit 1
  fi
  if [ -z "$skip" ] ; then
    plexil ${port//[^0-9]/}
    until [ -f /tmp/.Luv_${port//[^0-9]/} ]
      do
	:
    done    
    sleep 1
  elif [ -z "$automate" ] ; then
    if [ ! -f /tmp/.Luv_${port//[^0-9]/} ] && [ $quiet = 1 ] ; then
      echo "Warning: Viewer is not listening on port ${port//[^0-9]/}"
    fi
  fi      
fi

if [ ! "$viewer" = "-v" ] && [ "$port_in" ] ; then
  echo "Error: -n option requires Viewer, please add -v option"
  exit 1
fi

# Run default debug
if [ -z "$debug_file" ] && [ $quiet = 1 ]
  then
    debug_file="-d Debug.cfg"
fi

# Check plan for errors
if [ "$check" = "true" ] && [ -f $PLEXIL_HOME/scripts/checkPlexil ]
  then 
       echo "Checking Plan..."
       $PLEXIL_HOME/scripts/checkPlexil $plan_nm
       if [ ! -e "$plan_nm" ] && [ $? -gt 0 ]
         then
	   echo Error: $plan_nm, contains runtime error
           exit 1
	fi
    elif [ ! -f $PLEXIL_HOME/scripts/checkPlexil ]
      then
	echo Error: $PLEXIL_HOME/scripts/checkPlexil not found.	
	exit 1
fi  

# Print summary if desired
if [ $quiet -eq 1 ] 
  then
    echo Running executive from $PLEXIL_HOME
    echo "  Plan:      $plan_nm"
    echo "  Configuration:    $config_nm"
    echo "  Libraries: $libraries"
    echo "  Library directories: $library_dirs"
    echo "  PORT:      ${port//[^0-9]/}"    
    echo
fi

if [ "$automate" = "true" ]
then
    echo "RUN_UE_PID$$"
fi
exec $prog $plan_cmd $config_cmd $debug_file $viewer $host $port $block $library_dirs $libraries
