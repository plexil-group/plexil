#! /bin/sh -e

# Copyright (c) 2006-2021, Universities Space Research Association (USRA).
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Universities Space Research Association nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#
# There are 3 primary use cases for this script:
# 1. User wants to run the Universal Exec from a local Viewer.
# 2. User wants to run the UE, without a local Viewer
#    (but possibly with a remote one).
# 3. Viewer is running the UE on behalf of a user.
#
# Case 1 does error checking on the supplied arguments and passes them off
# to the Viewer.
# Case 2 does error checking on the arguments and runs the UE directly.
# Case 3 presumes the arguments are correct and runs the UE directly.
#

# An optional environment variable PLEXIL_EXECUTABLE names an alternate executable.

guess_plexil_home()
{
    # This script file is expected to be in $PLEXIL_HOME/script
    cd "$(dirname "$(dirname "$(command -v "$0")")")" && pwd -P
}

if [ -z "$PLEXIL_HOME" ]
then
    PLEXIL_HOME="$(guess_plexil_home)"
    export PLEXIL_HOME
    echo "Defaulting PLEXIL_HOME to $PLEXIL_HOME"
fi

if [ ! -r "$PLEXIL_HOME/scripts/plexil-setup.sh" ]
then
    echo "$(basename "$0"): Environment variable PLEXIL_HOME is set incorrectly." >&2
    echo 'Please set it to the full pathname of the PLEXIL source directory' >&2
    exit 1
fi

export PLEXIL_HOME
# shellcheck source=./plexil-setup.sh
. "$PLEXIL_HOME"/scripts/plexil-setup.sh

usage()
{
    cat <<EOF
Usage:
    plexilexec [-p <plan>] [-c <interface config>] [-d <debug file>] [-L <library dir>]* [-l <library>]* [-v [-h <hostname>] [-n <portnumber>] [-b]] [-a] [-ch] [-q]

For more options enter '$(basename "$0") -help'

EOF
}

help()
{
    cat <<EOF
Usage:
    plexilexec [-p <plan>] [-c <interface config>] [-d <debug file>] [-L <library dir>]* [-l <library>]* [-v [-h <hostname>] [-n <portnumber>] [-b]] [-a] [-ch] [-q]

 Options:
 -help 
    displays this message
 -p | -plan <plan>
    The plan to run
 -c | -config <config> 
    Interface configuration file (default interface-config.xml) 
 -d | -debug <file name> 
    Debug configuration file (default is Debug.cfg) 
 -L | -libraryPath <directory name> 
    A directory to search for plan library files (option may be repeated) 
 -l | -library <file name> 
    A plan library to load; may be node name or filename (option may be repeated) 
 -q | -quiet 
    Minimize output 
 -v | -viewer 
    Starts the Plexil Viewer 
 -b | -blocking 
    Enables breakpoints in Viewer 
 -h | -hostname <name> 
    Name of remote host where Viewer is running
 -n | -port <number> 
    Port number to use for Viewer 
 -ch | -check 
    Runs the PLEXIL static checker prior to executing plan 
 -a | -autorun 
    Runs the specified plan immediately at Viewer startup 
 --for-viewer 
    Runs the exec with the supplied options, without checking them, and without starting the Viewer. 
    Intended for use by the Plexil Viewer or other scripts.
EOF
}

# Source command parsing helper functions
# shellcheck source=./script-utils.sh
. "$PLEXIL_HOME"/scripts/script-utils.sh

summarize()
{
    echo "Running executive from $PLEXIL_HOME"
    if [ -n "$plan_nm" ]
    then
        echo "  Plan:           $plan_nm"
    else
        echo "  No plan"
    fi
    echo "  Configuration:  $config_nm"
    if [ -n "$library_dirs" ]
    then
        echo "  Library path:   $library_dirs"
    fi
    if [ -n "$libraries" ]
    then
        echo "  Libraries:      $libraries"
    fi
    if [ -n "$host_in" ]
    then
        echo "  Viewer host:    $host_in"
    fi
    if [ -n "$port_in" ]
    then
        echo "  Viewer port:    $port_in"
    fi
    echo
}

if [ -n "$PLEXIL_EXECUTABLE" ] && [ -x "$PLEXIL_EXECUTABLE" ]
then
    prog="$PLEXIL_EXECUTABLE"
elif [ -x "$PLEXIL_HOME"/bin/universalExec ]
then
    prog="$PLEXIL_HOME"/bin/universalExec
elif [ -x "$PLEXIL_HOME"/bin/universalExec/universalExec ]
then
    prog="$PLEXIL_HOME"/bin/universalExec/universalExec
else
    echo "$(basename "$0"): Plexil executable not found, aborting" >&2
    exit 1
fi

plexil_check_prog "$prog"

current_config="interface-config.xml" #current directory config
default_config_path="${PLEXIL_HOME}/examples" #default config location
default_config_name="dummy-config.xml"
default_config="${default_config_path}/${default_config_name}" 

quiet='' #quiet default
plan_nm='' #plan name
plan_cmd='' #plan command
config_nm='' #interface config name
config_cmd='' #interface config command
libraries='' #library files
library_dirs='' #library files
debug_cmd='' #debug cmd
check='' #run static checker
auto_run_cmd='' # Viewer autorun option

if [ -z "$1" ]
then
    usage
    exit 1
fi

while [ -n "$1" ]
do
    case "$1" in
        
        -a | -autorun )
            auto_run_cmd="$1";;

        -b | -blocking )
            block="$1";;

        -c | -config )
            shift
            config_nm="$1";;

        -ch | -check )
            check="$1";;

        -d | -debug )
            validate_file "$1" "$2"
            debug_cmd="-d $2"
            shift
            ;;

        --for-viewer )
            automate="$1";;


        -h )
            # Is it a help request or a host name?
            if [ -z "$2" ]
            then
                # Help request
                help
                exit 0
            fi
            validate_host "$1" "$2"
            host_in="-h $2"       #viewer host name
            shift
            ;;
        
        -hostname )
            validate_host "$1" "$2"
            host_in="-h $2"       #viewer host name
            shift
            ;;

        -help | --help )
            help
            exit 0
            ;;

        -L | -libraryPath )
            if [ -z "$2" ]
            then
                echo "$(basename "$0"): missing directory name for $1 option" >&2
                usage
                exit 2
            elif [ ! -r "$2" ] || [ ! -d "$2" ]
            then
                echo "$(basename "$0"): $1 is not a readable directory." >&2
                exit 1
            else
                library_dirs="$library_dirs$2 "
                lib_dirs_cmd="$lib_dirs_cmd-L $2 "
            fi
            shift
            ;;

        -l | -library )
            validate_file "$1" "$2"
            libraries="$libraries$2 "
            lib_cmd="$lib_cmd-l $2 "
            shift
            ;;

        -n | -port )
            validate_port "$1" "$2"
            port_in="$2"    #viewer port
            shift
            ;;

        -p | -plan )
            validate_file "$1" "$2"
            plan_nm="$2"
            plan_cmd="-p $2"
            shift
            ;;

        -q | -quiet )
            quiet="$1";;

        -v | -viewer )
            viewer="$1";;   #viewer listener enabled    

        * )
            echo "$(basename "$0"): unrecognized option \"$1\"" >&2
            usage
            exit 2;;  
    esac
    shift
done

if [ -n "$automate" ]
then
    # Just Do It - presume caller knows what it's doing.
    # We do not expect a local Viewer to use the -h option.
    if [ -n "$plan_nm" ] && [ -n "$check" ]
    then
        checker
    fi
    config_cmd="-c $config_nm"
    if [ -z "$quiet" ]
    then
        summarize
    fi
    if [ -n "$port_in" ]
    then
        port_cmd="-n $port_in"
    fi
    echo "RUN_UE_PID$$"

    # The unquoted expansions are deliberate
    # shellcheck disable=SC2086
    exec "$prog" $plan_cmd $config_cmd $lib_cmd $lib_dirs_cmd $debug_cmd $viewer $port_cmd $block $quiet
fi

if [ -n "$block" ]
then
    if [ -z "$viewer" ] && [ -z "$host_in" ] && [ -z "$port_in" ]
    then
        warn "Warning: $block specified but Viewer not in use. Ignoring."
        block=""
    fi
fi

# Check the supplied config
if [ -z "$config_nm" ]
then
    warn "Warning: no configuration file specified."
elif [ ! -r "$config_nm" ]
then
    warn "Warning: configuration file $config_nm not found"
    config_nm=""
fi

# Use default config if needed
if [ -z "$config_nm" ]
then  
    if [ -r "$current_config" ]
    then   
        config_nm="$current_config"
    elif [ ! -r "$default_config" ]
    then
        echo "$(basename "$0"): No configuration file specified and defaults cannot be found." >&2
        exit 1
    else
        config_nm="$default_config"
    fi
    warn "Using default configuration file $config_nm"
fi
config_cmd="-c $config_nm"

# Check Viewer options
if [ -z "$viewer" ]
then
    # No local Viewer
    if [ -z "$host_in" ]
    then
        # Check local port, if supplied
        if [ -n "$port_in" ]
        then
            if list_ports_in_use | grep -q -v "\<${port_in}\>"
            then
                echo "$(basename "$0"): No Viewer is listening on local port $port_in." >&2
                exit 1
            fi
        fi
    elif [ -z "$port_in" ]
    then
        echo "$(basename "$0"): Viewer host $host_in specified, but no port was supplied." >&2
        exit 1
    fi
    # TODO: Bounds check port number
elif [ -n "$host_in" ]
then
    echo "$(basename "$0"): -h (remove Viewer host) and -v (local Viewer) may not be combined." >&2
    exit 1
else
    # Local Viewer requested
    if [ -z "$port_in" ]
    then
        # Find open local port
        port_in="$(find_open_port)"
        if [ -z "$port_in" ]
        then
            echo "Unable to find an open local port for Viewer communications."
            exit 1
        fi
    elif list_ports_in_use | grep -q "\<${port_in}\>"
    then
        echo "$(basename "$0"): Port $port_in is in use." >&2
        exit 1
    fi
fi

if [ -n "$host_in" ]
then
    host_cmd="-hostname $host_in"
fi

if [ -n "$port_in" ]
then
    port_cmd="-n $port_in"
fi

# Run default debug
if [ -z "$debug_cmd" ] && [ -z "$quiet" ] && [ -r "Debug.cfg" ]
then
    debug_cmd="-d Debug.cfg"
fi

# Check plan for errors
if [ -z "$viewer" ] && [ -n "$check" ]
then
    checker
fi

# separate command-line from plexilexec output
echo

# Print summary if desired
if [ -z "$quiet" ] && [ -z "$viewer" ]
then
    summarize
fi

if [ -n "$viewer" ]
then
    # *** FIXME ***
    # Launch the viewer, which will in turn invoke this script again with the automate flag
    # The unquoted expansions are deliberate
    # shellcheck disable=SC2086
    exec plexil -plexilexec $plan_cmd $config_cmd $lib_dirs_cmd $lib_cmd $debug_cmd $host_cmd $port_cmd $check $block $auto_run_cmd
else
    # User doesn't want viewer
    # The unquoted expansions are deliberate
    # shellcheck disable=SC2086
    exec "$prog" $plan_cmd $config_cmd $lib_dirs_cmd $lib_cmd $debug_cmd $block
fi
