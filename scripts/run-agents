#!/bin/sh
# File: $SVNROOT/scripts/run-agents
# Note: Script to run two Plexil agent systems using IPC

# Copyright (c) 2006-2020, Universities Space Research Association (USRA).
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Universities Space Research Association nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

debug=

usage ()
{
cat >&2 <<EOF

Usage:      $(basename "$0") [options] <agent1> [-c <config>] [-l <lib>] [-L <lib_dir>] <agent2> [-c <config>] [-l <lib>] [-L <lib_dir>]

Options:    -v -viewer  := start the Plexil Viewer
            -x -xterms  := run the execs in xterms (if your system has them)
            -i -ipc     := run IPC in an xterm (rather than in the background)
            -n -no-ipc  := do not run IPC at all

Examples:   $(basename "$0") -x sim cmd -l get-int -l get-real

Notes:      <agent1> and <agent2> are the "base names" of the plans, e.g., "cmd" for cmd.pli
            or "t1-sim" for t1-sim.pli.

            The communications configuration files will be guessed at based on the given
            "base names", e.g., given "t1-cmd" as the base name, "t1-cmd.xml" and "cmd.xml"
            will be tried.

EOF
}

# Check for something like the right parameters and/or a "help" request
if [ $# -lt 2 ] ; then usage ; exit 2 ; fi

# Check for PLEXIL_HOME being set (correctly, one hopes)
if [ -z "$PLEXIL_HOME" ] ; then echo 'PLEXIL_HOME is not set' >&2 ; exit 2 ; fi
if [ ! -e "$PLEXIL_HOME/makeinclude/generic-plexil.make" ] ; then
    echo "PLEXIL_HOME is set to $PLEXIL_HOME, but I can't find some required files." >&2
fi

# Check for xterm and IPC/central
use_xterm=
use_viewer=
no_ipc=
run_ipc_in_background=yes

# shellcheck disable=SC2009
# pgrep isn't part of POSIX standard
ipc_running="$(ps aux | grep -E 'ipc|central' | grep -v grep)"

# Show the usage message and/or set up the "mode" to run in
while [ -n "$1" ]
do
    case "$1" in
        ( -d )
	    debug=true
	    shift
        ;;
        ( -h | -help )
	    usage
	    exit 0
        ;;
        ( -v | -viewer )
	    use_viewer=yes
	    shift
        ;;
        ( -x | -xterm | -xterms )
	    use_xterm=yes
	    shift
        ;;
        ( -vx | -xv )
	    use_xterm=yes
	    use_viewer=yes
	    shift
        ;;
        ( -i | -ipc )
	    run_ipc_in_background=no
	    shift
        ;;
        ( -n | -no-ipc )
	    no_ipc=yes
	    shift
        ;;
        ( -c )
        if [ -z "$com1" ]
	    then
	        shift
	        com1="$1"
	        shift;
        else
	        shift
	        com2="$1"
	        shift
        fi
        ;;
        ( -l )
        # FIXME: Handle lib names wtih spaces
        if [ -z "$agent2_raw" ]
	    then
	        shift
	        libs1="$libs1$1 "
	        shift
        else
	        shift
	        libs2="$libs2$1 "
	        shift
        fi
        ;;
        ( -L )
        # FIXME: Handle lib dir names wtih spaces
        if [ -z "$agent2_raw" ]
	    then
	        libdirs1="$libdirs1$1 $2 "
	        shift 2
        else
	        libdirs2="$libdirs1$1 $2 "
	        shift 2
        fi
        ;;
        ( * )
        if [ -z "$agent1_raw" ]
	    then
	        agent1_raw="$1"
	        shift
        elif [ -z "$agent2_raw" ]
	    then
	        agent2_raw="$1"
	        shift
        else
	        echo "The \"$1\" parameter is ambiguous.  Maybe it is a library missing the -l flag?" >&2
	        usage
	        exit 2
        fi
        ;;
    esac
done

if [ -z "$agent1_raw" ] || [ -z "$agent2_raw" ] ; then
  echo "Two agents required" >&2
  usage
  exit 2
fi

# Allow for either base names or names including extensions
agent_name()
{
    printf '%s\n' "$1" | awk '{ split($0, arr, "."); print(arr[1]) }'
}

agent1="$(agent_name "$agent1_raw")"
agent2="$(agent_name "$agent2_raw")"

before_dash()
{
    printf '%s\n' "$1" | awk '{ split($0, arr, "-"); print(arr[1]) }'
}

after_dash()
{
    printf '%s\n' "$1" | awk '{ split($0, arr, "-"); print(arr[1]) }'
}

# Guess at what the communications configurations might be for these agents
# t1-cmd = cmd.xml or t1-cmd.xml = cmd-t1; cmd = cmd.xml
if [ -z "$com1" ] ;
then
    if [ -e "$agent1.xml" ] ;
    then
        com1="$agent1.xml" ;
    elif [ -e "$(before-dash "$agent1")".xml ] ;
    then
        com1="$(before-dash "$agent1")".xml
    elif [ -e "$(after-dash "$agent1")".xml ] ;
    then
        com1="$(after-dash "$agent1")".xml
    else
        echo "No communications configuration file found for base name $agent1" >&2
        exit 2
    fi
fi

# And now for agent2
if [ -z "$com2" ] ;
then
    if [ -e "$agent2.xml" ] ;
    then
        com2="$agent2.xml" ;
    elif [ -e "$(before-dash "$agent2")".xml ] ;
    then
        com1="$(before-dash "$agent2")".xml
    elif [ -e "$(after-dash "$agent2")".xml ] ;
    then
        com1="$(after-dash "$agent2")".xml
    else
        echo "No communications configuration file found for base name $agent2" >&2
        exit 2
    fi
fi

# Now, double check to be sure we have comm configuration files
if [ ! -e "$com1" ] ; then
    if [ ! -e "$com1.xml" ] ; then
        echo ' ' ; echo "No communications configuration file found for \"-c $com1\"" >&2
        usage
        exit 2
    else
        com1="$com1.xml"
    fi
fi
# Now, do it again for the second agent
if [ ! -e "$com2" ] ; then
    if [ ! -e "$com2.xml" ] ; then
        echo ' ' ; echo "No communications configuration file found for \"-c $com2\"" >&2
        usage
        exit 2
    else
        com2="$com2.xml"
    fi
fi

# For readability
echo ' '

# Try to figure out which make to use
MAKE='make'
if [ "$(uname -s)" = 'FreeBSD' ]
then
    if command -v gmake
    then
	    MAKE='gmake'
    else
	    echo 'ERROR: GNU make not found. Please install it.' >&2
	    exit 2
    fi
fi

# Try to figure out which makefile to use
if [ -e 'makefile' ] ; then
    make_file='makefile'
elif [ -e 'Makefile' ] ; then
    make_file='Makefile'
else
    make_file="$PLEXIL_HOME/makeinclude/generic-plexil.make"
fi

# Keep the plans up-to-date if possible...
${MAKE} -f "$make_file" "$agent1.plx" "$agent2.plx"
make_status=$?
# bail if things don't compile properly
if [ $make_status != 0 ] ;
then
    echo "make exited with error status $make_status" >&2
    exit $make_status
fi

# Parameters are libname [ '-L' libdir ]*
try_find_library_source()
{
    lib="$(echo "$1" | awk '{ split($0, arr, "."); print(arr[1]) }')"
    shift
    for ext in plp ple epx pli
    do
        if [ -e "$lib.$ext" ]
        then
            printf '%s\n' "$lib.$ext"
            return 0
        fi
    done

    # Try library path
    while [ -n "$1" ]
    do
        if [ "$1" != '-L' ] && [ -d "$1" ]
        then
            for ext in plp ple epx pli
            do
                if [ -e "$1/$lib.$ext" ]
                then
                    printf '%s\n' "$1/$lib"
                    return 0
                fi
            done
        fi
        shift
    done

    echo "Source for library $lib.plx not found" >&2
    exit 1
}

# Set up the libraries for inclusion
# FIXME
for lib in $libs1
do
    lib="$(try_find_library_source "$lib" $libdirs1)"

    # stop if the compile fails
    if ! ${MAKE} "$lib.plx"
    then
        echo "Error: $lib.plx failed to compile" >&2
        exit 1
    fi
    libraries1="$libraries1 -l $lib.plx"
done
# And again for the second agent
for lib in $libs2
do
    lib="$(try_find_library_source "$lib" $libdirs2)"

    # stop if the compile fails
    if ! ${MAKE} "$lib.plx"
    then
        echo "Error: $lib.plx failed to compile" >&2
        exit 1
    fi
    libraries2="$libraries2 -l $lib.plx"
done

if [ -n "$debug" ] ;
then
    echo ' '
    echo "agent1_raw:   $agent1_raw"
    echo "agent1:       $agent1"
    echo "com1:         $com1"
    echo "libs1:        $libs1"
    echo "libraries1:   $libraries1"
    echo ' '
    echo "agent2_raw:   $agent2_raw"
    echo "agent2:       $agent2"
    echo "com2:         $com2"
    echo "libs2:        $libs2"
    echo "libraries2:   $libraries2"
    echo ' ' 
    echo "cmd1:         $cmd1"
    echo "cmd2:         $cmd2"
    echo ' '
    echo "PLEXIL_HOME:  $PLEXIL_HOME"
    echo "make_file:    $make_file"
    echo ' '
    exit
fi

# Set up the sleep time.  Java on Mac OS is really slow,
# hence the long sleep time...
if [ -n "$use_viewer" ] ;
then
    if [ "$(uname)" = 'Darwin' ] ;
    then
        sleep_time=15
    else
        sleep_time=3
    fi
else
    sleep_time=1
fi

# Either start IPC/central in an xterm, or make sure it is already running
if [ -z "$(command -v xterm)" ] && [ -z "$no_ipc" ];
then
    echo ' '
    if [ -z "$ipc_running" ] && [ "$run_ipc_in_background" = 'no' ] ;
    then
        echo 'ipc (central) must already be running for this script to work without xterm...' >&2
        echo ' '
        exit 2
    else
        echo 'xterm not found: both agents will be run in the background...'
        echo ' '
    fi
fi

# start IPC/central if necessary
ipc_pid=
if [ -z "$no_ipc" ]
then
    if [ -z "$ipc_running" ] ;
    then
        echo ' '
        echo 'Starting IPC...'
        if [ "$run_ipc_in_background" = 'no' ] ; then
            xterm -g 172x20 -T "IPC" ipc &
        else
            central -s -L -f/dev/null &
            ipc_pid=$!
            echo "Running IPC in the background (pid: $ipc_pid)..."
            echo ' '
        fi
        sleep 3;
    else
        echo ' ' ; echo 'IPC already running...'
        run_ipc_in_background=no
    fi
fi

# Start the agents
# FIXME
echo "$cmd1"
if [ -z "$use_xterm" ]
then
    plexilexec ${use_viewer:+'-v -b'} -p "$agent1".plx -c "$com1" $libdirs1 $libraries1 &
else
    xterm -e plexilexec ${use_viewer:+'-v -b'} -p "$agent1".plx -c "$com1" $libdirs1 $libraries1 &
fi

sleep $sleep_time

echo "$cmd2"
if [ -z "$use_xterm" ]
then
    plexilexec ${use_viewer:+'-v -b'} -p "$agent2".plx -c "$com2" $libdirs2 $libraries2
else
    xterm -e plexilexec ${use_viewer:+'-v -b'} -b -p "$agent2".plx -c "$com2" $libdirs2 $libraries1
fi

if [ -n "$ipc_pid" ]
then
    kill -9 "$ipc_pid"
    echo ' '
fi

# EOF
