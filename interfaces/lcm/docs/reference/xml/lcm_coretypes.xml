<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="lcm-lcm-coretypes">
<refmeta>
<refentrytitle role="top_of_page" id="lcm-lcm-coretypes.top_of_page">lcm_coretypes</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LCM Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>lcm_coretypes</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="lcm-lcm-coretypes.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="lcm-hash-ptr">__lcm_hash_ptr</link>;
#define             <link linkend="boolean-encoded-size">boolean_encoded_size</link>
#define             <link linkend="byte-encoded-size">byte_encoded_size</link>                   (p)
<link linkend="return">return</link>              <link linkend="sizeof">sizeof</link>                              ();
#define             <link linkend="int8-t-encoded-size">int8_t_encoded_size</link>                 (p)
#define             <link linkend="int16-t-encoded-size">int16_t_encoded_size</link>                (p)
#define             <link linkend="int32-t-encoded-size">int32_t_encoded_size</link>                (p)
#define             <link linkend="int64-t-encoded-size">int64_t_encoded_size</link>                (p)
#define             <link linkend="float-encoded-size">float_encoded_size</link>                  (p)
#define             <link linkend="double-encoded-size">double_encoded_size</link>                 (p)
<link linkend="return">return</link>              <link linkend="malloc">malloc</link>                              (<link linkend="sz">sz</link> );
</synopsis>
</refsynopsisdiv>









<refsect1 id="lcm-lcm-coretypes.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="lcm-lcm-coretypes.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="lcm-hash-ptr" role="struct">
<title>__lcm_hash_ptr</title>
<indexterm zone="lcm-hash-ptr"><primary sortas="_lcm_hash_ptr">__lcm_hash_ptr</primary></indexterm><programlisting>typedef struct {
    const __lcm_hash_ptr *parent;
    void *v;
} __lcm_hash_ptr;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="boolean-encoded-size" role="macro">
<title>boolean_encoded_size</title>
<indexterm zone="boolean-encoded-size"><primary sortas="boolean_encoded_size">boolean_encoded_size</primary></indexterm><programlisting>#define boolean_encoded_size int8_t_encoded_size
</programlisting>
<para>
</para></refsect2>
<refsect2 id="byte-encoded-size" role="macro">
<title>byte_encoded_size()</title>
<indexterm zone="byte-encoded-size"><primary sortas="byte_encoded_size">byte_encoded_size</primary></indexterm><programlisting>#define byte_encoded_size(p) ( sizeof(int64_t) + sizeof(uint8_t) )
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="sizeof" role="function">
<title>sizeof ()</title>
<indexterm zone="sizeof"><primary sortas="sizeof">sizeof</primary></indexterm><programlisting><link linkend="return">return</link>              sizeof                              ();</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="int8-t-encoded-size" role="macro">
<title>int8_t_encoded_size()</title>
<indexterm zone="int8-t-encoded-size"><primary sortas="int8_t_encoded_size">int8_t_encoded_size</primary></indexterm><programlisting>#define int8_t_encoded_size(p) ( sizeof(int64_t) + sizeof(int8_t) )
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="int16-t-encoded-size" role="macro">
<title>int16_t_encoded_size()</title>
<indexterm zone="int16-t-encoded-size"><primary sortas="int16_t_encoded_size">int16_t_encoded_size</primary></indexterm><programlisting>#define int16_t_encoded_size(p) ( sizeof(int64_t) + sizeof(int16_t) )
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="int32-t-encoded-size" role="macro">
<title>int32_t_encoded_size()</title>
<indexterm zone="int32-t-encoded-size"><primary sortas="int32_t_encoded_size">int32_t_encoded_size</primary></indexterm><programlisting>#define int32_t_encoded_size(p) ( sizeof(int64_t) + sizeof(int32_t) )
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="int64-t-encoded-size" role="macro">
<title>int64_t_encoded_size()</title>
<indexterm zone="int64-t-encoded-size"><primary sortas="int64_t_encoded_size">int64_t_encoded_size</primary></indexterm><programlisting>#define int64_t_encoded_size(p) ( sizeof(int64_t) + sizeof(int64_t) )
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="float-encoded-size" role="macro">
<title>float_encoded_size()</title>
<indexterm zone="float-encoded-size"><primary sortas="float_encoded_size">float_encoded_size</primary></indexterm><programlisting>#define float_encoded_size(p) ( sizeof(int64_t) + sizeof(float) )
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="double-encoded-size" role="macro">
<title>double_encoded_size()</title>
<indexterm zone="double-encoded-size"><primary sortas="double_encoded_size">double_encoded_size</primary></indexterm><programlisting>#define double_encoded_size(p) ( sizeof(int64_t) + sizeof(double) )
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="malloc" role="function">
<title>malloc ()</title>
<indexterm zone="malloc"><primary sortas="malloc">malloc</primary></indexterm><programlisting><link linkend="return">return</link>              malloc                              (<link linkend="sz">sz</link> );</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
