[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
NonLocalExit{
 State: NonLocalExit (id_33[a](INACTIVE): state) (inf)
  theLoop{
   State: theLoop (id_76[a](INACTIVE): state) (inf)
  }
  theSpoiler{
   State: theSpoiler (id_111[a](INACTIVE): state) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node NonLocalExit
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node NonLocalExit had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'NonLocalExit' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'NonLocalExit' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: NonLocalExit 
[PlexilExec:step][1:0:0] Transitioning node NonLocalExit from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node NonLocalExit
[PlexilExec:handleConditionsChanged]Node NonLocalExit had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'NonLocalExit' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'NonLocalExit' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: NonLocalExit 
[PlexilExec:step][1:1:0] Transitioning node NonLocalExit from WAITING to EXECUTING
[PlexilExec:notifyNodeConditionChanged] for node theLoop
[PlexilExec:notifyNodeConditionChanged] for node theSpoiler
[PlexilExec:handleNeedsExecution]Storing action for node 'NonLocalExit' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node NonLocalExit
[PlexilExec:handleConditionsChanged]Node theLoop had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theLoop' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'theLoop' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node theSpoiler had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theSpoiler' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'theSpoiler' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node NonLocalExit had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'NonLocalExit' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: theLoop theSpoiler 
[PlexilExec:step][1:2:0] Transitioning node theLoop from INACTIVE to WAITING
[PlexilExec:step][1:2:1] Transitioning node theSpoiler from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node theSpoiler
[PlexilExec:notifyNodeConditionChanged] for node theLoop
[PlexilExec:handleConditionsChanged]Node theSpoiler had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'theSpoiler' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node theLoop had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theLoop' for state transition.
[PlexilExec:handleConditionsChanged]Node 'theLoop' is an assignment node that could be executing.  Adding it to the resource contention list 
[PlexilExec:addToResourceContention]Adding node 'theLoop' to resource contention.
[PlexilExec:resolveResourceConflicts]Node 'theLoop' has best priority.  Adding it to be executed in position 5
[PlexilExec:step][1:3] State change queue: theLoop 
[PlexilExec:step][1:3:0] Transitioning node theLoop from WAITING to EXECUTING
[PlexilExec:handleNeedsExecution]Storing action for node 'theLoop' of type 'Assignment' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node theLoop
[PlexilExec:performAssignments] performing 1 assignments and 0 retractions
[Test:testOutput]Assigning 'loopCount' (loopCount (id_73[a](0): int)) to 1
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
NonLocalExit{
 State: NonLocalExit (id_33[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_67[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_67[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_69[a](1): boolean)
 SkipCondition: Boolean constant false (id_67[a](0): boolean)
 StartCondition: Boolean constant true (id_69[a](1): boolean)
 EndCondition: (id_151[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_67[a](0): boolean)
 InvariantCondition: Boolean constant true (id_69[a](1): boolean)
 PreCondition: Boolean constant true (id_69[a](1): boolean)
 PostCondition: Boolean constant true (id_69[a](1): boolean)
 RepeatCondition: Boolean constant false (id_67[a](0): boolean)
 ActionCompleteCondition: (id_145[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 loopCount: loopCount (id_73[a](1): int)
 quitLooping: quitLooping (id_71[a](0): boolean)
  theLoop{
   State: theLoop (id_76[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_151[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_67[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_69[a](1): boolean)
   SkipCondition: Boolean constant false (id_67[a](0): boolean)
   StartCondition: Boolean constant true (id_69[a](1): boolean)
   EndCondition: Boolean constant true (id_69[a](1): boolean)
   ExitCondition: quitLooping (id_71[a](0): boolean)
   InvariantCondition: Boolean constant true (id_69[a](1): boolean)
   PreCondition: Boolean constant true (id_69[a](1): boolean)
   PostCondition: Boolean constant true (id_69[a](1): boolean)
   RepeatCondition: (id_173[i](UNKNOWN): (loopCount (id_73[a](1): int) < IntegerValue (id_175[a](5): int)))
   ActionCompleteCondition: theLoop ack (id_162[a](1): boolean)
   AbortCompleteCondition: theLoop abortComplete (id_164[i](UNKNOWN): boolean)
   loopCount: loopCount (id_73[a](1): int)
   quitLooping: quitLooping (id_71[a](0): boolean)
  }
  theSpoiler{
   State: theSpoiler (id_111[a](WAITING): state) (0)
   AncestorEndCondition: (id_151[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_67[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_69[a](1): boolean)
   SkipCondition: Boolean constant false (id_67[a](0): boolean)
   StartCondition: (id_190[a](0): (loopCount (id_73[a](1): int) == IntegerValue (id_192[a](2): int)))
   EndCondition: Boolean constant true (id_69[a](1): boolean)
   ExitCondition: Boolean constant false (id_67[a](0): boolean)
   InvariantCondition: Boolean constant true (id_69[a](1): boolean)
   PreCondition: Boolean constant true (id_69[a](1): boolean)
   PostCondition: Boolean constant true (id_69[a](1): boolean)
   RepeatCondition: Boolean constant false (id_67[a](0): boolean)
   ActionCompleteCondition: theSpoiler ack (id_180[i](UNKNOWN): boolean)
   AbortCompleteCondition: theSpoiler abortComplete (id_182[i](UNKNOWN): boolean)
   loopCount: loopCount (id_73[a](1): int)
   quitLooping: quitLooping (id_71[a](0): boolean)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:handleConditionsChanged]Node theLoop had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theLoop' for state transition.
[PlexilExec:handleConditionsChanged]Node 'theLoop' is an assignment node that is no longer possibly executing.  Removing it from resource contention.
[PlexilExec:handleConditionsChanged]Placing node 'theLoop' on the state change queue in position 6
[PlexilExec:step][2:0] State change queue: theLoop 
[PlexilExec:step][2:0:0] Transitioning node theLoop from EXECUTING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node theLoop
[PlexilExec:handleConditionsChanged]Node theLoop had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theLoop' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'theLoop' on the state change queue in position 7
[PlexilExec:step][2:1] State change queue: theLoop 
[PlexilExec:step][2:1:0] Transitioning node theLoop from ITERATION_ENDED to WAITING
[PlexilExec:notifyNodeConditionChanged] for node theLoop
[PlexilExec:handleConditionsChanged]Node theLoop had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theLoop' for state transition.
[PlexilExec:handleConditionsChanged]Node 'theLoop' is an assignment node that could be executing.  Adding it to the resource contention list 
[PlexilExec:addToResourceContention]Adding node 'theLoop' to resource contention.
[PlexilExec:resolveResourceConflicts]Node 'theLoop' has best priority.  Adding it to be executed in position 8
[PlexilExec:step][2:2] State change queue: theLoop 
[PlexilExec:step][2:2:0] Transitioning node theLoop from WAITING to EXECUTING
[PlexilExec:handleNeedsExecution]Storing action for node 'theLoop' of type 'Assignment' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node theLoop
[PlexilExec:performAssignments] performing 1 assignments and 0 retractions
[Test:testOutput]Assigning 'loopCount' (loopCount (id_73[a](1): int)) to 2
[PlexilExec:notifyNodeConditionChanged] for node theSpoiler
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
NonLocalExit{
 State: NonLocalExit (id_33[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_67[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_67[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_69[a](1): boolean)
 SkipCondition: Boolean constant false (id_67[a](0): boolean)
 StartCondition: Boolean constant true (id_69[a](1): boolean)
 EndCondition: (id_151[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_67[a](0): boolean)
 InvariantCondition: Boolean constant true (id_69[a](1): boolean)
 PreCondition: Boolean constant true (id_69[a](1): boolean)
 PostCondition: Boolean constant true (id_69[a](1): boolean)
 RepeatCondition: Boolean constant false (id_67[a](0): boolean)
 ActionCompleteCondition: (id_145[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 loopCount: loopCount (id_73[a](2): int)
 quitLooping: quitLooping (id_71[a](0): boolean)
  theLoop{
   State: theLoop (id_76[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_151[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_67[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_69[a](1): boolean)
   SkipCondition: Boolean constant false (id_67[a](0): boolean)
   StartCondition: Boolean constant true (id_69[a](1): boolean)
   EndCondition: Boolean constant true (id_69[a](1): boolean)
   ExitCondition: quitLooping (id_71[a](0): boolean)
   InvariantCondition: Boolean constant true (id_69[a](1): boolean)
   PreCondition: Boolean constant true (id_69[a](1): boolean)
   PostCondition: Boolean constant true (id_69[a](1): boolean)
   RepeatCondition: (id_173[i](UNKNOWN): (loopCount (id_73[a](2): int) < IntegerValue (id_175[a](5): int)))
   ActionCompleteCondition: theLoop ack (id_162[a](1): boolean)
   AbortCompleteCondition: theLoop abortComplete (id_164[i](UNKNOWN): boolean)
   loopCount: loopCount (id_73[a](2): int)
   quitLooping: quitLooping (id_71[a](0): boolean)
  }
  theSpoiler{
   State: theSpoiler (id_111[a](WAITING): state) (0)
   AncestorEndCondition: (id_151[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_67[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_69[a](1): boolean)
   SkipCondition: Boolean constant false (id_67[a](0): boolean)
   StartCondition: (id_190[a](1): (loopCount (id_73[a](2): int) == IntegerValue (id_192[a](2): int)))
   EndCondition: Boolean constant true (id_69[a](1): boolean)
   ExitCondition: Boolean constant false (id_67[a](0): boolean)
   InvariantCondition: Boolean constant true (id_69[a](1): boolean)
   PreCondition: Boolean constant true (id_69[a](1): boolean)
   PostCondition: Boolean constant true (id_69[a](1): boolean)
   RepeatCondition: Boolean constant false (id_67[a](0): boolean)
   ActionCompleteCondition: theSpoiler ack (id_180[i](UNKNOWN): boolean)
   AbortCompleteCondition: theSpoiler abortComplete (id_182[i](UNKNOWN): boolean)
   loopCount: loopCount (id_73[a](2): int)
   quitLooping: quitLooping (id_71[a](0): boolean)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:handleConditionsChanged]Node theLoop had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theLoop' for state transition.
[PlexilExec:handleConditionsChanged]Node 'theLoop' is an assignment node that is no longer possibly executing.  Removing it from resource contention.
[PlexilExec:handleConditionsChanged]Placing node 'theLoop' on the state change queue in position 9
[PlexilExec:handleConditionsChanged]Node theSpoiler had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theSpoiler' for state transition.
[PlexilExec:handleConditionsChanged]Node 'theSpoiler' is an assignment node that could be executing.  Adding it to the resource contention list 
[PlexilExec:addToResourceContention]Adding node 'theSpoiler' to resource contention.
[PlexilExec:resolveResourceConflicts]Node 'theSpoiler' has best priority.  Adding it to be executed in position 10
[PlexilExec:step][3:0] State change queue: theLoop theSpoiler 
[PlexilExec:step][3:0:0] Transitioning node theLoop from EXECUTING to ITERATION_ENDED
[PlexilExec:step][3:0:1] Transitioning node theSpoiler from WAITING to EXECUTING
[PlexilExec:handleNeedsExecution]Storing action for node 'theSpoiler' of type 'Assignment' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node theLoop
[PlexilExec:notifyNodeConditionChanged] for node theSpoiler
[PlexilExec:performAssignments] performing 1 assignments and 0 retractions
[Test:testOutput]Assigning 'quitLooping' (quitLooping (id_71[a](0): boolean)) to 1
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
NonLocalExit{
 State: NonLocalExit (id_33[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_67[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_67[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_69[a](1): boolean)
 SkipCondition: Boolean constant false (id_67[a](0): boolean)
 StartCondition: Boolean constant true (id_69[a](1): boolean)
 EndCondition: (id_151[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_67[a](0): boolean)
 InvariantCondition: Boolean constant true (id_69[a](1): boolean)
 PreCondition: Boolean constant true (id_69[a](1): boolean)
 PostCondition: Boolean constant true (id_69[a](1): boolean)
 RepeatCondition: Boolean constant false (id_67[a](0): boolean)
 ActionCompleteCondition: (id_145[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 loopCount: loopCount (id_73[a](2): int)
 quitLooping: quitLooping (id_71[a](1): boolean)
  theLoop{
   State: theLoop (id_76[a](ITERATION_ENDED): state) (0)
   AncestorEndCondition: (id_151[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_67[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_69[a](1): boolean)
   SkipCondition: Boolean constant false (id_67[a](0): boolean)
   StartCondition: Boolean constant true (id_69[a](1): boolean)
   EndCondition: Boolean constant true (id_69[a](1): boolean)
   ExitCondition: quitLooping (id_71[a](1): boolean)
   InvariantCondition: Boolean constant true (id_69[a](1): boolean)
   PreCondition: Boolean constant true (id_69[a](1): boolean)
   PostCondition: Boolean constant true (id_69[a](1): boolean)
   RepeatCondition: (id_173[a](1): (loopCount (id_73[a](2): int) < IntegerValue (id_175[a](5): int)))
   ActionCompleteCondition: theLoop ack (id_162[i](1): boolean)
   AbortCompleteCondition: theLoop abortComplete (id_164[i](UNKNOWN): boolean)
   loopCount: loopCount (id_73[a](2): int)
   quitLooping: quitLooping (id_71[a](1): boolean)
  }
  theSpoiler{
   State: theSpoiler (id_111[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_151[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_67[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_69[a](1): boolean)
   SkipCondition: Boolean constant false (id_67[a](0): boolean)
   StartCondition: (id_190[i](UNKNOWN): (loopCount (id_73[a](2): int) == IntegerValue (id_192[a](2): int)))
   EndCondition: Boolean constant true (id_69[a](1): boolean)
   ExitCondition: Boolean constant false (id_67[a](0): boolean)
   InvariantCondition: Boolean constant true (id_69[a](1): boolean)
   PreCondition: Boolean constant true (id_69[a](1): boolean)
   PostCondition: Boolean constant true (id_69[a](1): boolean)
   RepeatCondition: Boolean constant false (id_67[a](0): boolean)
   ActionCompleteCondition: theSpoiler ack (id_180[a](1): boolean)
   AbortCompleteCondition: theSpoiler abortComplete (id_182[i](UNKNOWN): boolean)
   loopCount: loopCount (id_73[a](2): int)
   quitLooping: quitLooping (id_71[a](1): boolean)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:handleConditionsChanged]Node theLoop had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theLoop' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'theLoop' on the state change queue in position 11
[PlexilExec:handleConditionsChanged]Node theSpoiler had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theSpoiler' for state transition.
[PlexilExec:handleConditionsChanged]Node 'theSpoiler' is an assignment node that is no longer possibly executing.  Removing it from resource contention.
[PlexilExec:handleConditionsChanged]Placing node 'theSpoiler' on the state change queue in position 12
[PlexilExec:step][4:0] State change queue: theLoop theSpoiler 
[PlexilExec:step][4:0:0] Transitioning node theLoop from ITERATION_ENDED to WAITING
[PlexilExec:step][4:0:1] Transitioning node theSpoiler from EXECUTING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node theLoop
[PlexilExec:notifyNodeConditionChanged] for node theSpoiler
[PlexilExec:handleConditionsChanged]Node theLoop had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theLoop' for state transition.
[PlexilExec:handleConditionsChanged]Node 'theLoop' is an assignment node that is no longer possibly executing.  Removing it from resource contention.
[PlexilExec:handleConditionsChanged]Placing node 'theLoop' on the state change queue in position 13
[PlexilExec:handleConditionsChanged]Node theSpoiler had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'theSpoiler' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'theSpoiler' on the state change queue in position 14
[PlexilExec:step][4:1] State change queue: theLoop theSpoiler 
[PlexilExec:step][4:1:0] Transitioning node theLoop from WAITING to FINISHED
[PlexilExec:step][4:1:1] Transitioning node theSpoiler from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node NonLocalExit
[PlexilExec:notifyNodeConditionChanged] for node theLoop
[PlexilExec:notifyNodeConditionChanged] for node theSpoiler
[PlexilExec:handleConditionsChanged]Node NonLocalExit had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'NonLocalExit' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'NonLocalExit' on the state change queue in position 15
[PlexilExec:handleConditionsChanged]Node theLoop had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'theLoop' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node theSpoiler had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'theSpoiler' was previously eligible to transition but isn't now.
[PlexilExec:step][4:2] State change queue: NonLocalExit 
[PlexilExec:step][4:2:0] Transitioning node NonLocalExit from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node NonLocalExit
[PlexilExec:handleConditionsChanged]Node NonLocalExit had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'NonLocalExit' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'NonLocalExit' on the state change queue in position 16
[PlexilExec:step][4:3] State change queue: NonLocalExit 
[PlexilExec:step][4:3:0] Transitioning node NonLocalExit from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node NonLocalExit
[PlexilExec:handleConditionsChanged]Node NonLocalExit had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'NonLocalExit' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'NonLocalExit' on the state change queue in position 17
[PlexilExec:step][4:4] State change queue: NonLocalExit 
[PlexilExec:step][4:4:0] Transitioning node NonLocalExit from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node NonLocalExit
[PlexilExec:handleConditionsChanged]Node NonLocalExit had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'NonLocalExit' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
NonLocalExit{
 State: NonLocalExit (id_33[a](FINISHED): state) (0)
 Outcome: NonLocalExit (id_35[a](SUCCESS): outcome)
 loopCount: loopCount (id_73[i](2): int)
 quitLooping: quitLooping (id_71[i](1): boolean)
  theLoop{
   State: theLoop (id_76[a](FINISHED): state) (0)
   Outcome: theLoop (id_78[a](SKIPPED): outcome)
   loopCount: loopCount (id_73[i](2): int)
   quitLooping: quitLooping (id_71[i](1): boolean)
  }
  theSpoiler{
   State: theSpoiler (id_111[a](FINISHED): state) (0)
   Outcome: theSpoiler (id_113[a](SUCCESS): outcome)
   loopCount: loopCount (id_73[i](2): int)
   quitLooping: quitLooping (id_71[i](1): boolean)
  }
}

