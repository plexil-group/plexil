[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
SimpleDrive{
 State: SimpleDrive (id_34[a](INACTIVE): state) (inf)
  Drive{
   State: Drive (id_75[a](INACTIVE): state) (inf)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](INACTIVE): state) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: SimpleDrive 
[PlexilExec:step][1:0:0] Transitioning node SimpleDrive from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: SimpleDrive 
[PlexilExec:step][1:1:0] Transitioning node SimpleDrive from WAITING to EXECUTING
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:notifyNodeConditionChanged] for node NextWaypoint
[PlexilExec:handleNeedsExecution]Storing action for node 'SimpleDrive' of type 'NodeList' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node NextWaypoint had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'NextWaypoint' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'NextWaypoint' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleDrive' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: Drive NextWaypoint 
[PlexilExec:step][1:2:0] Transitioning node Drive from INACTIVE to WAITING
[PlexilExec:step][1:2:1] Transitioning node NextWaypoint from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:notifyNodeConditionChanged] for node NextWaypoint
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node NextWaypoint had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'NextWaypoint' was previously eligible to transition but isn't now.
[PlexilExec:step][1:3] State change queue: Drive 
[PlexilExec:step][1:3:0] Transitioning node Drive from WAITING to EXECUTING
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:handleNeedsExecution]Storing action for node 'Drive' of type 'Command' to be executed.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[Test:testOutput]Executing drive() into retTestFunction (id_72[a](-1): int) with ack Drive command_handle (id_159[a](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
 SkipCondition: Boolean constant false (id_68[a](0): boolean)
 StartCondition: Boolean constant true (id_70[a](1): boolean)
 EndCondition: (id_150[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_68[a](0): boolean)
 InvariantCondition: Boolean constant true (id_70[a](1): boolean)
 PreCondition: Boolean constant true (id_70[a](1): boolean)
 PostCondition: Boolean constant true (id_70[a](1): boolean)
 RepeatCondition: Boolean constant false (id_68[a](0): boolean)
 ActionCompleteCondition: (id_144[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 retTestFunction: retTestFunction (id_72[a](-1): int)
  Drive{
   State: Drive (id_75[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: Boolean constant true (id_70[a](1): boolean)
   EndCondition: (id_184[a](0): ((id_182[a](0): interruptibleCommandHandleValues(Drive command_handle (id_159[a](UNKNOWN): command_handle))) || (id_171[a](0): (IntegerValue (id_173[a](10): int) == retTestFunction (id_72[a](-1): int)))))
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: (id_176[i](UNKNOWN): (id_180[i](UNKNOWN): (Drive command_handle (id_159[a](UNKNOWN): command_handle) == NodeCommandHandleValue (id_178[a](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_163[i](UNKNOWN): isknown(Drive command_handle (id_159[a](UNKNOWN): command_handle)))
   AbortCompleteCondition: Drive abortComplete (id_161[a](UNKNOWN): boolean)
   Command handle: Drive command_handle (id_159[a](UNKNOWN): command_handle)
   retTestFunction: retTestFunction (id_72[a](-1): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](WAITING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: (id_201[a](UNKNOWN): (id_205[a](UNKNOWN): (Drive command_handle (id_159[a](UNKNOWN): command_handle) == NodeCommandHandleValue (id_203[a](COMMAND_RCVD_BY_SYSTEM): command_handle))))
   EndCondition: Boolean constant true (id_70[a](1): boolean)
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: Boolean constant true (id_70[a](1): boolean)
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_193[i](UNKNOWN): isknown(NextWaypoint command_handle (id_189[i](UNKNOWN): command_handle)))
   AbortCompleteCondition: NextWaypoint abortComplete (id_191[i](UNKNOWN): boolean)
   Command handle: NextWaypoint command_handle (id_189[i](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Sending command ACK drive() = (string)COMMAND_ACCEPTED
[PlexilExec:notifyNodeConditionChanged] for node NextWaypoint
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Drive' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
 SkipCondition: Boolean constant false (id_68[a](0): boolean)
 StartCondition: Boolean constant true (id_70[a](1): boolean)
 EndCondition: (id_150[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_68[a](0): boolean)
 InvariantCondition: Boolean constant true (id_70[a](1): boolean)
 PreCondition: Boolean constant true (id_70[a](1): boolean)
 PostCondition: Boolean constant true (id_70[a](1): boolean)
 RepeatCondition: Boolean constant false (id_68[a](0): boolean)
 ActionCompleteCondition: (id_144[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 retTestFunction: retTestFunction (id_72[a](-1): int)
  Drive{
   State: Drive (id_75[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: Boolean constant true (id_70[a](1): boolean)
   EndCondition: (id_184[a](0): ((id_182[a](0): interruptibleCommandHandleValues(Drive command_handle (id_159[a](COMMAND_ACCEPTED): command_handle))) || (id_171[a](0): (IntegerValue (id_173[a](10): int) == retTestFunction (id_72[a](-1): int)))))
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: (id_176[i](UNKNOWN): (id_180[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_ACCEPTED): command_handle) == NodeCommandHandleValue (id_178[a](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_163[i](UNKNOWN): isknown(Drive command_handle (id_159[a](COMMAND_ACCEPTED): command_handle)))
   AbortCompleteCondition: Drive abortComplete (id_161[a](UNKNOWN): boolean)
   Command handle: Drive command_handle (id_159[a](COMMAND_ACCEPTED): command_handle)
   retTestFunction: retTestFunction (id_72[a](-1): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](WAITING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: (id_201[a](0): (id_205[a](0): (Drive command_handle (id_159[a](COMMAND_ACCEPTED): command_handle) == NodeCommandHandleValue (id_203[a](COMMAND_RCVD_BY_SYSTEM): command_handle))))
   EndCondition: Boolean constant true (id_70[a](1): boolean)
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: Boolean constant true (id_70[a](1): boolean)
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_193[i](UNKNOWN): isknown(NextWaypoint command_handle (id_189[i](UNKNOWN): command_handle)))
   AbortCompleteCondition: NextWaypoint abortComplete (id_191[i](UNKNOWN): boolean)
   Command handle: NextWaypoint command_handle (id_189[i](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
 SkipCondition: Boolean constant false (id_68[a](0): boolean)
 StartCondition: Boolean constant true (id_70[a](1): boolean)
 EndCondition: (id_150[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_68[a](0): boolean)
 InvariantCondition: Boolean constant true (id_70[a](1): boolean)
 PreCondition: Boolean constant true (id_70[a](1): boolean)
 PostCondition: Boolean constant true (id_70[a](1): boolean)
 RepeatCondition: Boolean constant false (id_68[a](0): boolean)
 ActionCompleteCondition: (id_144[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 retTestFunction: retTestFunction (id_72[a](-1): int)
  Drive{
   State: Drive (id_75[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: Boolean constant true (id_70[a](1): boolean)
   EndCondition: (id_184[a](0): ((id_182[a](0): interruptibleCommandHandleValues(Drive command_handle (id_159[a](COMMAND_ACCEPTED): command_handle))) || (id_171[a](0): (IntegerValue (id_173[a](10): int) == retTestFunction (id_72[a](-1): int)))))
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: (id_176[i](UNKNOWN): (id_180[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_ACCEPTED): command_handle) == NodeCommandHandleValue (id_178[a](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_163[i](UNKNOWN): isknown(Drive command_handle (id_159[a](COMMAND_ACCEPTED): command_handle)))
   AbortCompleteCondition: Drive abortComplete (id_161[a](UNKNOWN): boolean)
   Command handle: Drive command_handle (id_159[a](COMMAND_ACCEPTED): command_handle)
   retTestFunction: retTestFunction (id_72[a](-1): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](WAITING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: (id_201[a](0): (id_205[a](0): (Drive command_handle (id_159[a](COMMAND_ACCEPTED): command_handle) == NodeCommandHandleValue (id_203[a](COMMAND_RCVD_BY_SYSTEM): command_handle))))
   EndCondition: Boolean constant true (id_70[a](1): boolean)
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: Boolean constant true (id_70[a](1): boolean)
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_193[i](UNKNOWN): isknown(NextWaypoint command_handle (id_189[i](UNKNOWN): command_handle)))
   AbortCompleteCondition: NextWaypoint abortComplete (id_191[i](UNKNOWN): boolean)
   Command handle: NextWaypoint command_handle (id_189[i](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Sending command ACK drive() = (string)COMMAND_SENT_TO_SYSTEM
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
 SkipCondition: Boolean constant false (id_68[a](0): boolean)
 StartCondition: Boolean constant true (id_70[a](1): boolean)
 EndCondition: (id_150[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_68[a](0): boolean)
 InvariantCondition: Boolean constant true (id_70[a](1): boolean)
 PreCondition: Boolean constant true (id_70[a](1): boolean)
 PostCondition: Boolean constant true (id_70[a](1): boolean)
 RepeatCondition: Boolean constant false (id_68[a](0): boolean)
 ActionCompleteCondition: (id_144[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 retTestFunction: retTestFunction (id_72[a](-1): int)
  Drive{
   State: Drive (id_75[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: Boolean constant true (id_70[a](1): boolean)
   EndCondition: (id_184[a](0): ((id_182[a](0): interruptibleCommandHandleValues(Drive command_handle (id_159[a](COMMAND_SENT_TO_SYSTEM): command_handle))) || (id_171[a](0): (IntegerValue (id_173[a](10): int) == retTestFunction (id_72[a](-1): int)))))
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: (id_176[i](UNKNOWN): (id_180[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_178[a](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_163[i](UNKNOWN): isknown(Drive command_handle (id_159[a](COMMAND_SENT_TO_SYSTEM): command_handle)))
   AbortCompleteCondition: Drive abortComplete (id_161[a](UNKNOWN): boolean)
   Command handle: Drive command_handle (id_159[a](COMMAND_SENT_TO_SYSTEM): command_handle)
   retTestFunction: retTestFunction (id_72[a](-1): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](WAITING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: (id_201[a](0): (id_205[a](0): (Drive command_handle (id_159[a](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_203[a](COMMAND_RCVD_BY_SYSTEM): command_handle))))
   EndCondition: Boolean constant true (id_70[a](1): boolean)
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: Boolean constant true (id_70[a](1): boolean)
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_193[i](UNKNOWN): isknown(NextWaypoint command_handle (id_189[i](UNKNOWN): command_handle)))
   AbortCompleteCondition: NextWaypoint abortComplete (id_191[i](UNKNOWN): boolean)
   Command handle: NextWaypoint command_handle (id_189[i](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
 SkipCondition: Boolean constant false (id_68[a](0): boolean)
 StartCondition: Boolean constant true (id_70[a](1): boolean)
 EndCondition: (id_150[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_68[a](0): boolean)
 InvariantCondition: Boolean constant true (id_70[a](1): boolean)
 PreCondition: Boolean constant true (id_70[a](1): boolean)
 PostCondition: Boolean constant true (id_70[a](1): boolean)
 RepeatCondition: Boolean constant false (id_68[a](0): boolean)
 ActionCompleteCondition: (id_144[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 retTestFunction: retTestFunction (id_72[a](-1): int)
  Drive{
   State: Drive (id_75[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: Boolean constant true (id_70[a](1): boolean)
   EndCondition: (id_184[a](0): ((id_182[a](0): interruptibleCommandHandleValues(Drive command_handle (id_159[a](COMMAND_SENT_TO_SYSTEM): command_handle))) || (id_171[a](0): (IntegerValue (id_173[a](10): int) == retTestFunction (id_72[a](-1): int)))))
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: (id_176[i](UNKNOWN): (id_180[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_178[a](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_163[i](UNKNOWN): isknown(Drive command_handle (id_159[a](COMMAND_SENT_TO_SYSTEM): command_handle)))
   AbortCompleteCondition: Drive abortComplete (id_161[a](UNKNOWN): boolean)
   Command handle: Drive command_handle (id_159[a](COMMAND_SENT_TO_SYSTEM): command_handle)
   retTestFunction: retTestFunction (id_72[a](-1): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](WAITING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: (id_201[a](0): (id_205[a](0): (Drive command_handle (id_159[a](COMMAND_SENT_TO_SYSTEM): command_handle) == NodeCommandHandleValue (id_203[a](COMMAND_RCVD_BY_SYSTEM): command_handle))))
   EndCondition: Boolean constant true (id_70[a](1): boolean)
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: Boolean constant true (id_70[a](1): boolean)
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_193[i](UNKNOWN): isknown(NextWaypoint command_handle (id_189[i](UNKNOWN): command_handle)))
   AbortCompleteCondition: NextWaypoint abortComplete (id_191[i](UNKNOWN): boolean)
   Command handle: NextWaypoint command_handle (id_189[i](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Sending command ACK drive() = (string)COMMAND_RCVD_BY_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node NextWaypoint
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 6
[PlexilExec:handleConditionsChanged]Node NextWaypoint had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'NextWaypoint' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'NextWaypoint' on the state change queue in position 6
[PlexilExec:step][6:0] State change queue: NextWaypoint 
[PlexilExec:step][6:0:0] Transitioning node NextWaypoint from WAITING to EXECUTING
[PlexilExec:handleNeedsExecution]Storing action for node 'NextWaypoint' of type 'Command' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node NextWaypoint
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[Test:testOutput]Executing next_waypoint() into noId with ack NextWaypoint command_handle (id_189[a](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 6
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
 SkipCondition: Boolean constant false (id_68[a](0): boolean)
 StartCondition: Boolean constant true (id_70[a](1): boolean)
 EndCondition: (id_150[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_68[a](0): boolean)
 InvariantCondition: Boolean constant true (id_70[a](1): boolean)
 PreCondition: Boolean constant true (id_70[a](1): boolean)
 PostCondition: Boolean constant true (id_70[a](1): boolean)
 RepeatCondition: Boolean constant false (id_68[a](0): boolean)
 ActionCompleteCondition: (id_144[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 retTestFunction: retTestFunction (id_72[a](-1): int)
  Drive{
   State: Drive (id_75[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: Boolean constant true (id_70[a](1): boolean)
   EndCondition: (id_184[a](0): ((id_182[a](0): interruptibleCommandHandleValues(Drive command_handle (id_159[a](COMMAND_RCVD_BY_SYSTEM): command_handle))) || (id_171[a](0): (IntegerValue (id_173[a](10): int) == retTestFunction (id_72[a](-1): int)))))
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: (id_176[i](UNKNOWN): (id_180[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_RCVD_BY_SYSTEM): command_handle) == NodeCommandHandleValue (id_178[a](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_163[i](UNKNOWN): isknown(Drive command_handle (id_159[a](COMMAND_RCVD_BY_SYSTEM): command_handle)))
   AbortCompleteCondition: Drive abortComplete (id_161[a](UNKNOWN): boolean)
   Command handle: Drive command_handle (id_159[a](COMMAND_RCVD_BY_SYSTEM): command_handle)
   retTestFunction: retTestFunction (id_72[a](-1): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: (id_201[i](UNKNOWN): (id_205[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_RCVD_BY_SYSTEM): command_handle) == NodeCommandHandleValue (id_203[a](COMMAND_RCVD_BY_SYSTEM): command_handle))))
   EndCondition: Boolean constant true (id_70[a](1): boolean)
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: Boolean constant true (id_70[a](1): boolean)
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_193[i](UNKNOWN): isknown(NextWaypoint command_handle (id_189[a](UNKNOWN): command_handle)))
   AbortCompleteCondition: NextWaypoint abortComplete (id_191[a](UNKNOWN): boolean)
   Command handle: NextWaypoint command_handle (id_189[a](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 7
[PlexilExec:handleConditionsChanged]Node NextWaypoint had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'NextWaypoint' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'NextWaypoint' on the state change queue in position 7
[PlexilExec:step][7:0] State change queue: NextWaypoint 
[PlexilExec:step][7:0:0] Transitioning node NextWaypoint from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node NextWaypoint
[PlexilExec:handleConditionsChanged]Node NextWaypoint had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'NextWaypoint' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 7
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
 SkipCondition: Boolean constant false (id_68[a](0): boolean)
 StartCondition: Boolean constant true (id_70[a](1): boolean)
 EndCondition: (id_150[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_68[a](0): boolean)
 InvariantCondition: Boolean constant true (id_70[a](1): boolean)
 PreCondition: Boolean constant true (id_70[a](1): boolean)
 PostCondition: Boolean constant true (id_70[a](1): boolean)
 RepeatCondition: Boolean constant false (id_68[a](0): boolean)
 ActionCompleteCondition: (id_144[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 retTestFunction: retTestFunction (id_72[a](-1): int)
  Drive{
   State: Drive (id_75[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: Boolean constant true (id_70[a](1): boolean)
   EndCondition: (id_184[a](0): ((id_182[a](0): interruptibleCommandHandleValues(Drive command_handle (id_159[a](COMMAND_RCVD_BY_SYSTEM): command_handle))) || (id_171[a](0): (IntegerValue (id_173[a](10): int) == retTestFunction (id_72[a](-1): int)))))
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: (id_176[i](UNKNOWN): (id_180[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_RCVD_BY_SYSTEM): command_handle) == NodeCommandHandleValue (id_178[a](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_163[i](UNKNOWN): isknown(Drive command_handle (id_159[a](COMMAND_RCVD_BY_SYSTEM): command_handle)))
   AbortCompleteCondition: Drive abortComplete (id_161[a](UNKNOWN): boolean)
   Command handle: Drive command_handle (id_159[a](COMMAND_RCVD_BY_SYSTEM): command_handle)
   retTestFunction: retTestFunction (id_72[a](-1): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](FINISHING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: (id_201[i](UNKNOWN): (id_205[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_RCVD_BY_SYSTEM): command_handle) == NodeCommandHandleValue (id_203[a](COMMAND_RCVD_BY_SYSTEM): command_handle))))
   EndCondition: Boolean constant true (id_70[a](1): boolean)
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: Boolean constant true (id_70[a](1): boolean)
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_193[a](0): isknown(NextWaypoint command_handle (id_189[a](UNKNOWN): command_handle)))
   AbortCompleteCondition: NextWaypoint abortComplete (id_191[a](UNKNOWN): boolean)
   Command handle: NextWaypoint command_handle (id_189[a](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Sending command ACK drive() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 8
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 8
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
 SkipCondition: Boolean constant false (id_68[a](0): boolean)
 StartCondition: Boolean constant true (id_70[a](1): boolean)
 EndCondition: (id_150[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_68[a](0): boolean)
 InvariantCondition: Boolean constant true (id_70[a](1): boolean)
 PreCondition: Boolean constant true (id_70[a](1): boolean)
 PostCondition: Boolean constant true (id_70[a](1): boolean)
 RepeatCondition: Boolean constant false (id_68[a](0): boolean)
 ActionCompleteCondition: (id_144[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 retTestFunction: retTestFunction (id_72[a](-1): int)
  Drive{
   State: Drive (id_75[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: Boolean constant true (id_70[a](1): boolean)
   EndCondition: (id_184[a](0): ((id_182[a](0): interruptibleCommandHandleValues(Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle))) || (id_171[a](0): (IntegerValue (id_173[a](10): int) == retTestFunction (id_72[a](-1): int)))))
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: (id_176[i](UNKNOWN): (id_180[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_178[a](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_163[i](UNKNOWN): isknown(Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle)))
   AbortCompleteCondition: Drive abortComplete (id_161[a](UNKNOWN): boolean)
   Command handle: Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle)
   retTestFunction: retTestFunction (id_72[a](-1): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](FINISHING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: (id_201[i](UNKNOWN): (id_205[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_203[a](COMMAND_RCVD_BY_SYSTEM): command_handle))))
   EndCondition: Boolean constant true (id_70[a](1): boolean)
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: Boolean constant true (id_70[a](1): boolean)
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_193[a](0): isknown(NextWaypoint command_handle (id_189[a](UNKNOWN): command_handle)))
   AbortCompleteCondition: NextWaypoint abortComplete (id_191[a](UNKNOWN): boolean)
   Command handle: NextWaypoint command_handle (id_189[a](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 9
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 9
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
 SkipCondition: Boolean constant false (id_68[a](0): boolean)
 StartCondition: Boolean constant true (id_70[a](1): boolean)
 EndCondition: (id_150[a](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_68[a](0): boolean)
 InvariantCondition: Boolean constant true (id_70[a](1): boolean)
 PreCondition: Boolean constant true (id_70[a](1): boolean)
 PostCondition: Boolean constant true (id_70[a](1): boolean)
 RepeatCondition: Boolean constant false (id_68[a](0): boolean)
 ActionCompleteCondition: (id_144[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 retTestFunction: retTestFunction (id_72[a](-1): int)
  Drive{
   State: Drive (id_75[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: Boolean constant true (id_70[a](1): boolean)
   EndCondition: (id_184[a](0): ((id_182[a](0): interruptibleCommandHandleValues(Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle))) || (id_171[a](0): (IntegerValue (id_173[a](10): int) == retTestFunction (id_72[a](-1): int)))))
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: (id_176[i](UNKNOWN): (id_180[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_178[a](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_163[i](UNKNOWN): isknown(Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle)))
   AbortCompleteCondition: Drive abortComplete (id_161[a](UNKNOWN): boolean)
   Command handle: Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle)
   retTestFunction: retTestFunction (id_72[a](-1): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](FINISHING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: (id_201[i](UNKNOWN): (id_205[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_203[a](COMMAND_RCVD_BY_SYSTEM): command_handle))))
   EndCondition: Boolean constant true (id_70[a](1): boolean)
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: Boolean constant true (id_70[a](1): boolean)
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_193[a](0): isknown(NextWaypoint command_handle (id_189[a](UNKNOWN): command_handle)))
   AbortCompleteCondition: NextWaypoint abortComplete (id_191[a](UNKNOWN): boolean)
   Command handle: NextWaypoint command_handle (id_189[a](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Sending command ACK next_waypoint() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:notifyNodeConditionChanged] for node NextWaypoint
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 10
[PlexilExec:handleConditionsChanged]Node NextWaypoint had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'NextWaypoint' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'NextWaypoint' on the state change queue in position 8
[PlexilExec:step][10:0] State change queue: NextWaypoint 
[PlexilExec:step][10:0:0] Transitioning node NextWaypoint from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node NextWaypoint
[PlexilExec:handleConditionsChanged]Node NextWaypoint had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'NextWaypoint' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'NextWaypoint' on the state change queue in position 9
[PlexilExec:step][10:1] State change queue: NextWaypoint 
[PlexilExec:step][10:1:0] Transitioning node NextWaypoint from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node NextWaypoint
[PlexilExec:handleConditionsChanged]Node NextWaypoint had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'NextWaypoint' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 10
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
 SkipCondition: Boolean constant false (id_68[a](0): boolean)
 StartCondition: Boolean constant true (id_70[a](1): boolean)
 EndCondition: (id_150[a](0): childrenFinished(1:2))
 ExitCondition: Boolean constant false (id_68[a](0): boolean)
 InvariantCondition: Boolean constant true (id_70[a](1): boolean)
 PreCondition: Boolean constant true (id_70[a](1): boolean)
 PostCondition: Boolean constant true (id_70[a](1): boolean)
 RepeatCondition: Boolean constant false (id_68[a](0): boolean)
 ActionCompleteCondition: (id_144[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 retTestFunction: retTestFunction (id_72[a](-1): int)
  Drive{
   State: Drive (id_75[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(1:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: Boolean constant true (id_70[a](1): boolean)
   EndCondition: (id_184[a](0): ((id_182[a](0): interruptibleCommandHandleValues(Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle))) || (id_171[a](0): (IntegerValue (id_173[a](10): int) == retTestFunction (id_72[a](-1): int)))))
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: (id_176[i](UNKNOWN): (id_180[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_178[a](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_163[i](UNKNOWN): isknown(Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle)))
   AbortCompleteCondition: Drive abortComplete (id_161[a](UNKNOWN): boolean)
   Command handle: Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle)
   retTestFunction: retTestFunction (id_72[a](-1): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](FINISHED): state) (0)
   Outcome: NextWaypoint (id_112[a](SUCCESS): outcome)
   Command handle: NextWaypoint command_handle (id_189[i](COMMAND_SENT_TO_SYSTEM): command_handle)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 11
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 11
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
 SkipCondition: Boolean constant false (id_68[a](0): boolean)
 StartCondition: Boolean constant true (id_70[a](1): boolean)
 EndCondition: (id_150[a](0): childrenFinished(1:2))
 ExitCondition: Boolean constant false (id_68[a](0): boolean)
 InvariantCondition: Boolean constant true (id_70[a](1): boolean)
 PreCondition: Boolean constant true (id_70[a](1): boolean)
 PostCondition: Boolean constant true (id_70[a](1): boolean)
 RepeatCondition: Boolean constant false (id_68[a](0): boolean)
 ActionCompleteCondition: (id_144[i](UNKNOWN): childrenWaitingOrFinished(0:2))
 retTestFunction: retTestFunction (id_72[a](-1): int)
  Drive{
   State: Drive (id_75[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_150[a](0): childrenFinished(1:2))
   AncestorExitCondition: Boolean constant false (id_68[a](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_70[a](1): boolean)
   SkipCondition: Boolean constant false (id_68[a](0): boolean)
   StartCondition: Boolean constant true (id_70[a](1): boolean)
   EndCondition: (id_184[a](0): ((id_182[a](0): interruptibleCommandHandleValues(Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle))) || (id_171[a](0): (IntegerValue (id_173[a](10): int) == retTestFunction (id_72[a](-1): int)))))
   ExitCondition: Boolean constant false (id_68[a](0): boolean)
   InvariantCondition: Boolean constant true (id_70[a](1): boolean)
   PreCondition: Boolean constant true (id_70[a](1): boolean)
   PostCondition: (id_176[i](UNKNOWN): (id_180[i](UNKNOWN): (Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle) == NodeCommandHandleValue (id_178[a](COMMAND_SUCCESS): command_handle))))
   RepeatCondition: Boolean constant false (id_68[a](0): boolean)
   ActionCompleteCondition: (id_163[i](UNKNOWN): isknown(Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle)))
   AbortCompleteCondition: Drive abortComplete (id_161[a](UNKNOWN): boolean)
   Command handle: Drive command_handle (id_159[a](COMMAND_SUCCESS): command_handle)
   retTestFunction: retTestFunction (id_72[a](-1): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](FINISHED): state) (0)
   Outcome: NextWaypoint (id_112[a](SUCCESS): outcome)
   Command handle: NextWaypoint command_handle (id_189[i](COMMAND_SENT_TO_SYSTEM): command_handle)
  }
}

[Test:testOutput]Sending command result drive() = 10
[PlexilExec:notifyNodeConditionChanged] for node Drive
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 12
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 10
[PlexilExec:step][12:0] State change queue: Drive 
[PlexilExec:step][12:0:0] Transitioning node Drive from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 11
[PlexilExec:step][12:1] State change queue: Drive 
[PlexilExec:step][12:1:0] Transitioning node Drive from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Drive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Drive' on the state change queue in position 12
[PlexilExec:step][12:2] State change queue: Drive 
[PlexilExec:step][12:2:0] Transitioning node Drive from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:notifyNodeConditionChanged] for node Drive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 13
[PlexilExec:handleConditionsChanged]Node Drive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Drive' was previously eligible to transition but isn't now.
[PlexilExec:step][12:3] State change queue: SimpleDrive 
[PlexilExec:step][12:3:0] Transitioning node SimpleDrive from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 14
[PlexilExec:step][12:4] State change queue: SimpleDrive 
[PlexilExec:step][12:4:0] Transitioning node SimpleDrive from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'SimpleDrive' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'SimpleDrive' on the state change queue in position 15
[PlexilExec:step][12:5] State change queue: SimpleDrive 
[PlexilExec:step][12:5:0] Transitioning node SimpleDrive from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node SimpleDrive
[PlexilExec:handleConditionsChanged]Node SimpleDrive had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'SimpleDrive' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 12
[PlexilExec:printPlan]
SimpleDrive{
 State: SimpleDrive (id_34[a](FINISHED): state) (0)
 Outcome: SimpleDrive (id_36[a](SUCCESS): outcome)
 retTestFunction: retTestFunction (id_72[i](10): int)
  Drive{
   State: Drive (id_75[a](FINISHED): state) (0)
   Outcome: Drive (id_77[a](SUCCESS): outcome)
   Command handle: Drive command_handle (id_159[i](COMMAND_SUCCESS): command_handle)
   retTestFunction: retTestFunction (id_72[i](10): int)
  }
  NextWaypoint{
   State: NextWaypoint (id_110[a](FINISHED): state) (0)
   Outcome: NextWaypoint (id_112[a](SUCCESS): outcome)
   Command handle: NextWaypoint command_handle (id_189[i](COMMAND_SENT_TO_SYSTEM): command_handle)
  }
}

