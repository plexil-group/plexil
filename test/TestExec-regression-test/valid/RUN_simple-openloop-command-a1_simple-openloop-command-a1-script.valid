[PlexilExec:addPlan]Added plan: 
simple-openloop-command-a1{
 State: INACTIVE (0)
  Drive{
   State: INACTIVE (0)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node simple-openloop-command-a1 0x7fa62dc04af0
[PlexilExec:cycle] ==>Start cycle 1
[PlexilExec:step][1:0] Check queue: simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:handleConditionsChanged] Considering node simple-openloop-command-a1 0x7fa62dc04af0 for state transition.
[PlexilExec:addStateChangeNode] Placing node simple-openloop-command-a1 0x7fa62dc04af0 on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:step][1:0:0] Transitioning node simple-openloop-command-a1 0x7fa62dc04af0 from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node simple-openloop-command-a1 0x7fa62dc04af0
[PlexilExec:step][1:1] Check queue: simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:handleConditionsChanged] Considering node simple-openloop-command-a1 0x7fa62dc04af0 for state transition.
[PlexilExec:addStateChangeNode] Placing node simple-openloop-command-a1 0x7fa62dc04af0 on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:step][1:1:0] Transitioning node simple-openloop-command-a1 0x7fa62dc04af0 from WAITING to EXECUTING
[PlexilExec:notifyNodeConditionChanged] for node simple-openloop-command-a1 0x7fa62dc04af0
[PlexilExec:notifyNodeConditionChanged] for node Drive 0x7fa62dc04cf0
[PlexilExec:handleNeedsExecution] Storing action for node simple-openloop-command-a1 0x7fa62dc04af0 of type NodeList to be executed.
[PlexilExec:step][1:2] Check queue: simple-openloop-command-a1 0x7fa62dc04af0 Drive 0x7fa62dc04cf0 
[PlexilExec:handleConditionsChanged] Considering node Drive 0x7fa62dc04cf0 for state transition.
[PlexilExec:addStateChangeNode] Placing node Drive 0x7fa62dc04cf0 on the state change queue in position 3
[PlexilExec:step][1:2] State change queue: Drive 0x7fa62dc04cf0 
[PlexilExec:step][1:2:0] Transitioning node Drive 0x7fa62dc04cf0 from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node Drive 0x7fa62dc04cf0
[PlexilExec:notifyNodeConditionChanged] for node simple-openloop-command-a1 0x7fa62dc04af0
[PlexilExec:step][1:3] Check queue: Drive 0x7fa62dc04cf0 simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:handleConditionsChanged] Considering node Drive 0x7fa62dc04cf0 for state transition.
[PlexilExec:addStateChangeNode] Placing node Drive 0x7fa62dc04cf0 on the state change queue in position 4
[PlexilExec:step][1:3] State change queue: Drive 0x7fa62dc04cf0 
[PlexilExec:step][1:3:0] Transitioning node Drive 0x7fa62dc04cf0 from WAITING to EXECUTING
[PlexilExec:notifyNodeConditionChanged] for node Drive 0x7fa62dc04cf0
[PlexilExec:handleNeedsExecution] Storing action for node Drive 0x7fa62dc04cf0 of type Command to be executed.
[PlexilExec:notifyNodeConditionChanged] for node simple-openloop-command-a1 0x7fa62dc04af0
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[Test:testOutput]Executing drive() into noId with ack (CommandHandleVariable NodeCommandHandle 0x7fa62dc04e80 [a](UNKNOWN))
[PlexilExec:cycle] ==>End cycle 1
[PlexilExec:printPlan]
simple-openloop-command-a1{
 State: EXECUTING (0)
 EndCondition: (AllChildrenFinished Boolean simple-openloop-command-a10x7fa62dc04f80 [a](0))
 ActionCompleteCondition: (AllChildrenWaitingOrFinished Boolean simple-openloop-command-a10x7fa62dc04c20 [i](0))
  Drive{
   State: EXECUTING (0)
   PostCondition: (EQ Boolean 0x7fa62dc05000 [i](UNKNOWN) (CommandHandleVariable NodeCommandHandle 0x7fa62dc04e80 [a](UNKNOWN)) (CommandHandleValue NodeCommandHandle 0x1014c1070 [a](COMMAND_SENT_TO_SYSTEM)))
   ActionCompleteCondition: (CommandHandleKnown Boolean 0x7fa62dc04e38 [i](0))
   AbortCompleteCondition: (InternalVariable Boolean abortComplete 0x7fa62dc04ec0 [a](0))
   Command handle: (CommandHandleVariable NodeCommandHandle 0x7fa62dc04e80 [a](UNKNOWN))
  }
}

[Test:testOutput]Sending command ACK drive() = (string)COMMAND_SENT_TO_SYSTEM
[PlexilExec:cycle] ==>Start cycle 2
[PlexilExec:step][2:0] Check queue: Drive 0x7fa62dc04cf0 simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:handleConditionsChanged] Considering node Drive 0x7fa62dc04cf0 for state transition.
[PlexilExec:addStateChangeNode] Placing node Drive 0x7fa62dc04cf0 on the state change queue in position 5
[PlexilExec:step][2:0] State change queue: Drive 0x7fa62dc04cf0 
[PlexilExec:step][2:0:0] Transitioning node Drive 0x7fa62dc04cf0 from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node Drive 0x7fa62dc04cf0
[PlexilExec:notifyNodeConditionChanged] for node simple-openloop-command-a1 0x7fa62dc04af0
[PlexilExec:step][2:1] Check queue: Drive 0x7fa62dc04cf0 simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:handleConditionsChanged] Considering node Drive 0x7fa62dc04cf0 for state transition.
[PlexilExec:addStateChangeNode] Placing node Drive 0x7fa62dc04cf0 on the state change queue in position 6
[PlexilExec:step][2:1] State change queue: Drive 0x7fa62dc04cf0 
[PlexilExec:step][2:1:0] Transitioning node Drive 0x7fa62dc04cf0 from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node Drive 0x7fa62dc04cf0
[PlexilExec:notifyNodeConditionChanged] for node simple-openloop-command-a1 0x7fa62dc04af0
[PlexilExec:step][2:2] Check queue: Drive 0x7fa62dc04cf0 simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:handleConditionsChanged] Considering node Drive 0x7fa62dc04cf0 for state transition.
[PlexilExec:addStateChangeNode] Placing node Drive 0x7fa62dc04cf0 on the state change queue in position 7
[PlexilExec:step][2:2] State change queue: Drive 0x7fa62dc04cf0 
[PlexilExec:step][2:2:0] Transitioning node Drive 0x7fa62dc04cf0 from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node Drive 0x7fa62dc04cf0
[PlexilExec:notifyNodeConditionChanged] for node simple-openloop-command-a1 0x7fa62dc04af0
[PlexilExec:step][2:3] Check queue: Drive 0x7fa62dc04cf0 simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:handleConditionsChanged] Considering node simple-openloop-command-a1 0x7fa62dc04af0 for state transition.
[PlexilExec:addStateChangeNode] Placing node simple-openloop-command-a1 0x7fa62dc04af0 on the state change queue in position 8
[PlexilExec:step][2:3] State change queue: simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:step][2:3:0] Transitioning node simple-openloop-command-a1 0x7fa62dc04af0 from EXECUTING to FINISHING
[PlexilExec:notifyNodeConditionChanged] for node simple-openloop-command-a1 0x7fa62dc04af0
[PlexilExec:step][2:4] Check queue: simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:handleConditionsChanged] Considering node simple-openloop-command-a1 0x7fa62dc04af0 for state transition.
[PlexilExec:addStateChangeNode] Placing node simple-openloop-command-a1 0x7fa62dc04af0 on the state change queue in position 9
[PlexilExec:step][2:4] State change queue: simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:step][2:4:0] Transitioning node simple-openloop-command-a1 0x7fa62dc04af0 from FINISHING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node simple-openloop-command-a1 0x7fa62dc04af0
[PlexilExec:step][2:5] Check queue: simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:handleConditionsChanged] Considering node simple-openloop-command-a1 0x7fa62dc04af0 for state transition.
[PlexilExec:addStateChangeNode] Placing node simple-openloop-command-a1 0x7fa62dc04af0 on the state change queue in position 10
[PlexilExec:step][2:5] State change queue: simple-openloop-command-a1 0x7fa62dc04af0 
[PlexilExec:step][2:5:0] Transitioning node simple-openloop-command-a1 0x7fa62dc04af0 from ITERATION_ENDED to FINISHED
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle] ==>End cycle 2
[PlexilExec:printPlan]
simple-openloop-command-a1{
 State: FINISHED (0)
 Outcome: SUCCESS
  Drive{
   State: FINISHED (0)
   Outcome: SUCCESS
   Command handle: (CommandHandleVariable NodeCommandHandle 0x7fa62dc04e80 [i](UNKNOWN))
  }
}

