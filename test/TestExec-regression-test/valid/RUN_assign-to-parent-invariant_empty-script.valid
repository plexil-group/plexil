[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
Parent{
 State: Parent (id_28[a](INACTIVE): state) (inf)
  Child{
   State: Child (id_69[a](INACTIVE): state) (inf)
  }
}

[PlexilExec:notifyNodeConditionChanged] for node Parent
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Parent' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Parent' on the state change queue in position 1
[PlexilExec:step][1:0] State change queue: Parent 
[PlexilExec:step][1:0:0] Transitioning node Parent from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Parent' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Parent' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: Parent 
[PlexilExec:step][1:1:0] Transitioning node Parent from WAITING to EXECUTING
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:notifyNodeConditionChanged] for node Child
[PlexilExec:handleNeedsExecution]Storing action for node 'Parent' of type 'NodeList' to be executed.
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Parent' was previously eligible to transition but isn't now.
[PlexilExec:handleConditionsChanged]Node Child had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Child' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Child' on the state change queue in position 3
[PlexilExec:step][1:2] State change queue: Child 
[PlexilExec:step][1:2:0] Transitioning node Child from INACTIVE to WAITING
[PlexilExec:notifyNodeConditionChanged] for node Child
[PlexilExec:handleConditionsChanged]Node Child had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Child' for state transition.
[PlexilExec:handleConditionsChanged]Node 'Child' is an assignment node that could be executing.  Adding it to the resource contention list 
[PlexilExec:addToResourceContention]Adding node 'Child' to resource contention.
[PlexilExec:resolveResourceConflicts]Node 'Child' has best priority.  Adding it to be executed in position 4
[PlexilExec:step][1:3] State change queue: Child 
[PlexilExec:step][1:3:0] Transitioning node Child from WAITING to EXECUTING
[PlexilExec:handleNeedsExecution]Storing action for node 'Child' of type 'Assignment' to be executed.
[PlexilExec:notifyNodeConditionChanged] for node Child
[PlexilExec:performAssignments] performing 1 assignments and 0 retractions
[Test:testOutput]Assigning 'step_failed' (step_failed (id_66[a](0): boolean)) to 1
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
Parent{
 State: Parent (id_28[a](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_62[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_62[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_64[a](1): boolean)
 SkipCondition: Boolean constant false (id_62[a](0): boolean)
 StartCondition: Boolean constant true (id_64[a](1): boolean)
 EndCondition: (id_113[a](0): (id_117[a](0): (Child (id_69[a](EXECUTING): state) == NodeStateValue (id_115[a](FINISHED): state))))
 ExitCondition: Boolean constant false (id_62[a](0): boolean)
 InvariantCondition: (id_120[a](0): (step_failed (id_66[a](1): boolean) == BooleanValue (id_122[a](0): boolean)))
 PreCondition: Boolean constant true (id_64[a](1): boolean)
 PostCondition: Boolean constant true (id_64[a](1): boolean)
 RepeatCondition: Boolean constant false (id_62[a](0): boolean)
 ActionCompleteCondition: (id_103[i](UNKNOWN): childrenWaitingOrFinished(0:1))
 step_failed: step_failed (id_66[a](1): boolean)
  Child{
   State: Child (id_69[a](EXECUTING): state) (0)
   AncestorEndCondition: (id_113[a](0): (id_117[a](0): (Child (id_69[a](EXECUTING): state) == NodeStateValue (id_115[a](FINISHED): state))))
   AncestorExitCondition: Boolean constant false (id_62[a](0): boolean)
   AncestorInvariantCondition: (id_120[a](0): (step_failed (id_66[a](1): boolean) == BooleanValue (id_122[a](0): boolean)))
   SkipCondition: Boolean constant false (id_62[a](0): boolean)
   StartCondition: Boolean constant true (id_64[a](1): boolean)
   EndCondition: Boolean constant true (id_64[a](1): boolean)
   ExitCondition: Boolean constant false (id_62[a](0): boolean)
   InvariantCondition: Boolean constant true (id_64[a](1): boolean)
   PreCondition: Boolean constant true (id_64[a](1): boolean)
   PostCondition: Boolean constant true (id_64[a](1): boolean)
   RepeatCondition: Boolean constant false (id_62[a](0): boolean)
   ActionCompleteCondition: Child ack (id_127[a](1): boolean)
   AbortCompleteCondition: Child abortComplete (id_129[i](UNKNOWN): boolean)
   step_failed: step_failed (id_66[a](1): boolean)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:handleConditionsChanged]Node Child had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Child' for state transition.
[PlexilExec:handleConditionsChanged]Node 'Child' is an assignment node that is failing, and is already in the resource contention list
[PlexilExec:handleConditionsChanged]Placing node 'Child' on the state change queue in position 5
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Parent' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Parent' on the state change queue in position 6
[PlexilExec:resolveResourceConflicts] Ignoring Assignments for variable 'step_failed', which has a retraction pending
[PlexilExec:step][2:0] State change queue: Child Parent 
[PlexilExec:step][2:0:0] Transitioning node Child from EXECUTING to FAILING
[PlexilExec:step][2:0:1] Transitioning node Parent from EXECUTING to FAILING
[PlexilExec:notifyNodeConditionChanged] for node Child
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:performAssignments] performing 0 assignments and 1 retractions
[Test:testOutput]Restoring 'step_failed' (step_failed (id_66[a](1): boolean)) to 0
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
Parent{
 State: Parent (id_28[a](FAILING): state) (0)
 AncestorEndCondition: Boolean constant false (id_62[a](0): boolean)
 AncestorExitCondition: Boolean constant false (id_62[a](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_64[a](1): boolean)
 SkipCondition: Boolean constant false (id_62[a](0): boolean)
 StartCondition: Boolean constant true (id_64[a](1): boolean)
 EndCondition: (id_113[a](0): (id_117[a](0): (Child (id_69[a](FAILING): state) == NodeStateValue (id_115[a](FINISHED): state))))
 ExitCondition: Boolean constant false (id_62[a](0): boolean)
 InvariantCondition: (id_120[a](1): (step_failed (id_66[a](0): boolean) == BooleanValue (id_122[a](0): boolean)))
 PreCondition: Boolean constant true (id_64[a](1): boolean)
 PostCondition: Boolean constant true (id_64[a](1): boolean)
 RepeatCondition: Boolean constant false (id_62[a](0): boolean)
 ActionCompleteCondition: (id_103[a](0): childrenWaitingOrFinished(0:1))
 step_failed: step_failed (id_66[a](0): boolean)
  Child{
   State: Child (id_69[a](FAILING): state) (0)
   AncestorEndCondition: (id_113[a](0): (id_117[a](0): (Child (id_69[a](FAILING): state) == NodeStateValue (id_115[a](FINISHED): state))))
   AncestorExitCondition: Boolean constant false (id_62[a](0): boolean)
   AncestorInvariantCondition: (id_120[a](1): (step_failed (id_66[a](0): boolean) == BooleanValue (id_122[a](0): boolean)))
   SkipCondition: Boolean constant false (id_62[a](0): boolean)
   StartCondition: Boolean constant true (id_64[a](1): boolean)
   EndCondition: Boolean constant true (id_64[a](1): boolean)
   ExitCondition: Boolean constant false (id_62[a](0): boolean)
   InvariantCondition: Boolean constant true (id_64[a](1): boolean)
   PreCondition: Boolean constant true (id_64[a](1): boolean)
   PostCondition: Boolean constant true (id_64[a](1): boolean)
   RepeatCondition: Boolean constant false (id_62[a](0): boolean)
   ActionCompleteCondition: Child ack (id_127[i](1): boolean)
   AbortCompleteCondition: Child abortComplete (id_129[a](1): boolean)
   step_failed: step_failed (id_66[a](0): boolean)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:handleConditionsChanged]Node Child had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Child' for state transition.
[PlexilExec:handleConditionsChanged]Node 'Child' is an assignment node that is no longer possibly executing.  Removing it from resource contention.
[PlexilExec:handleConditionsChanged]Placing node 'Child' on the state change queue in position 7
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Parent' was previously eligible to transition but isn't now.
[PlexilExec:step][3:0] State change queue: Child 
[PlexilExec:step][3:0:0] Transitioning node Child from FAILING to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:notifyNodeConditionChanged] for node Child
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Parent' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Parent' on the state change queue in position 8
[PlexilExec:handleConditionsChanged]Node Child had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Child' was previously eligible to transition but isn't now.
[PlexilExec:step][3:1] State change queue: Parent 
[PlexilExec:step][3:1:0] Transitioning node Parent from FAILING to ITERATION_ENDED
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'Parent' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'Parent' on the state change queue in position 9
[PlexilExec:step][3:2] State change queue: Parent 
[PlexilExec:step][3:2:0] Transitioning node Parent from ITERATION_ENDED to FINISHED
[PlexilExec:notifyNodeConditionChanged] for node Parent
[PlexilExec:handleConditionsChanged]Node Parent had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'Parent' was previously eligible to transition but isn't now.
[PlexilExec:performAssignments] performing 0 assignments and 0 retractions
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
Parent{
 State: Parent (id_28[a](FINISHED): state) (0)
 Outcome: Parent (id_30[a](FAILURE): outcome)
 Failure type: Parent (id_32[a](INVARIANT_CONDITION_FAILED): failure)
 step_failed: step_failed (id_66[i](0): boolean)
  Child{
   State: Child (id_69[a](FINISHED): state) (0)
   Outcome: Child (id_71[a](FAILURE): outcome)
   Failure type: Child (id_73[a](PARENT_FAILED): failure)
   step_failed: step_failed (id_66[i](0): boolean)
  }
}

