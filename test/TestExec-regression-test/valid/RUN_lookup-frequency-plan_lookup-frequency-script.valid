[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
FrequencyLookupNode{
 State: (id_201[a](INACTIVE): state(INACTIVE)) (inf)
}

[PlexilExec:handleConditionsChanged]Node FrequencyLookupNode had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'FrequencyLookupNode' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'FrequencyLookupNode' on the state change queue in position 1
[Test:testOutput]Creating initial state temperature() = 0
[Test:testOutput]Creating initial state time() = 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: FrequencyLookupNode 
[PlexilExec:step][1:0:0] Transitioning node FrequencyLookupNode
[PlexilExec:handleConditionsChanged]Node FrequencyLookupNode had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'FrequencyLookupNode' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'FrequencyLookupNode' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: FrequencyLookupNode 
[PlexilExec:step][1:1:0] Transitioning node FrequencyLookupNode
[Test:testOutput]Registering frequency lookup temperature() with frequency (5, 5)
[PlexilExec:handleNeedsExecution]Storing action for node 'FrequencyLookupNode' to be executed.
[PlexilExec:handleConditionsChanged]Node FrequencyLookupNode had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'FrequencyLookupNode' was previously eligible to transition but isn't now.
[Test:testOutput]Executing sit_and_wait() into noId with ack (id_250[a](UNKNOWN): boolean)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
FrequencyLookupNode{
 State: (id_201[a](EXECUTING): state(EXECUTING)) (0)
 StartCondition: (id_218[a](1): boolean)
 EndCondition: (id_251[a](UNKNOWN): ((id_250[a](UNKNOWN): boolean) && (id_220[a](1): boolean))
 InvariantCondition: (id_244[a](1): ((id_246[a](0): LookupWithFrequency(temperature(), (id_247[a](5): real), (id_247[a](5): real))) <= (id_248[a](100): real)))
 PreCondition: (id_224[a](1): boolean)
 PostCondition: (id_226[a](1): boolean)
 RepeatCondition: (id_228[a](0): boolean)
 AncestorInvariantCondition: (id_230[a](1): boolean)
 AncestorEndCondition: (id_232[a](0): boolean)
 ParentExecutingCondition: (id_234[a](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_236[a](UNKNOWN): boolean)
 AbortCompleteCondition: (id_249[i](UNKNOWN): boolean)
 ParentWaitingCondition: (id_240[a](0): boolean)
 ParentFinishedCondition: (id_242[a](0): boolean)
}

[Test:testOutput]Processing simultaneous event: time() = 0.5
[Test:testOutput]Processing simultaneous event: temperature() = 1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0.5
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
FrequencyLookupNode{
 State: (id_201[a](EXECUTING): state(EXECUTING)) (0)
 StartCondition: (id_218[a](1): boolean)
 EndCondition: (id_251[a](UNKNOWN): ((id_250[a](UNKNOWN): boolean) && (id_220[a](1): boolean))
 InvariantCondition: (id_244[a](1): ((id_246[a](0): LookupWithFrequency(temperature(), (id_247[a](5): real), (id_247[a](5): real))) <= (id_248[a](100): real)))
 PreCondition: (id_224[a](1): boolean)
 PostCondition: (id_226[a](1): boolean)
 RepeatCondition: (id_228[a](0): boolean)
 AncestorInvariantCondition: (id_230[a](1): boolean)
 AncestorEndCondition: (id_232[a](0): boolean)
 ParentExecutingCondition: (id_234[a](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_236[a](UNKNOWN): boolean)
 AbortCompleteCondition: (id_249[i](UNKNOWN): boolean)
 ParentWaitingCondition: (id_240[a](0): boolean)
 ParentFinishedCondition: (id_242[a](0): boolean)
}

[Test:testOutput]Processing simultaneous event: time() = 3
[Test:testOutput]Processing simultaneous event: temperature() = 10
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 3
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
FrequencyLookupNode{
 State: (id_201[a](EXECUTING): state(EXECUTING)) (0)
 StartCondition: (id_218[a](1): boolean)
 EndCondition: (id_251[a](UNKNOWN): ((id_250[a](UNKNOWN): boolean) && (id_220[a](1): boolean))
 InvariantCondition: (id_244[a](1): ((id_246[a](0): LookupWithFrequency(temperature(), (id_247[a](5): real), (id_247[a](5): real))) <= (id_248[a](100): real)))
 PreCondition: (id_224[a](1): boolean)
 PostCondition: (id_226[a](1): boolean)
 RepeatCondition: (id_228[a](0): boolean)
 AncestorInvariantCondition: (id_230[a](1): boolean)
 AncestorEndCondition: (id_232[a](0): boolean)
 ParentExecutingCondition: (id_234[a](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_236[a](UNKNOWN): boolean)
 AbortCompleteCondition: (id_249[i](UNKNOWN): boolean)
 ParentWaitingCondition: (id_240[a](0): boolean)
 ParentFinishedCondition: (id_242[a](0): boolean)
}

[Test:testOutput]Processing event: time() = 10
[PlexilExec:handleConditionsChanged]Node FrequencyLookupNode had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'FrequencyLookupNode' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'FrequencyLookupNode' on the state change queue in position 3
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:step][4:0] State change queue: FrequencyLookupNode 
[PlexilExec:step][4:0:0] Transitioning node FrequencyLookupNode
[Test:testOutput]Aborting sit_and_wait()
[PlexilExec:handleConditionsChanged]Node FrequencyLookupNode had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'FrequencyLookupNode' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
FrequencyLookupNode{
 State: (id_201[a](FAILING): state(FAILING)) (10)
 StartCondition: (id_218[a](1): boolean)
 EndCondition: (id_251[i](UNKNOWN): ((id_250[i](UNKNOWN): boolean) && (id_220[a](1): boolean))
 InvariantCondition: (id_244[i](UNKNOWN): ((id_246[i](UNKNOWN): LookupWithFrequency(temperature(), (id_247[i](5): real), (id_247[i](5): real))) <= (id_248[i](100): real)))
 PreCondition: (id_224[a](1): boolean)
 PostCondition: (id_226[a](1): boolean)
 RepeatCondition: (id_228[a](0): boolean)
 AncestorInvariantCondition: (id_230[a](1): boolean)
 AncestorEndCondition: (id_232[a](0): boolean)
 ParentExecutingCondition: (id_234[a](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_236[a](UNKNOWN): boolean)
 AbortCompleteCondition: (id_249[a](UNKNOWN): boolean)
 ParentWaitingCondition: (id_240[a](0): boolean)
 ParentFinishedCondition: (id_242[a](0): boolean)
}

[Test:testOutput]Sending abort ACK sit_and_wait() = 1
[Test:testOutput]Acknowledging abort into (id_249[a](UNKNOWN): boolean)
[PlexilExec:handleConditionsChanged]Node FrequencyLookupNode had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'FrequencyLookupNode' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'FrequencyLookupNode' on the state change queue in position 4
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 10
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:step][5:0] State change queue: FrequencyLookupNode 
[PlexilExec:step][5:0:0] Transitioning node FrequencyLookupNode
[PlexilExec:handleConditionsChanged]Node FrequencyLookupNode had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'FrequencyLookupNode' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'FrequencyLookupNode' on the state change queue in position 5
[PlexilExec:step][5:1] State change queue: FrequencyLookupNode 
[PlexilExec:step][5:1:0] Transitioning node FrequencyLookupNode
[PlexilExec:handleConditionsChanged]Node FrequencyLookupNode had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'FrequencyLookupNode' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
FrequencyLookupNode{
 State: (id_201[a](FINISHED): state(FINISHED)) (10)
 Outcome: (id_202[a](FAILURE):  outcome)
 Failure type: (id_203[a](INVARIANT_CONDITION_FALSE):  failure)
}

