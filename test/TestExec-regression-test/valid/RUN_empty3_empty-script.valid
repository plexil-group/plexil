[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
root{
 State: (id_233[a](INACTIVE): state(INACTIVE)) (inf)
  one{
   State: (id_278[a](INACTIVE): state(INACTIVE)) (inf)
  }
  two{
   State: (id_323[a](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:handleConditionsChanged]Node root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'root' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'root' on the state change queue in position 1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: root 
[PlexilExec:step][1:0:0] Transitioning node root
[PlexilExec:handleConditionsChanged]Node root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'root' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'root' on the state change queue in position 2
[PlexilExec:step][1:1] State change queue: root 
[PlexilExec:step][1:1:0] Transitioning node root
[PlexilExec:handleConditionsChanged]Node one had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'one' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'one' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node two had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'two' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'two' on the state change queue in position 4
[PlexilExec:handleNeedsExecution]Storing action for node 'root' of type 'NodeList' to be executed.
[PlexilExec:handleConditionsChanged]Node root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'root' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2] State change queue: one two 
[PlexilExec:step][1:2:0] Transitioning node one
[PlexilExec:handleConditionsChanged]Node one had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'one' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'one' on the state change queue in position 5
[PlexilExec:step][1:2:1] Transitioning node two
[PlexilExec:handleConditionsChanged]Node two had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'two' was previously eligible to transition but isn't now.
[PlexilExec:step][1:3] State change queue: one 
[PlexilExec:step][1:3:0] Transitioning node one
[PlexilExec:handleConditionsChanged]Node one had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'one' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'one' on the state change queue in position 6
[PlexilExec:step][1:4] State change queue: one 
[PlexilExec:step][1:4:0] Transitioning node one
[PlexilExec:handleConditionsChanged]Node one had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'one' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'one' on the state change queue in position 7
[PlexilExec:step][1:5] State change queue: one 
[PlexilExec:step][1:5:0] Transitioning node one
[PlexilExec:handleConditionsChanged]Node two had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'two' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'two' on the state change queue in position 8
[PlexilExec:handleConditionsChanged]Node one had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'one' was previously eligible to transition but isn't now.
[PlexilExec:step][1:6] State change queue: two 
[PlexilExec:step][1:6:0] Transitioning node two
[PlexilExec:handleConditionsChanged]Node two had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'two' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'two' on the state change queue in position 9
[PlexilExec:step][1:7] State change queue: two 
[PlexilExec:step][1:7:0] Transitioning node two
[PlexilExec:handleConditionsChanged]Node two had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'two' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'two' on the state change queue in position 10
[PlexilExec:step][1:8] State change queue: two 
[PlexilExec:step][1:8:0] Transitioning node two
[PlexilExec:handleConditionsChanged]Node root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'root' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'root' on the state change queue in position 11
[PlexilExec:handleConditionsChanged]Node two had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'two' was previously eligible to transition but isn't now.
[PlexilExec:step][1:9] State change queue: root 
[PlexilExec:step][1:9:0] Transitioning node root
[PlexilExec:handleConditionsChanged]Node root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'root' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'root' on the state change queue in position 12
[PlexilExec:step][1:10] State change queue: root 
[PlexilExec:step][1:10:0] Transitioning node root
[PlexilExec:handleConditionsChanged]Node root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'root' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'root' on the state change queue in position 13
[PlexilExec:step][1:11] State change queue: root 
[PlexilExec:step][1:11:0] Transitioning node root
[PlexilExec:handleConditionsChanged]Node root had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'root' was previously eligible to transition but isn't now.
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
root{
 State: (id_233[a](FINISHED): state(FINISHED)) (0)
 Outcome: (id_234[a](SUCCESS):  outcome)
  one{
   State: (id_278[a](FINISHED): state(FINISHED)) (0)
   Outcome: (id_279[a](SUCCESS):  outcome)
  }
  two{
   State: (id_323[a](FINISHED): state(FINISHED)) (0)
   Outcome: (id_324[a](SUCCESS):  outcome)
  }
}

