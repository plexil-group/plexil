[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:addPlan]Added plan: 
TestArrays{
 State: (id_262[au](INACTIVE): state(INACTIVE)) (inf)
  testIntStateVariable{
   State: (id_317[au](INACTIVE): state(INACTIVE)) (inf)
  }
  callBoolArrayCommand{
   State: (id_367[au](INACTIVE): state(INACTIVE)) (inf)
  }
  testCallBoolArrayCommand{
   State: (id_417[au](INACTIVE): state(INACTIVE)) (inf)
  }
}

[PlexilExec:handleConditionsChanged]Node TestArrays had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TestArrays' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TestArrays' on the state change queue in position 1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: TestArrays 
[PlexilExec:lock]Locking node TestArrays
[PlexilExec:step][1:0:0] Transitioning node TestArrays
[PlexilExec:handleConditionsChanged]Node TestArrays had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TestArrays' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TestArrays' on the state change queue in position 2
[PlexilExec:unlock]Unlocking node TestArrays
[PlexilExec:step][1:1] State change queue: TestArrays 
[PlexilExec:lock]Locking node TestArrays
[PlexilExec:step][1:1:0] Transitioning node TestArrays
[PlexilExec:handleConditionsChanged]Node testIntStateVariable had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'testIntStateVariable' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'testIntStateVariable' on the state change queue in position 3
[PlexilExec:handleConditionsChanged]Node callBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'callBoolArrayCommand' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'callBoolArrayCommand' on the state change queue in position 4
[PlexilExec:handleConditionsChanged]Node testCallBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'testCallBoolArrayCommand' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'testCallBoolArrayCommand' on the state change queue in position 5
[PlexilExec:handleNeedsExecution]Storing action for node 'TestArrays' of type 'NodeList' to be executed.
[PlexilExec:handleConditionsChanged]Node TestArrays had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'TestArrays' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node TestArrays
[PlexilExec:step][1:2] State change queue: testIntStateVariable callBoolArrayCommand testCallBoolArrayCommand 
[PlexilExec:lock]Locking node testIntStateVariable
[PlexilExec:lock]Locking node callBoolArrayCommand
[PlexilExec:lock]Locking node testCallBoolArrayCommand
[PlexilExec:step][1:2:0] Transitioning node testIntStateVariable
[Test:testOutput]Registering change lookup stateInteger() with tolerances 0
[PlexilExec:handleConditionsChanged]Node testIntStateVariable had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'testIntStateVariable' was previously eligible to transition but isn't now.
[PlexilExec:step][1:2:1] Transitioning node callBoolArrayCommand
[PlexilExec:handleConditionsChanged]Node callBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'callBoolArrayCommand' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'callBoolArrayCommand' on the state change queue in position 6
[PlexilExec:step][1:2:2] Transitioning node testCallBoolArrayCommand
[PlexilExec:handleConditionsChanged]Node testCallBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'testCallBoolArrayCommand' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node testIntStateVariable
[PlexilExec:unlock]Unlocking node callBoolArrayCommand
[PlexilExec:unlock]Unlocking node testCallBoolArrayCommand
[PlexilExec:step][1:3] State change queue: callBoolArrayCommand 
[PlexilExec:lock]Locking node callBoolArrayCommand
[PlexilExec:step][1:3:0] Transitioning node callBoolArrayCommand
[PlexilExec:handleNeedsExecution]Storing action for node 'callBoolArrayCommand' of type 'Command' to be executed.
[PlexilExec:handleConditionsChanged]Node callBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'callBoolArrayCommand' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node callBoolArrayCommand
[Test:testOutput]Executing boolArrayCommand() into (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>]) with ack (id_583[au](UNKNOWN): string)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
TestArrays{
 State: (id_262[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_280[au](0): boolean)
 StartCondition: (id_471[iu](UNKNOWN): ((id_473[iu](UNKNOWN): ((id_475[iu](UNKNOWN): ArrayElement: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])[(id_478[iu](0): int)]) == (id_479[iu](UNKNOWN): string))) && (id_480[iu](UNKNOWN): !(id_482[iu](UNKNOWN): isknown((id_484[iu](UNKNOWN): ArrayElement: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])[(id_487[iu](2): int)])))) && (id_488[iu](UNKNOWN): ((id_490[iu](UNKNOWN): ArrayElement: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])[(id_493[iu](0): int)]) == (id_494[iu](UNKNOWN): real))) && (id_495[iu](UNKNOWN): !(id_497[iu](UNKNOWN): isknown((id_499[iu](UNKNOWN): ArrayElement: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])[(id_502[iu](2): int)])))) && (id_503[iu](UNKNOWN): ((id_505[iu](UNKNOWN): ArrayElement: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])[(id_508[iu](0): int)]) == (id_509[iu](1): int))) && (id_510[iu](UNKNOWN): !(id_512[iu](UNKNOWN): isknown((id_514[iu](UNKNOWN): ArrayElement: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])[(id_517[iu](2): int)])))) && (id_518[iu](UNKNOWN): ArrayElement: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])[(id_521[iu](0): int)]) && (id_522[iu](UNKNOWN): !(id_524[iu](UNKNOWN): ArrayElement: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])[(id_527[iu](1): int)])) && (id_528[iu](UNKNOWN): !(id_530[iu](UNKNOWN): isknown((id_532[iu](UNKNOWN): ArrayElement: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])[(id_535[iu](2): int)])))))
 EndCondition: (id_468[au](0): childrenFinished(0:3))
 InvariantCondition: (id_286[au](1): boolean)
 PreCondition: (id_288[au](1): boolean)
 PostCondition: (id_290[au](1): boolean)
 RepeatCondition: (id_292[au](0): boolean)
 AncestorInvariantCondition: (id_294[au](1): boolean)
 AncestorEndCondition: (id_296[au](0): boolean)
 ParentExecutingCondition: (id_298[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_465[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_302[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_304[au](0): boolean)
 ParentFinishedCondition: (id_306[au](0): boolean)
 CommandHandleReceivedCondition: (id_308[au](1): boolean)
 command_handle: (id_265[au](UNKNOWN):  command_handle)
 x: (id_310[au](4): int)
 myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
 myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
 myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
 myBooleanArray: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])
  testIntStateVariable{
   State: (id_317[au](WAITING): state(WAITING)) (0)
   SkipCondition: (id_335[au](0): boolean)
   StartCondition: (id_557[au](UNKNOWN): ((id_559[au](UNKNOWN): LookupOnChange(5.53354e-322(), (id_562[au](0): real))) == (id_563[au](100): int)))
   EndCondition: (id_339[au](1): boolean)
   InvariantCondition: (id_341[au](1): boolean)
   PreCondition: (id_343[au](1): boolean)
   PostCondition: (id_345[au](1): boolean)
   RepeatCondition: (id_347[au](0): boolean)
   AncestorInvariantCondition: (id_540[au](1): (TransparentWrapper(id_536[auT]{1}((id_294[au](1): boolean)) && TransparentWrapper(id_538[auT]{1}((id_286[au](1): boolean)))
   AncestorEndCondition: (id_546[au](0): (TransparentWrapper(id_542[auT]{0}((id_296[au](0): boolean)) || TransparentWrapper(id_544[auT]{0}((id_468[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_549[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_548[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_355[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_357[au](UNKNOWN): boolean)
   ParentWaitingCondition: (id_552[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_551[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_555[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_554[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_363[au](1): boolean)
   command_handle: (id_320[au](UNKNOWN):  command_handle)
   x: (id_310[au](4): int)
   myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])
  }
  callBoolArrayCommand{
   State: (id_367[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_385[au](0): boolean)
   StartCondition: (id_387[au](1): boolean)
   EndCondition: (id_590[au](0): ((id_586[au](0): interruptibleCommandHandleValues((id_583[au](UNKNOWN): string))) || (id_588[au](0): ((id_584[au](0): isknown((id_583[au](UNKNOWN): string))) && (id_389[au](1): boolean)))
   InvariantCondition: (id_391[au](1): boolean)
   PreCondition: (id_393[au](1): boolean)
   PostCondition: (id_395[au](1): boolean)
   RepeatCondition: (id_397[au](0): boolean)
   AncestorInvariantCondition: (id_568[au](1): (TransparentWrapper(id_564[auT]{1}((id_294[au](1): boolean)) && TransparentWrapper(id_566[auT]{1}((id_286[au](1): boolean)))
   AncestorEndCondition: (id_574[iu](UNKNOWN): (TransparentWrapper(id_570[iuT]{0}((id_296[au](0): boolean)) || TransparentWrapper(id_572[iuT]{0}((id_468[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_576[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_548[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_405[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_582[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_578[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_551[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_580[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_554[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_594[au](0): ((id_592[au](0): allCommandHandleValues((id_583[au](UNKNOWN): string))) && (id_413[au](1): boolean))
   command_handle: (id_370[au](UNKNOWN):  command_handle)
   x: (id_310[au](4): int)
   myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])
  }
  testCallBoolArrayCommand{
   State: (id_417[au](WAITING): state(WAITING)) (0)
   SkipCondition: (id_435[au](0): boolean)
   StartCondition: (id_616[au](0): ((id_618[au](UNKNOWN): (id_621[au](UNKNOWN): ((id_368[au](UNKNOWN):  outcome) == (id_620[au](SUCCESS):  outcome)))) && (id_623[au](0): ArrayElement: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])[(id_626[au](1): int)]))
   EndCondition: (id_439[au](1): boolean)
   InvariantCondition: (id_441[au](1): boolean)
   PreCondition: (id_443[au](1): boolean)
   PostCondition: (id_445[au](1): boolean)
   RepeatCondition: (id_447[au](0): boolean)
   AncestorInvariantCondition: (id_602[au](1): (TransparentWrapper(id_598[auT]{1}((id_294[au](1): boolean)) && TransparentWrapper(id_600[auT]{1}((id_286[au](1): boolean)))
   AncestorEndCondition: (id_608[au](0): (TransparentWrapper(id_604[auT]{0}((id_296[au](0): boolean)) || TransparentWrapper(id_606[auT]{0}((id_468[au](0): childrenFinished(0:3))))
   ParentExecutingCondition: (id_610[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_548[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_455[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_457[au](UNKNOWN): boolean)
   ParentWaitingCondition: (id_612[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_551[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_614[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_554[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_463[au](1): boolean)
   command_handle: (id_420[au](UNKNOWN):  command_handle)
   x: (id_310[au](4): int)
   myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])
  }
}

[Test:testOutput]Processing event: stateInteger() = 100
[PlexilExec:handleConditionsChanged]Node testIntStateVariable had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'testIntStateVariable' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'testIntStateVariable' on the state change queue in position 7
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: testIntStateVariable 
[PlexilExec:lock]Locking node testIntStateVariable
[PlexilExec:step][2:0:0] Transitioning node testIntStateVariable
[PlexilExec:handleConditionsChanged]Node testIntStateVariable had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'testIntStateVariable' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'testIntStateVariable' on the state change queue in position 8
[PlexilExec:unlock]Unlocking node testIntStateVariable
[PlexilExec:step][2:1] State change queue: testIntStateVariable 
[PlexilExec:lock]Locking node testIntStateVariable
[PlexilExec:step][2:1:0] Transitioning node testIntStateVariable
[PlexilExec:handleConditionsChanged]Node testIntStateVariable had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'testIntStateVariable' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'testIntStateVariable' on the state change queue in position 9
[PlexilExec:unlock]Unlocking node testIntStateVariable
[PlexilExec:step][2:2] State change queue: testIntStateVariable 
[PlexilExec:lock]Locking node testIntStateVariable
[PlexilExec:step][2:2:0] Transitioning node testIntStateVariable
[PlexilExec:handleConditionsChanged]Node testIntStateVariable had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'testIntStateVariable' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node testIntStateVariable
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
TestArrays{
 State: (id_262[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_280[au](0): boolean)
 StartCondition: (id_471[iu](UNKNOWN): ((id_473[iu](UNKNOWN): ((id_475[iu](UNKNOWN): ArrayElement: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])[(id_478[iu](0): int)]) == (id_479[iu](UNKNOWN): string))) && (id_480[iu](UNKNOWN): !(id_482[iu](UNKNOWN): isknown((id_484[iu](UNKNOWN): ArrayElement: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])[(id_487[iu](2): int)])))) && (id_488[iu](UNKNOWN): ((id_490[iu](UNKNOWN): ArrayElement: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])[(id_493[iu](0): int)]) == (id_494[iu](UNKNOWN): real))) && (id_495[iu](UNKNOWN): !(id_497[iu](UNKNOWN): isknown((id_499[iu](UNKNOWN): ArrayElement: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])[(id_502[iu](2): int)])))) && (id_503[iu](UNKNOWN): ((id_505[iu](UNKNOWN): ArrayElement: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])[(id_508[iu](0): int)]) == (id_509[iu](1): int))) && (id_510[iu](UNKNOWN): !(id_512[iu](UNKNOWN): isknown((id_514[iu](UNKNOWN): ArrayElement: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])[(id_517[iu](2): int)])))) && (id_518[iu](UNKNOWN): ArrayElement: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])[(id_521[iu](0): int)]) && (id_522[iu](UNKNOWN): !(id_524[iu](UNKNOWN): ArrayElement: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])[(id_527[iu](1): int)])) && (id_528[iu](UNKNOWN): !(id_530[iu](UNKNOWN): isknown((id_532[iu](UNKNOWN): ArrayElement: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])[(id_535[iu](2): int)])))))
 EndCondition: (id_468[au](0): childrenFinished(1:3))
 InvariantCondition: (id_286[au](1): boolean)
 PreCondition: (id_288[au](1): boolean)
 PostCondition: (id_290[au](1): boolean)
 RepeatCondition: (id_292[au](0): boolean)
 AncestorInvariantCondition: (id_294[au](1): boolean)
 AncestorEndCondition: (id_296[au](0): boolean)
 ParentExecutingCondition: (id_298[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_465[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_302[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_304[au](0): boolean)
 ParentFinishedCondition: (id_306[au](0): boolean)
 CommandHandleReceivedCondition: (id_308[au](1): boolean)
 command_handle: (id_265[au](UNKNOWN):  command_handle)
 x: (id_310[au](4): int)
 myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
 myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
 myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
 myBooleanArray: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])
  testIntStateVariable{
   State: (id_317[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_318[au](SUCCESS):  outcome)
   x: (id_310[au](4): int)
   myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])
  }
  callBoolArrayCommand{
   State: (id_367[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_385[au](0): boolean)
   StartCondition: (id_387[au](1): boolean)
   EndCondition: (id_590[au](0): ((id_586[au](0): interruptibleCommandHandleValues((id_583[au](UNKNOWN): string))) || (id_588[au](0): ((id_584[au](0): isknown((id_583[au](UNKNOWN): string))) && (id_389[au](1): boolean)))
   InvariantCondition: (id_391[au](1): boolean)
   PreCondition: (id_393[au](1): boolean)
   PostCondition: (id_395[au](1): boolean)
   RepeatCondition: (id_397[au](0): boolean)
   AncestorInvariantCondition: (id_568[au](1): (TransparentWrapper(id_564[auT]{1}((id_294[au](1): boolean)) && TransparentWrapper(id_566[auT]{1}((id_286[au](1): boolean)))
   AncestorEndCondition: (id_574[iu](UNKNOWN): (TransparentWrapper(id_570[iuT]{0}((id_296[au](0): boolean)) || TransparentWrapper(id_572[iuT]{0}((id_468[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_576[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_548[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_405[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_582[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_578[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_551[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_580[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_554[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_594[au](0): ((id_592[au](0): allCommandHandleValues((id_583[au](UNKNOWN): string))) && (id_413[au](1): boolean))
   command_handle: (id_370[au](UNKNOWN):  command_handle)
   x: (id_310[au](4): int)
   myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])
  }
  testCallBoolArrayCommand{
   State: (id_417[au](WAITING): state(WAITING)) (0)
   SkipCondition: (id_435[au](0): boolean)
   StartCondition: (id_616[au](0): ((id_618[au](UNKNOWN): (id_621[au](UNKNOWN): ((id_368[au](UNKNOWN):  outcome) == (id_620[au](SUCCESS):  outcome)))) && (id_623[au](0): ArrayElement: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])[(id_626[au](1): int)]))
   EndCondition: (id_439[au](1): boolean)
   InvariantCondition: (id_441[au](1): boolean)
   PreCondition: (id_443[au](1): boolean)
   PostCondition: (id_445[au](1): boolean)
   RepeatCondition: (id_447[au](0): boolean)
   AncestorInvariantCondition: (id_602[au](1): (TransparentWrapper(id_598[auT]{1}((id_294[au](1): boolean)) && TransparentWrapper(id_600[auT]{1}((id_286[au](1): boolean)))
   AncestorEndCondition: (id_608[au](0): (TransparentWrapper(id_604[auT]{0}((id_296[au](0): boolean)) || TransparentWrapper(id_606[auT]{0}((id_468[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_610[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_548[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_455[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_457[au](UNKNOWN): boolean)
   ParentWaitingCondition: (id_612[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_551[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_614[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_554[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_463[au](1): boolean)
   command_handle: (id_420[au](UNKNOWN):  command_handle)
   x: (id_310[au](4): int)
   myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[au](Array: [1, 0, <unknown>]): Array: [true, false, <unknown>])
  }
}

[Test:testOutput]Sending command result boolArrayCommand() = 5.73116e-322
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
TestArrays{
 State: (id_262[au](EXECUTING): state(EXECUTING)) (0)
 SkipCondition: (id_280[au](0): boolean)
 StartCondition: (id_471[iu](UNKNOWN): ((id_473[iu](UNKNOWN): ((id_475[iu](UNKNOWN): ArrayElement: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])[(id_478[iu](0): int)]) == (id_479[iu](UNKNOWN): string))) && (id_480[iu](UNKNOWN): !(id_482[iu](UNKNOWN): isknown((id_484[iu](UNKNOWN): ArrayElement: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])[(id_487[iu](2): int)])))) && (id_488[iu](UNKNOWN): ((id_490[iu](UNKNOWN): ArrayElement: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])[(id_493[iu](0): int)]) == (id_494[iu](UNKNOWN): real))) && (id_495[iu](UNKNOWN): !(id_497[iu](UNKNOWN): isknown((id_499[iu](UNKNOWN): ArrayElement: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])[(id_502[iu](2): int)])))) && (id_503[iu](UNKNOWN): ((id_505[iu](UNKNOWN): ArrayElement: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])[(id_508[iu](0): int)]) == (id_509[iu](1): int))) && (id_510[iu](UNKNOWN): !(id_512[iu](UNKNOWN): isknown((id_514[iu](UNKNOWN): ArrayElement: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])[(id_517[iu](2): int)])))) && (id_518[iu](UNKNOWN): ArrayElement: (id_314[au](Array: [1, 1, 1]): Array: [true, true, true])[(id_521[iu](0): int)]) && (id_522[iu](UNKNOWN): !(id_524[iu](UNKNOWN): ArrayElement: (id_314[au](Array: [1, 1, 1]): Array: [true, true, true])[(id_527[iu](1): int)])) && (id_528[iu](UNKNOWN): !(id_530[iu](UNKNOWN): isknown((id_532[iu](UNKNOWN): ArrayElement: (id_314[au](Array: [1, 1, 1]): Array: [true, true, true])[(id_535[iu](2): int)])))))
 EndCondition: (id_468[au](0): childrenFinished(1:3))
 InvariantCondition: (id_286[au](1): boolean)
 PreCondition: (id_288[au](1): boolean)
 PostCondition: (id_290[au](1): boolean)
 RepeatCondition: (id_292[au](0): boolean)
 AncestorInvariantCondition: (id_294[au](1): boolean)
 AncestorEndCondition: (id_296[au](0): boolean)
 ParentExecutingCondition: (id_298[au](1): boolean)
 AllChildrenWaitingOrFinishedCondition: (id_465[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 AbortCompleteCondition: (id_302[au](UNKNOWN): boolean)
 ParentWaitingCondition: (id_304[au](0): boolean)
 ParentFinishedCondition: (id_306[au](0): boolean)
 CommandHandleReceivedCondition: (id_308[au](1): boolean)
 command_handle: (id_265[au](UNKNOWN):  command_handle)
 x: (id_310[au](4): int)
 myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
 myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
 myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
 myBooleanArray: (id_314[au](Array: [1, 1, 1]): Array: [true, true, true])
  testIntStateVariable{
   State: (id_317[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_318[au](SUCCESS):  outcome)
   x: (id_310[au](4): int)
   myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[au](Array: [1, 1, 1]): Array: [true, true, true])
  }
  callBoolArrayCommand{
   State: (id_367[au](EXECUTING): state(EXECUTING)) (0)
   SkipCondition: (id_385[au](0): boolean)
   StartCondition: (id_387[au](1): boolean)
   EndCondition: (id_590[au](0): ((id_586[au](0): interruptibleCommandHandleValues((id_583[au](UNKNOWN): string))) || (id_588[au](0): ((id_584[au](0): isknown((id_583[au](UNKNOWN): string))) && (id_389[au](1): boolean)))
   InvariantCondition: (id_391[au](1): boolean)
   PreCondition: (id_393[au](1): boolean)
   PostCondition: (id_395[au](1): boolean)
   RepeatCondition: (id_397[au](0): boolean)
   AncestorInvariantCondition: (id_568[au](1): (TransparentWrapper(id_564[auT]{1}((id_294[au](1): boolean)) && TransparentWrapper(id_566[auT]{1}((id_286[au](1): boolean)))
   AncestorEndCondition: (id_574[iu](UNKNOWN): (TransparentWrapper(id_570[iuT]{0}((id_296[au](0): boolean)) || TransparentWrapper(id_572[iuT]{0}((id_468[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_576[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_548[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_405[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_582[iu](UNKNOWN): boolean)
   ParentWaitingCondition: (id_578[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_551[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_580[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_554[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_594[au](0): ((id_592[au](0): allCommandHandleValues((id_583[au](UNKNOWN): string))) && (id_413[au](1): boolean))
   command_handle: (id_370[au](UNKNOWN):  command_handle)
   x: (id_310[au](4): int)
   myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[au](Array: [1, 1, 1]): Array: [true, true, true])
  }
  testCallBoolArrayCommand{
   State: (id_417[au](WAITING): state(WAITING)) (0)
   SkipCondition: (id_435[au](0): boolean)
   StartCondition: (id_616[au](UNKNOWN): ((id_618[au](UNKNOWN): (id_621[au](UNKNOWN): ((id_368[au](UNKNOWN):  outcome) == (id_620[au](SUCCESS):  outcome)))) && (id_623[au](1): ArrayElement: (id_314[au](Array: [1, 1, 1]): Array: [true, true, true])[(id_626[au](1): int)]))
   EndCondition: (id_439[au](1): boolean)
   InvariantCondition: (id_441[au](1): boolean)
   PreCondition: (id_443[au](1): boolean)
   PostCondition: (id_445[au](1): boolean)
   RepeatCondition: (id_447[au](0): boolean)
   AncestorInvariantCondition: (id_602[au](1): (TransparentWrapper(id_598[auT]{1}((id_294[au](1): boolean)) && TransparentWrapper(id_600[auT]{1}((id_286[au](1): boolean)))
   AncestorEndCondition: (id_608[au](0): (TransparentWrapper(id_604[auT]{0}((id_296[au](0): boolean)) || TransparentWrapper(id_606[auT]{0}((id_468[au](0): childrenFinished(1:3))))
   ParentExecutingCondition: (id_610[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_548[au](EXECUTING): state(EXECUTING))))
   AllChildrenWaitingOrFinishedCondition: (id_455[au](UNKNOWN): boolean)
   AbortCompleteCondition: (id_457[au](UNKNOWN): boolean)
   ParentWaitingCondition: (id_612[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_551[au](WAITING): state(WAITING))))
   ParentFinishedCondition: (id_614[iu](UNKNOWN): ((id_262[au](EXECUTING): state(EXECUTING)) == (id_554[au](FINISHED): state(FINISHED))))
   CommandHandleReceivedCondition: (id_463[au](1): boolean)
   command_handle: (id_420[au](UNKNOWN):  command_handle)
   x: (id_310[au](4): int)
   myStringArray: (id_311[au](Array: ["string 1", "string 2", <unknown>]): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[au](Array: [1.1, 2.2, <unknown>]): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[au](Array: [1, 2, <unknown>]): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[au](Array: [1, 1, 1]): Array: [true, true, true])
  }
}

[Test:testOutput]Sending command ACK boolArrayCommand() = (string)COMMAND_SUCCESS
[PlexilExec:handleConditionsChanged]Node callBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'callBoolArrayCommand' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'callBoolArrayCommand' on the state change queue in position 10
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:step][4:0] State change queue: callBoolArrayCommand 
[PlexilExec:lock]Locking node callBoolArrayCommand
[PlexilExec:step][4:0:0] Transitioning node callBoolArrayCommand
[PlexilExec:handleConditionsChanged]Node testCallBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'testCallBoolArrayCommand' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'testCallBoolArrayCommand' on the state change queue in position 11
[PlexilExec:handleConditionsChanged]Node callBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'callBoolArrayCommand' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'callBoolArrayCommand' on the state change queue in position 12
[PlexilExec:unlock]Unlocking node callBoolArrayCommand
[PlexilExec:step][4:1] State change queue: testCallBoolArrayCommand callBoolArrayCommand 
[PlexilExec:lock]Locking node testCallBoolArrayCommand
[PlexilExec:lock]Locking node callBoolArrayCommand
[PlexilExec:step][4:1:0] Transitioning node testCallBoolArrayCommand
[PlexilExec:handleConditionsChanged]Node testCallBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'testCallBoolArrayCommand' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'testCallBoolArrayCommand' on the state change queue in position 13
[PlexilExec:step][4:1:1] Transitioning node callBoolArrayCommand
[PlexilExec:handleConditionsChanged]Node callBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'callBoolArrayCommand' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node testCallBoolArrayCommand
[PlexilExec:unlock]Unlocking node callBoolArrayCommand
[PlexilExec:step][4:2] State change queue: testCallBoolArrayCommand 
[PlexilExec:lock]Locking node testCallBoolArrayCommand
[PlexilExec:step][4:2:0] Transitioning node testCallBoolArrayCommand
[PlexilExec:handleConditionsChanged]Node testCallBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'testCallBoolArrayCommand' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'testCallBoolArrayCommand' on the state change queue in position 14
[PlexilExec:unlock]Unlocking node testCallBoolArrayCommand
[PlexilExec:step][4:3] State change queue: testCallBoolArrayCommand 
[PlexilExec:lock]Locking node testCallBoolArrayCommand
[PlexilExec:step][4:3:0] Transitioning node testCallBoolArrayCommand
[PlexilExec:handleConditionsChanged]Node TestArrays had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TestArrays' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TestArrays' on the state change queue in position 15
[PlexilExec:handleConditionsChanged]Node testCallBoolArrayCommand had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'testCallBoolArrayCommand' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node testCallBoolArrayCommand
[PlexilExec:step][4:4] State change queue: TestArrays 
[PlexilExec:lock]Locking node TestArrays
[PlexilExec:step][4:4:0] Transitioning node TestArrays
[PlexilExec:handleConditionsChanged]Node TestArrays had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TestArrays' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TestArrays' on the state change queue in position 16
[PlexilExec:unlock]Unlocking node TestArrays
[PlexilExec:step][4:5] State change queue: TestArrays 
[PlexilExec:lock]Locking node TestArrays
[PlexilExec:step][4:5:0] Transitioning node TestArrays
[PlexilExec:handleConditionsChanged]Node TestArrays had a relevant condition change.
[PlexilExec:handleConditionsChanged]Considering node 'TestArrays' for state transition.
[PlexilExec:handleConditionsChanged]Placing node 'TestArrays' on the state change queue in position 17
[PlexilExec:unlock]Unlocking node TestArrays
[PlexilExec:step][4:6] State change queue: TestArrays 
[PlexilExec:lock]Locking node TestArrays
[PlexilExec:step][4:6:0] Transitioning node TestArrays
[PlexilExec:handleConditionsChanged]Node TestArrays had a relevant condition change.
[PlexilExec:handleConditionsChanged]Node 'TestArrays' was previously eligible to transition but isn't now.
[PlexilExec:unlock]Unlocking node TestArrays
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
TestArrays{
 State: (id_262[au](FINISHED): state(FINISHED)) (0)
 Outcome: (id_263[au](SUCCESS):  outcome)
 x: (id_310[iu](4): int)
 myStringArray: (id_311[iu](UNKNOWN): Array: ["string 1", "string 2", <unknown>])
 myRealArray: (id_312[iu](UNKNOWN): Array: [1.1, 2.2, <unknown>])
 myIntegerArray: (id_313[iu](UNKNOWN): Array: [1, 2, <unknown>])
 myBooleanArray: (id_314[iu](UNKNOWN): Array: [true, true, true])
  testIntStateVariable{
   State: (id_317[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_318[au](SUCCESS):  outcome)
   x: (id_310[iu](4): int)
   myStringArray: (id_311[iu](UNKNOWN): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[iu](UNKNOWN): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[iu](UNKNOWN): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[iu](UNKNOWN): Array: [true, true, true])
  }
  callBoolArrayCommand{
   State: (id_367[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_368[au](SUCCESS):  outcome)
   Command handle: (id_370[au](COMMAND_SUCCESS):  command_handle)
   x: (id_310[iu](4): int)
   myStringArray: (id_311[iu](UNKNOWN): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[iu](UNKNOWN): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[iu](UNKNOWN): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[iu](UNKNOWN): Array: [true, true, true])
  }
  testCallBoolArrayCommand{
   State: (id_417[au](FINISHED): state(FINISHED)) (0)
   Outcome: (id_418[au](SUCCESS):  outcome)
   x: (id_310[iu](4): int)
   myStringArray: (id_311[iu](UNKNOWN): Array: ["string 1", "string 2", <unknown>])
   myRealArray: (id_312[iu](UNKNOWN): Array: [1.1, 2.2, <unknown>])
   myIntegerArray: (id_313[iu](UNKNOWN): Array: [1, 2, <unknown>])
   myBooleanArray: (id_314[iu](UNKNOWN): Array: [true, true, true])
  }
}

