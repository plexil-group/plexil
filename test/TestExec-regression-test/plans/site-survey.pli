;;; Copyright (c) 2006-2015, Universities Space Research Association (USRA).
;;;  All rights reserved.
;;;
;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions are met:
;;;     * Redistributions of source code must retain the above copyright
;;;       notice, this list of conditions and the following disclaimer.
;;;     * Redistributions in binary form must reproduce the above copyright
;;;       notice, this list of conditions and the following disclaimer in the
;;;       documentation and/or other materials provided with the distribution.
;;;     * Neither the name of the Universities Space Research Association nor the
;;;       names of its contributors may be used to endorse or promote products
;;;       derived from this software without specific prior written permission.
;;;
;;; THIS SOFTWARE IS PROVIDED BY USRA ``AS IS'' AND ANY EXPRESS OR IMPLIED
;;; WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
;;; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;;; DISCLAIMED. IN NO EVENT SHALL USRA BE LIABLE FOR ANY DIRECT, INDIRECT,
;;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;;; BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;;; OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;;; TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;;; USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(plexil-plan
 (global-declarations
  (command-declaration "get_next_inspection_point" (return "integer"))
  (command-declaration "move_to_waypoint"
                       (return "integer")
                       (parameter "string")
                       (parameter "string")
                       (parameter "real")
                       (parameter "real")
                       (parameter "real")
                       (parameter "real")
                       (parameter "real")
                       (parameter "real")
                       (parameter "real")
                       (parameter "real"))
  (command-declaration "acquire" (return "integer"))
  (state-declaration "name" (return "string"))
  (state-declaration "frame" (return "string"))
  (state-declaration "waypoint_x" (return "real"))
  (state-declaration "waypoint_y" (return "real"))
  (state-declaration "waypoint_z" (return "real"))
  (state-declaration "waypoint_a" (return "real"))
  (state-declaration "isDirectional" (return "real"))
  (state-declaration "tolerance" (return "real"))
  (state-declaration "headingTolerance" (return "real"))
  (state-declaration "hintedSpeed" (return "real"))
  (state-declaration "inspect_waypoint" (return "integer"))
  (state-declaration "task_id" (return "integer"))
  (state-declaration "timeout" (return "real"))
  (state-declaration "plan_paused" (return "boolean"))
  (state-declaration "abort_plan" (return "boolean"))
  )
  (list-node "SiteSurveyWithEOF"
    (end-condition (or (finished "SignalEndOfPlan") (finished "SendAbortUpdate") (= true (boolvar "abort_due_to_exception"))))
    (variables (integer "task_type")
               (boolean "is_aborted" false)
               (boolean "abort_due_to_exception" false)
               (integer "waypt_id")
               )
    (list
      (list-node "SiteSurveyWrapper"
        (variables (integer "task_type")
                   (boolean "is_paused" false)
                   )
        (end-condition (or (= 0 (intvar "task_type"))
                           (= true (boolvar "is_aborted"))
                           (= true (boolvar "abort_due_to_exception"))))
        (list
          (list-node "SiteSurvey"
            (variables (string "task_result_str")
                       (integer "cmd_return_val")
                       (string "cmd_name" "nil"))
            (repeat-condition (!= 0 (intvar "task_type")))
            (list
              (list-node "Loop"
                (start-condition (= false (boolvar "is_paused")))
                (end-condition (finished "CheckIfAbortPlan"))
                (list
                  (command-node "RequestNextWaypt"
                    (variables (integer "ret_val"))
                    (start-condition (= false (boolvar "is_paused")))
                    (post-condition (= 0 (intvar "ret_val")))
                    (end-condition (is-known (intvar "ret_val")))
                    (command-with-return (intvar "ret_val") "get_next_inspection_point"))
                  (assignment-node "SetWaypointRequestFailed"
                    (start-condition (failed "RequestNextWaypt"))
                    (assignment (stringvar "cmd_name") "get_next_inspection_point"))
                  (list-node "GetAndProcessWaypoint"
                    (variables (string "waypt_name")
                               (string "waypt_frame")
                               (real "waypt_x")
                               (real "waypt_y")
                               (real "waypt_z")
                               (real "waypt_a")
                               (real "waypt_is_directional")
                               (real "waypt_tolerance")
                               (real "waypt_heading_tolerance")
                               (real "waypt_hinted_speed")
                               (real "waypt_timeout"))
                    (start-condition (and (= false (boolvar "is_paused")) (finished "RequestNextWaypt")))
                    (pre-condition (successful "RequestNextWaypt"))
                    (invariant-condition (= false (boolvar "is_paused")))
                    (end-condition (or (failed "GetNewWaypt") (finished "DriveAndAcquire")))
                    (list
                      (list-node "GetNewWaypt"
                        (post-condition (and (successful "Get_x")
                                             (successful "Get_y")
                                             (successful "Get_task_type")
                                             (successful "Get_task_id")))
                        (list                   
                          (assignment-node "Get_name"
                            (assignment (stringvar "waypt_name") (lookup-now "name")))
                          (assignment-node "Get_frame"
                            (assignment (stringvar "waypt_frame") (lookup-now "frame")))
                          (assignment-node "Get_x"
                            (assignment (realvar "waypt_x") (lookup-now "waypoint_x")))
                          (assignment-node "Get_y"
                            (assignment (realvar "waypt_y") (lookup-now "waypoint_y")))
                          (assignment-node "Get_z"
                            (assignment (realvar "waypt_z") (lookup-now "waypoint_z")))
                          (assignment-node "Get_a"
                            (assignment (realvar "waypt_a") (lookup-now "waypoint_a")))
                          (assignment-node "Get_dir"
                            (assignment (realvar "waypt_is_directional") (lookup-now "isDirectional")))
                          (assignment-node "Get_tolerance"
                            (assignment (realvar "waypt_tolerance") (lookup-now "tolerance")))
                          (assignment-node "Get_heading_tolerance"
                            (assignment (realvar "waypt_heading_tolerance") (lookup-now "headingTolerance")))
                          (assignment-node "Get_hinted_speed"
                            (assignment (realvar "waypt_hinted_speed") (lookup-now "hintedSpeed")))
                          (assignment-node "Get_task_type"
                            (assignment (intvar "task_type") (lookup-now "inspect_waypoint")))
                          (assignment-node "Get_task_id"
                            (assignment (intvar "waypt_id") (lookup-now "task_id")))
                          (assignment-node "Get_timeout"
                            (assignment (realvar "waypt_timeout") (lookup-now "timeout")))))
                      (assignment-node "Cmd_Resest1"
                        (assignment (intvar "cmd_return_val") -1000))
                      (list-node "DriveAndAcquire"
                        (start-condition (finished "GetNewWaypt"))
                        (pre-condition (successful "GetNewWaypt"))
                        (list
                          ;; if lookup-now(inspect_waypoint) = 1 then waypoint is drive-through waypoint
                          (if (not (= 0 (intvar "task_type")))
                            (list-node "ProcessWaypoint"
                              (list
                                (sequence
                                    (command-node "DriveToWaypoint"
                                      (post-condition (= 0 (intvar "cmd_return_val")))
                                      ;; return values have the following semantics
                                      ;; -1 - Parsing problem in the command issued by the UE (used to be 2)
                                      ;; 0 - SUCCESS (same as before)
                                      ;; 1 - General CORBA exception (same as before)
                                      ;; 2 - EInterrupted (new)
                                      ;; 3 - ETimeout
                                      ;; 4 - EFailure
                                      ;; 5 - EUnknownName
                                      ;; 6 - EOutOfRange 
                                      (invariant-condition (or (= -1000 (intvar "cmd_return_val")) (= 0 (intvar "cmd_return_val")) (= 2 (intvar "cmd_return_val")) (= 3 (intvar "cmd_return_val"))))
                                      (end-condition (or (!= -1000 (intvar "cmd_return_val")) (= true (boolvar "is_aborted"))))
                                      (command-with-return (intvar "cmd_return_val")
                                                           "move_to_waypoint" 
                                                           (stringvar "waypt_name") 
                                                           (stringvar "waypt_frame") 
                                                           (realvar "waypt_x") 
                                                           (realvar "waypt_y") 
                                                           (realvar "waypt_z") 
                                                           (realvar "waypt_a") 
                                                           (realvar "waypt_is_directional") 
                                                           (realvar "waypt_tolerance") 
                                                           (realvar "waypt_heading_tolerance") 
                                                           (realvar "waypt_hinted_speed") ))
                                  (assignment-node "SetNameToDrive"
                                    (assignment (stringvar "cmd_name") "drive"))
                                  (list-node "WrapperNode"
                                    (pre-condition (successful "DriveToWaypoint"))
                                    (list
                                      ;; if lookup-now(inspect_waypoint) = 2 then waypoint is inspection point
                                      (if (not (= 1 (intvar "task_type")))
                                        (sequence
                                            (assignment-node "Cmd_Resest2"
                                              (assignment (intvar "cmd_return_val") -1000))
                                          (command-node "TakeSample"
                                            ;; return values have the following semantics
                                            ;; -1 - Parsing problem in the command issued by the UE (used to be 2)
                                            ;; 0 - SUCCESS (same as before)
                                            ;; 1 - General CORBA exception (same as before)
                                            ;; 2 - EInterrupted (new)
                                            ;; 3 - ETimeout
                                            ;; 4 - EFailure
                                            ;; 5 - EUnknownName
                                            (post-condition (= 0 (intvar "cmd_return_val")))
                                            (invariant-condition (or (= -1000 (intvar "cmd_return_val")) (= 0 (intvar "cmd_return_val")) (= 3 (intvar "cmd_return_val")) (= 2 (intvar "cmd_return_val"))))
                                            (end-condition (or (!= -1000 (intvar "cmd_return_val")) (= true (boolvar "is_aborted"))))
                                            (command-with-return (intvar "cmd_return_val") "acquire"))

                                          (assignment-node "SetNameToAcquire"
                                            (assignment (stringvar "cmd_name") "acquire"))

                                          
                                          ))))))))))))
                  (assignment-node "SetPauseResult"
                    (start-condition (and (finished "GetAndProcessWaypoint") (= true (boolvar "is_paused"))))
                    (assignment (intvar "cmd_return_val") -3))
                  (update-node "SendUpdate"
                    (start-condition (or (and (finished "GetAndProcessWaypoint") (= false (boolvar "is_paused"))) (finished "SetWaypointRequestFailed") (finished "SetPauseResult")))
                    (update (pair "taskId" (intvar "waypt_id")) (pair "result" (intvar "cmd_return_val")) (pair "commandName" (stringvar "cmd_name"))))
                  (list-node "CheckIfAbortPlan"
                    (start-condition (finished "SendUpdate"))
                    (list
                      ;; Once we have failure type implemeted in PLEXIL this can be simplified
                      (if (or (= -1 (intvar "cmd_return_val")) (= 1 (intvar "cmd_return_val")) (= 4 (intvar "cmd_return_val")) (= 5 (intvar "cmd_return_val")) (= 6 (intvar "cmd_return_val")))
                        (assignment-node "SetAbort"
                          (assignment (boolvar "abort_due_to_exception") true)))))
                  

                  ))
              ))
          (assignment-node "MonitorPauseSignal"
            (start-condition (!= (boolvar "is_paused") (lookup-on-change "plan_paused")))
            (repeat-condition true)
            (assignment (boolvar "is_paused") (lookup-now "plan_paused")))
          ))
      (update-node "SignalEndOfPlan"
        (start-condition (and (finished "SiteSurveyWrapper") (waiting "MonitorAbortSignal")))
        (update (pair "endOfPlan" true)))
      (assignment-node "MonitorAbortSignal"
        (start-condition (= true (lookup-on-change "abort_plan")))
        (assignment (boolvar "is_aborted") true))
      (update-node "SendAbortUpdate"
        ;; An update needs to be issued only when an external abort (via abort_plan) is obtained. 
        ;; An abort update is not issued in all cases where variable is_aborted is true
        (start-condition (finished "MonitorAbortSignal"))
        (update (pair "taskId" (intvar "waypt_id")) (pair "result" -2))
        )
      )))
